import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
})
import type { MapSource as MapSourceType } from './source-map-tree';
import type { SourceMapInput, SourceMapLoader } from './types';
/**
 * Recursively builds a tree structure out of sourcemap files, with each node
 * being either an `OriginalSource` "leaf" or a `SourceMapTree` composed of
 * `OriginalSource`s and `SourceMapTree`s.
 *
 * Every sourcemap is composed of a collection of source files and mappings
 * into locations of those source files. When we generate a `SourceMapTree` for
 * the sourcemap, we attempt to load each source file's own sourcemap. If it
 * does not have an associated sourcemap, it is considered an original,
 * unmodified source file.
 */
export default function buildSourceMapTree(input: SourceMapInput | SourceMapInput[], loader: SourceMapLoader): MapSourceType;
import SourceMap from './source-map';
import type { SourceMapInput, SourceMapLoader, Options } from './types';
export type { SourceMapSegment, EncodedSourceMap, EncodedSourceMap as RawSourceMap, DecodedSourceMap, SourceMapInput, SourceMapLoader, LoaderContext, Options, } from './types';
export type { SourceMap };
/**
 * Traces through all the mappings in the root sourcemap, through the sources
 * (and their sourcemaps), all the way back to the original source location.
 *
 * `loader` will be called every time we encounter a source file. If it returns
 * a sourcemap, we will recurse into that sourcemap to continue the trace. If
 * it returns a falsey value, that source file is treated as an original,
 * unmodified source file.
 *
 * Pass `excludeContent` to exclude any self-containing source file content
 * from the output sourcemap.
 *
 * Pass `decodedMappings` to receive a SourceMap with decoded (instead of
 * VLQ encoded) mappings.
 */
export default function remapping(input: SourceMapInput | SourceMapInput[], loader: SourceMapLoader, options?: boolean | Options): SourceMap;
import { GenMapping } from '@jridgewell/gen-mapping';
import type { TraceMap } from '@jridgewell/trace-mapping';
export declare type SourceMapSegmentObject = {
    column: number;
    line: number;
    name: string;
    source: string;
    content: string | null;
    ignore: boolean;
};
export declare type OriginalSource = {
    map: null;
    sources: Sources[];
    source: string;
    content: string | null;
    ignore: boolean;
};
export declare type MapSource = {
    map: TraceMap;
    sources: Sources[];
    source: string;
    content: null;
    ignore: false;
};
export declare type Sources = OriginalSource | MapSource;
/**
 * MapSource represents a single sourcemap, with the ability to trace mappings into its child nodes
 * (which may themselves be SourceMapTrees).
 */
export declare function MapSource(map: TraceMap, sources: Sources[]): MapSource;
/**
 * A "leaf" node in the sourcemap tree, representing an original, unmodified source file. Recursive
 * segment tracing ends at the `OriginalSource`.
 */
export declare function OriginalSource(source: string, content: string | null, ignore: boolean): OriginalSource;
/**
 * traceMappings is only called on the root level SourceMapTree, and begins the process of
 * resolving each mapping in terms of the original source files.
 */
export declare function traceMappings(tree: MapSource): GenMapping;
/**
 * originalPositionFor is only called on children SourceMapTrees. It recurses down into its own
 * child SourceMapTrees, until we find the original source map.
 */
export declare function originalPositionFor(source: Sources, line: number, column: number, name: string): SourceMapSegmentObject | null;
import type { GenMapping } from '@jridgewell/gen-mapping';
import type { DecodedSourceMap, EncodedSourceMap, Options } from './types';
/**
 * A SourceMap v3 compatible sourcemap, which only includes fields that were
 * provided to it.
 */
export default class SourceMap {
    file?: string | null;
    mappings: EncodedSourceMap['mappings'] | DecodedSourceMap['mappings'];
    sourceRoot?: string;
    names: string[];
    sources: (string | null)[];
    sourcesContent?: (string | null)[];
    version: 3;
    ignoreList: number[] | undefined;
    constructor(map: GenMapping, options: Options);
    toString(): string;
}
import type { SourceMapInput } from '@jridgewell/trace-mapping';
export type { SourceMapSegment, DecodedSourceMap, EncodedSourceMap, } from '@jridgewell/trace-mapping';
export type { SourceMapInput };
export declare type LoaderContext = {
    readonly importer: string;
    readonly depth: number;
    source: string;
    content: string | null | undefined;
    ignore: boolean | undefined;
};
export declare type SourceMapLoader = (file: string, ctx: LoaderContext) => SourceMapInput | null | undefined | void;
export declare type Options = {
    excludeContent?: boolean;
    decodedMappings?: boolean;
};
// duplicated from transform-file so we do not have to import anything here
type TransformFile = {
  (filename: string, callback: (error: Error, file: null) => void): void;
  (
    filename: string,
    opts: any,
    callback: (error: Error, file: null) => void,
  ): void;
};

export const transformFile: TransformFile = function transformFile(
  filename,
  opts,
  callback?: (error: Error, file: null) => void,
) {
  if (typeof opts === "function") {
    callback = opts;
  }

  callback(new Error("Transforming files is not supported in browsers"), null);
};

export function transformFileSync(): never {
  throw new Error("Transforming files is not supported in browsers");
}

export function transformFileAsync() {
  return Promise.reject(
    new Error("Transforming files is not supported in browsers"),
  );
}
import gensync, { type Handler } from "gensync";

import loadConfig from "./config/index.ts";
import type { InputOptions, ResolvedConfig } from "./config/index.ts";
import { run } from "./transformation/index.ts";
import type { FileResult, FileResultCallback } from "./transformation/index.ts";
import * as fs from "./gensync-utils/fs.ts";

type transformFileBrowserType = typeof import("./transform-file-browser");
type transformFileType = typeof import("./transform-file");

// Kind of gross, but essentially asserting that the exports of this module are the same as the
// exports of transform-file-browser, since this file may be replaced at bundle time with
// transform-file-browser.
({}) as any as transformFileBrowserType as transformFileType;

const transformFileRunner = gensync(function* (
  filename: string,
  opts?: InputOptions,
): Handler<FileResult | null> {
  const options = { ...opts, filename };

  const config: ResolvedConfig | null = yield* loadConfig(options);
  if (config === null) return null;

  const code = yield* fs.readFile(filename, "utf8");
  return yield* run(config, code);
});

// @ts-expect-error TS doesn't detect that this signature is compatible
export function transformFile(
  filename: string,
  callback: FileResultCallback,
): void;
export function transformFile(
  filename: string,
  opts: InputOptions | undefined | null,
  callback: FileResultCallback,
): void;
export function transformFile(
  ...args: Parameters<typeof transformFileRunner.errback>
) {
  transformFileRunner.errback(...args);
}

export function transformFileSync(
  ...args: Parameters<typeof transformFileRunner.sync>
) {
  return transformFileRunner.sync(...args);
}
export function transformFileAsync(
  ...args: Parameters<typeof transformFileRunner.async>
) {
  return transformFileRunner.async(...args);
}
import type { ValidatedOptions } from "./validation/options.ts";
import getTargets, {
  type InputTargets,
} from "@babel/helper-compilation-targets";

import type { Targets } from "@babel/helper-compilation-targets";

export function resolveBrowserslistConfigFile(
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  browserslistConfigFile: string,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  configFilePath: string,
): string | void {
  return undefined;
}

export function resolveTargets(
  options: ValidatedOptions,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  root: string,
): Targets {
  const optTargets = options.targets;
  let targets: InputTargets;

  if (typeof optTargets === "string" || Array.isArray(optTargets)) {
    targets = { browsers: optTargets };
  } else if (optTargets) {
    if ("esmodules" in optTargets) {
      targets = { ...optTargets, esmodules: "intersect" };
    } else {
      // https://github.com/microsoft/TypeScript/issues/17002
      targets = optTargets as InputTargets;
    }
  }

  return getTargets(targets, {
    ignoreBrowserslistConfig: true,
    browserslistEnv: options.browserslistEnv,
  });
}
type browserType = typeof import("./resolve-targets-browser");
type nodeType = typeof import("./resolve-targets");

// Kind of gross, but essentially asserting that the exports of this module are the same as the
// exports of index-browser, since this file may be replaced at bundle time with index-browser.
({}) as any as browserType as nodeType;

import type { ValidatedOptions } from "./validation/options.ts";
import path from "path";
import getTargets, {
  type InputTargets,
} from "@babel/helper-compilation-targets";

import type { Targets } from "@babel/helper-compilation-targets";

export function resolveBrowserslistConfigFile(
  browserslistConfigFile: string,
  configFileDir: string,
): string | undefined {
  return path.resolve(configFileDir, browserslistConfigFile);
}

export function resolveTargets(
  options: ValidatedOptions,
  root: string,
): Targets {
  const optTargets = options.targets;
  let targets: InputTargets;

  if (typeof optTargets === "string" || Array.isArray(optTargets)) {
    targets = { browsers: optTargets };
  } else if (optTargets) {
    if ("esmodules" in optTargets) {
      targets = { ...optTargets, esmodules: "intersect" };
    } else {
      // https://github.com/microsoft/TypeScript/issues/17002
      targets = optTargets as InputTargets;
    }
  }

  const { browserslistConfigFile } = options;
  let configFile;
  let ignoreBrowserslistConfig = false;
  if (typeof browserslistConfigFile === "string") {
    configFile = browserslistConfigFile;
  } else {
    ignoreBrowserslistConfig = browserslistConfigFile === false;
  }

  return getTargets(targets, {
    ignoreBrowserslistConfig,
    configFile,
    configPath: root,
    browserslistEnv: options.browserslistEnv,
  });
}
import type { Handler } from "gensync";

import type {
  ConfigFile,
  IgnoreFile,
  RelativeConfig,
  FilePackageData,
} from "./types.ts";

import type { CallerMetadata } from "../validation/options.ts";

export type { ConfigFile, IgnoreFile, RelativeConfig, FilePackageData };

export function findConfigUpwards(
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  rootDir: string,
): string | null {
  return null;
}

// eslint-disable-next-line require-yield
export function* findPackageData(filepath: string): Handler<FilePackageData> {
  return {
    filepath,
    directories: [],
    pkg: null,
    isPackage: false,
  };
}

// eslint-disable-next-line require-yield
export function* findRelativeConfig(
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  pkgData: FilePackageData,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  envName: string,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  caller: CallerMetadata | undefined,
): Handler<RelativeConfig> {
  return { config: null, ignore: null };
}

// eslint-disable-next-line require-yield
export function* findRootConfig(
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  dirname: string,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  envName: string,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  caller: CallerMetadata | undefined,
): Handler<ConfigFile | null> {
  return null;
}

// eslint-disable-next-line require-yield
export function* loadConfig(
  name: string,
  dirname: string,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  envName: string,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  caller: CallerMetadata | undefined,
): Handler<ConfigFile> {
  throw new Error(`Cannot load ${name} relative to ${dirname} in a browser`);
}

// eslint-disable-next-line require-yield
export function* resolveShowConfigPath(
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  dirname: string,
): Handler<string | null> {
  return null;
}

export const ROOT_CONFIG_FILENAMES: string[] = [];

type Resolved =
  | { loader: "require"; filepath: string }
  | { loader: "import"; filepath: string };

// eslint-disable-next-line @typescript-eslint/no-unused-vars
export function resolvePlugin(name: string, dirname: string): Resolved | null {
  return null;
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
export function resolvePreset(name: string, dirname: string): Resolved | null {
  return null;
}

export function loadPlugin(
  name: string,
  dirname: string,
): Handler<{
  filepath: string;
  value: unknown;
}> {
  throw new Error(
    `Cannot load plugin ${name} relative to ${dirname} in a browser`,
  );
}

export function loadPreset(
  name: string,
  dirname: string,
): Handler<{
  filepath: string;
  value: unknown;
}> {
  throw new Error(
    `Cannot load preset ${name} relative to ${dirname} in a browser`,
  );
}
type indexBrowserType = typeof import("./index-browser");
type indexType = typeof import("./index");

// Kind of gross, but essentially asserting that the exports of this module are the same as the
// exports of index-browser, since this file may be replaced at bundle time with index-browser.
({}) as any as indexBrowserType as indexType;

export { findPackageData } from "./package.ts";

export {
  findConfigUpwards,
  findRelativeConfig,
  findRootConfig,
  loadConfig,
  resolveShowConfigPath,
  ROOT_CONFIG_FILENAMES,
} from "./configuration.ts";
export type {
  ConfigFile,
  IgnoreFile,
  RelativeConfig,
  FilePackageData,
} from "./types.ts";
export {
  loadPlugin,
  loadPreset,
  resolvePlugin,
  resolvePreset,
} from "./plugins.ts";
// Type definitions for Chalk
// Definitions by: Thomas Sauer <https://github.com/t-sauer>

export const enum Level {
	None = 0,
	Basic = 1,
	Ansi256 = 2,
	TrueColor = 3
}

export interface ChalkOptions {
	enabled?: boolean;
	level?: Level;
}

export interface ChalkConstructor {
	new (options?: ChalkOptions): Chalk;
	(options?: ChalkOptions): Chalk;
}

export interface ColorSupport {
	level: Level;
	hasBasic: boolean;
	has256: boolean;
	has16m: boolean;
}

export interface Chalk {
	(...text: string[]): string;
	(text: TemplateStringsArray, ...placeholders: string[]): string;
	constructor: ChalkConstructor;
	enabled: boolean;
	level: Level;
	rgb(r: number, g: number, b: number): this;
	hsl(h: number, s: number, l: number): this;
	hsv(h: number, s: number, v: number): this;
	hwb(h: number, w: number, b: number): this;
	bgHex(color: string): this;
	bgKeyword(color: string): this;
	bgRgb(r: number, g: number, b: number): this;
	bgHsl(h: number, s: number, l: number): this;
	bgHsv(h: number, s: number, v: number): this;
	bgHwb(h: number, w: number, b: number): this;
	hex(color: string): this;
	keyword(color: string): this;

	readonly reset: this;
	readonly bold: this;
	readonly dim: this;
	readonly italic: this;
	readonly underline: this;
	readonly inverse: this;
	readonly hidden: this;
	readonly strikethrough: this;

	readonly visible: this;

	readonly black: this;
	readonly red: this;
	readonly green: this;
	readonly yellow: this;
	readonly blue: this;
	readonly magenta: this;
	readonly cyan: this;
	readonly white: this;
	readonly gray: this;
	readonly grey: this;
	readonly blackBright: this;
	readonly redBright: this;
	readonly greenBright: this;
	readonly yellowBright: this;
	readonly blueBright: this;
	readonly magentaBright: this;
	readonly cyanBright: this;
	readonly whiteBright: this;

	readonly bgBlack: this;
	readonly bgRed: this;
	readonly bgGreen: this;
	readonly bgYellow: this;
	readonly bgBlue: this;
	readonly bgMagenta: this;
	readonly bgCyan: this;
	readonly bgWhite: this;
	readonly bgBlackBright: this;
	readonly bgRedBright: this;
	readonly bgGreenBright: this;
	readonly bgYellowBright: this;
	readonly bgBlueBright: this;
	readonly bgMagentaBright: this;
	readonly bgCyanBright: this;
	readonly bgWhiteBright: this;
}

declare const chalk: Chalk & { supportsColor: ColorSupport };

export default chalk
// This file is auto-generated! Do not modify it directly.
/* eslint-disable @typescript-eslint/consistent-type-imports, @typescript-eslint/no-redundant-type-constituents */
import * as _babel_types from '@babel/types';

type BABEL_8_BREAKING = false;
type IF_BABEL_7<V> = false extends BABEL_8_BREAKING ? V : never;

type Plugin =
  | "asyncDoExpressions"
  | IF_BABEL_7<"asyncGenerators">
  | IF_BABEL_7<"bigInt">
  | IF_BABEL_7<"classPrivateMethods">
  | IF_BABEL_7<"classPrivateProperties">
  | IF_BABEL_7<"classProperties">
  | IF_BABEL_7<"classStaticBlock">
  | IF_BABEL_7<"decimal">
  | "decorators-legacy"
  | "deferredImportEvaluation"
  | "decoratorAutoAccessors"
  | "destructuringPrivate"
  | "doExpressions"
  | IF_BABEL_7<"dynamicImport">
  | "explicitResourceManagement"
  | "exportDefaultFrom"
  | IF_BABEL_7<"exportNamespaceFrom">
  | "flow"
  | "flowComments"
  | "functionBind"
  | "functionSent"
  | "importMeta"
  | "jsx"
  | IF_BABEL_7<"logicalAssignment">
  | IF_BABEL_7<"importAssertions">
  | IF_BABEL_7<"importReflection">
  | "moduleBlocks"
  | IF_BABEL_7<"moduleStringNames">
  | IF_BABEL_7<"nullishCoalescingOperator">
  | IF_BABEL_7<"numericSeparator">
  | IF_BABEL_7<"objectRestSpread">
  | IF_BABEL_7<"optionalCatchBinding">
  | IF_BABEL_7<"optionalChaining">
  | "partialApplication"
  | "placeholders"
  | IF_BABEL_7<"privateIn">
  | IF_BABEL_7<"regexpUnicodeSets">
  | "sourcePhaseImports"
  | "throwExpressions"
  | IF_BABEL_7<"topLevelAwait">
  | "v8intrinsic"
  | ParserPluginWithOptions[0];

type ParserPluginWithOptions =
  | ["decorators", DecoratorsPluginOptions]
  | ["estree", { classFeatures?: boolean }]
  | ["importAttributes", { deprecatedAssertSyntax: boolean }]
  | IF_BABEL_7<["moduleAttributes", { version: "may-2020" }]>
  | ["optionalChainingAssign", { version: "2023-07" }]
  | ["pipelineOperator", PipelineOperatorPluginOptions]
  | ["recordAndTuple", RecordAndTuplePluginOptions]
  | ["flow", FlowPluginOptions]
  | ["typescript", TypeScriptPluginOptions];

type PluginConfig = Plugin | ParserPluginWithOptions;

interface DecoratorsPluginOptions {
  decoratorsBeforeExport?: boolean;
  allowCallParenthesized?: boolean;
}

interface PipelineOperatorPluginOptions {
  proposal: BABEL_8_BREAKING extends false
    ? "minimal" | "fsharp" | "hack" | "smart"
    : "fsharp" | "hack";
  topicToken?: "%" | "#" | "@@" | "^^" | "^";
}

interface RecordAndTuplePluginOptions {
  syntaxType: "bar" | "hash";
}

type FlowPluginOptions = BABEL_8_BREAKING extends true
  ? {
      all?: boolean;
      enums?: boolean;
    }
  : {
      all?: boolean;
    };

interface TypeScriptPluginOptions {
  dts?: boolean;
  disallowAmbiguousJSXLike?: boolean;
}

// Type definitions for @babel/parser
// Project: https://github.com/babel/babel/tree/main/packages/babel-parser
// Definitions by: Troy Gerwien <https://github.com/yortus>
//                 Marvin Hagemeister <https://github.com/marvinhagemeister>
//                 Avi Vahl <https://github.com/AviVahl>
// TypeScript Version: 2.9

/**
 * Parse the provided code as an entire ECMAScript program.
 */
declare function parse(
  input: string,
  options?: ParserOptions
): ParseResult<_babel_types.File>;

/**
 * Parse the provided code as a single expression.
 */
declare function parseExpression(
  input: string,
  options?: ParserOptions
): ParseResult<_babel_types.Expression>;

interface ParserOptions {
  /**
   * By default, import and export declarations can only appear at a program's top level.
   * Setting this option to true allows them anywhere where a statement is allowed.
   */
  allowImportExportEverywhere?: boolean;

  /**
   * By default, await use is not allowed outside of an async function.
   * Set this to true to accept such code.
   */
  allowAwaitOutsideFunction?: boolean;

  /**
   * By default, a return statement at the top level raises an error.
   * Set this to true to accept such code.
   */
  allowReturnOutsideFunction?: boolean;

  /**
   * By default, new.target use is not allowed outside of a function or class.
   * Set this to true to accept such code.
   */
  allowNewTargetOutsideFunction?: boolean;

  allowSuperOutsideMethod?: boolean;

  /**
   * By default, exported identifiers must refer to a declared variable.
   * Set this to true to allow export statements to reference undeclared variables.
   */
  allowUndeclaredExports?: boolean;

  /**
   * By default, Babel parser JavaScript code according to Annex B syntax.
   * Set this to `false` to disable such behavior.
   */
  annexB?: boolean;

  /**
   * By default, Babel attaches comments to adjacent AST nodes.
   * When this option is set to false, comments are not attached.
   * It can provide up to 30% performance improvement when the input code has many comments.
   * @babel/eslint-parser will set it for you.
   * It is not recommended to use attachComment: false with Babel transform,
   * as doing so removes all the comments in output code, and renders annotations such as
   * /* istanbul ignore next *\/ nonfunctional.
   */
  attachComment?: boolean;

  /**
   * By default, Babel always throws an error when it finds some invalid code.
   * When this option is set to true, it will store the parsing error and
   * try to continue parsing the invalid input file.
   */
  errorRecovery?: boolean;

  /**
   * Indicate the mode the code should be parsed in.
   * Can be one of "script", "module", or "unambiguous". Defaults to "script".
   * "unambiguous" will make @babel/parser attempt to guess, based on the presence
   * of ES6 import or export statements.
   * Files with ES6 imports and exports are considered "module" and are otherwise "script".
   */
  sourceType?: "script" | "module" | "unambiguous";

  /**
   * Correlate output AST nodes with their source filename.
   * Useful when generating code and source maps from the ASTs of multiple input files.
   */
  sourceFilename?: string;

  /**
   * By default, the first line of code parsed is treated as line 1.
   * You can provide a line number to alternatively start with.
   * Useful for integration with other source tools.
   */
  startLine?: number;

  /**
   * By default, the parsed code is treated as if it starts from line 1, column 0.
   * You can provide a column number to alternatively start with.
   * Useful for integration with other source tools.
   */
  startColumn?: number;

  /**
   * Array containing the plugins that you want to enable.
   */
  plugins?: ParserPlugin[];

  /**
   * Should the parser work in strict mode.
   * Defaults to true if sourceType === 'module'. Otherwise, false.
   */
  strictMode?: boolean;

  /**
   * Adds a ranges property to each node: [node.start, node.end]
   */
  ranges?: boolean;

  /**
   * Adds all parsed tokens to a tokens property on the File node.
   */
  tokens?: boolean;

  /**
   * By default, the parser adds information about parentheses by setting
   * `extra.parenthesized` to `true` as needed.
   * When this option is `true` the parser creates `ParenthesizedExpression`
   * AST nodes instead of using the `extra` property.
   */
  createParenthesizedExpressions?: boolean;

  /**
   * The default is false in Babel 7 and true in Babel 8
   * Set this to true to parse it as an `ImportExpression` node.
   * Otherwise `import(foo)` is parsed as `CallExpression(Import, [Identifier(foo)])`.
   */
  createImportExpressions?: boolean;
}

type ParserPlugin = PluginConfig;


declare const tokTypes: {
  // todo(flow->ts) real token type
  [name: string]: any;
};

interface ParseError {
  code: string;
  reasonCode: string;
}

type ParseResult<Result> = Result & {
  errors: ParseError[];
};

export { DecoratorsPluginOptions, FlowPluginOptions, ParseError, ParseResult, ParserOptions, ParserPlugin, ParserPluginWithOptions, PipelineOperatorPluginOptions, RecordAndTuplePluginOptions, TypeScriptPluginOptions, parse, parseExpression, tokTypes };
// NOTE: This file is autogenerated. Do not modify.
// See packages/babel-types/scripts/generators/typescript-legacy.js for script used.

interface BaseComment {
  value: string;
  start: number;
  end: number;
  loc: SourceLocation;
  type: "CommentBlock" | "CommentLine";
}

export interface CommentBlock extends BaseComment {
  type: "CommentBlock";
}

export interface CommentLine extends BaseComment {
  type: "CommentLine";
}

export type Comment = CommentBlock | CommentLine;

export interface SourceLocation {
  start: {
    line: number;
    column: number;
  };

  end: {
    line: number;
    column: number;
  };
}

interface BaseNode {
  leadingComments: ReadonlyArray<Comment> | null;
  innerComments: ReadonlyArray<Comment> | null;
  trailingComments: ReadonlyArray<Comment> | null;
  start: number | null;
  end: number | null;
  loc: SourceLocation | null;
  type: Node["type"];
  extra?: Record<string, unknown>;
}

export type Node = Accessor | AnyTypeAnnotation | ArgumentPlaceholder | ArrayExpression | ArrayPattern | ArrayTypeAnnotation | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BigIntLiteral | Binary | BinaryExpression | BindExpression | Block | BlockParent | BlockStatement | BooleanLiteral | BooleanLiteralTypeAnnotation | BooleanTypeAnnotation | BreakStatement | CallExpression | CatchClause | Class | ClassAccessorProperty | ClassBody | ClassDeclaration | ClassExpression | ClassImplements | ClassMethod | ClassPrivateMethod | ClassPrivateProperty | ClassProperty | CompletionStatement | Conditional | ConditionalExpression | ContinueStatement | DebuggerStatement | DecimalLiteral | Declaration | DeclareClass | DeclareExportAllDeclaration | DeclareExportDeclaration | DeclareFunction | DeclareInterface | DeclareModule | DeclareModuleExports | DeclareOpaqueType | DeclareTypeAlias | DeclareVariable | DeclaredPredicate | Decorator | Directive | DirectiveLiteral | DoExpression | DoWhileStatement | EmptyStatement | EmptyTypeAnnotation | EnumBody | EnumBooleanBody | EnumBooleanMember | EnumDeclaration | EnumDefaultedMember | EnumMember | EnumNumberBody | EnumNumberMember | EnumStringBody | EnumStringMember | EnumSymbolBody | ExistsTypeAnnotation | ExportAllDeclaration | ExportDeclaration | ExportDefaultDeclaration | ExportDefaultSpecifier | ExportNamedDeclaration | ExportNamespaceSpecifier | ExportSpecifier | Expression | ExpressionStatement | ExpressionWrapper | File | Flow | FlowBaseAnnotation | FlowDeclaration | FlowPredicate | FlowType | For | ForInStatement | ForOfStatement | ForStatement | ForXStatement | Function | FunctionDeclaration | FunctionExpression | FunctionParent | FunctionTypeAnnotation | FunctionTypeParam | GenericTypeAnnotation | Identifier | IfStatement | Immutable | Import | ImportAttribute | ImportDeclaration | ImportDefaultSpecifier | ImportExpression | ImportNamespaceSpecifier | ImportOrExportDeclaration | ImportSpecifier | IndexedAccessType | InferredPredicate | InterfaceDeclaration | InterfaceExtends | InterfaceTypeAnnotation | InterpreterDirective | IntersectionTypeAnnotation | JSX | JSXAttribute | JSXClosingElement | JSXClosingFragment | JSXElement | JSXEmptyExpression | JSXExpressionContainer | JSXFragment | JSXIdentifier | JSXMemberExpression | JSXNamespacedName | JSXOpeningElement | JSXOpeningFragment | JSXSpreadAttribute | JSXSpreadChild | JSXText | LVal | LabeledStatement | Literal | LogicalExpression | Loop | MemberExpression | MetaProperty | Method | Miscellaneous | MixedTypeAnnotation | ModuleDeclaration | ModuleExpression | ModuleSpecifier | NewExpression | Noop | NullLiteral | NullLiteralTypeAnnotation | NullableTypeAnnotation | NumberLiteral | NumberLiteralTypeAnnotation | NumberTypeAnnotation | NumericLiteral | ObjectExpression | ObjectMember | ObjectMethod | ObjectPattern | ObjectProperty | ObjectTypeAnnotation | ObjectTypeCallProperty | ObjectTypeIndexer | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalCallExpression | OptionalIndexedAccessType | OptionalMemberExpression | ParenthesizedExpression | Pattern | PatternLike | PipelineBareFunction | PipelinePrimaryTopicReference | PipelineTopicExpression | Placeholder | Private | PrivateName | Program | Property | Pureish | QualifiedTypeIdentifier | RecordExpression | RegExpLiteral | RegexLiteral | RestElement | RestProperty | ReturnStatement | Scopable | SequenceExpression | SpreadElement | SpreadProperty | Standardized | Statement | StaticBlock | StringLiteral | StringLiteralTypeAnnotation | StringTypeAnnotation | Super | SwitchCase | SwitchStatement | SymbolTypeAnnotation | TSAnyKeyword | TSArrayType | TSAsExpression | TSBaseType | TSBigIntKeyword | TSBooleanKeyword | TSCallSignatureDeclaration | TSConditionalType | TSConstructSignatureDeclaration | TSConstructorType | TSDeclareFunction | TSDeclareMethod | TSEntityName | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSExpressionWithTypeArguments | TSExternalModuleReference | TSFunctionType | TSImportEqualsDeclaration | TSImportType | TSIndexSignature | TSIndexedAccessType | TSInferType | TSInstantiationExpression | TSInterfaceBody | TSInterfaceDeclaration | TSIntersectionType | TSIntrinsicKeyword | TSLiteralType | TSMappedType | TSMethodSignature | TSModuleBlock | TSModuleDeclaration | TSNamedTupleMember | TSNamespaceExportDeclaration | TSNeverKeyword | TSNonNullExpression | TSNullKeyword | TSNumberKeyword | TSObjectKeyword | TSOptionalType | TSParameterProperty | TSParenthesizedType | TSPropertySignature | TSQualifiedName | TSRestType | TSSatisfiesExpression | TSStringKeyword | TSSymbolKeyword | TSThisType | TSTupleType | TSType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeElement | TSTypeLiteral | TSTypeOperator | TSTypeParameter | TSTypeParameterDeclaration | TSTypeParameterInstantiation | TSTypePredicate | TSTypeQuery | TSTypeReference | TSUndefinedKeyword | TSUnionType | TSUnknownKeyword | TSVoidKeyword | TaggedTemplateExpression | TemplateElement | TemplateLiteral | Terminatorless | ThisExpression | ThisTypeAnnotation | ThrowStatement | TopicReference | TryStatement | TupleExpression | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeCastExpression | TypeParameter | TypeParameterDeclaration | TypeParameterInstantiation | TypeScript | TypeofTypeAnnotation | UnaryExpression | UnaryLike | UnionTypeAnnotation | UpdateExpression | UserWhitespacable | V8IntrinsicIdentifier | VariableDeclaration | VariableDeclarator | Variance | VoidTypeAnnotation | While | WhileStatement | WithStatement | YieldExpression;

export interface ArrayExpression extends BaseNode {
  type: "ArrayExpression";
  elements: Array<null | Expression | SpreadElement>;
}

export interface AssignmentExpression extends BaseNode {
  type: "AssignmentExpression";
  operator: string;
  left: LVal | OptionalMemberExpression;
  right: Expression;
}

export interface BinaryExpression extends BaseNode {
  type: "BinaryExpression";
  operator: "+" | "-" | "/" | "%" | "*" | "**" | "&" | "|" | ">>" | ">>>" | "<<" | "^" | "==" | "===" | "!=" | "!==" | "in" | "instanceof" | ">" | "<" | ">=" | "<=" | "|>";
  left: Expression | PrivateName;
  right: Expression;
}

export interface InterpreterDirective extends BaseNode {
  type: "InterpreterDirective";
  value: string;
}

export interface Directive extends BaseNode {
  type: "Directive";
  value: DirectiveLiteral;
}

export interface DirectiveLiteral extends BaseNode {
  type: "DirectiveLiteral";
  value: string;
}

export interface BlockStatement extends BaseNode {
  type: "BlockStatement";
  body: Array<Statement>;
  directives: Array<Directive>;
}

export interface BreakStatement extends BaseNode {
  type: "BreakStatement";
  label: Identifier | null;
}

export interface CallExpression extends BaseNode {
  type: "CallExpression";
  callee: Expression | Super | V8IntrinsicIdentifier;
  arguments: Array<Expression | SpreadElement | ArgumentPlaceholder>;
  optional: boolean | null;
  typeArguments: TypeParameterInstantiation | null;
  typeParameters: TSTypeParameterInstantiation | null;
}

export interface CatchClause extends BaseNode {
  type: "CatchClause";
  param: Identifier | ArrayPattern | ObjectPattern | null;
  body: BlockStatement;
}

export interface ConditionalExpression extends BaseNode {
  type: "ConditionalExpression";
  test: Expression;
  consequent: Expression;
  alternate: Expression;
}

export interface ContinueStatement extends BaseNode {
  type: "ContinueStatement";
  label: Identifier | null;
}

export interface DebuggerStatement extends BaseNode {
  type: "DebuggerStatement";
}

export interface DoWhileStatement extends BaseNode {
  type: "DoWhileStatement";
  test: Expression;
  body: Statement;
}

export interface EmptyStatement extends BaseNode {
  type: "EmptyStatement";
}

export interface ExpressionStatement extends BaseNode {
  type: "ExpressionStatement";
  expression: Expression;
}

export interface File extends BaseNode {
  type: "File";
  program: Program;
  comments: Array<CommentBlock | CommentLine> | null;
  tokens: Array<any> | null;
}

export interface ForInStatement extends BaseNode {
  type: "ForInStatement";
  left: VariableDeclaration | LVal;
  right: Expression;
  body: Statement;
}

export interface ForStatement extends BaseNode {
  type: "ForStatement";
  init: VariableDeclaration | Expression | null;
  test: Expression | null;
  update: Expression | null;
  body: Statement;
}

export interface FunctionDeclaration extends BaseNode {
  type: "FunctionDeclaration";
  id: Identifier | null;
  params: Array<Identifier | Pattern | RestElement>;
  body: BlockStatement;
  generator: boolean;
  async: boolean;
  declare: boolean | null;
  predicate: DeclaredPredicate | InferredPredicate | null;
  returnType: TypeAnnotation | TSTypeAnnotation | Noop | null;
  typeParameters: TypeParameterDeclaration | TSTypeParameterDeclaration | Noop | null;
}

export interface FunctionExpression extends BaseNode {
  type: "FunctionExpression";
  id: Identifier | null;
  params: Array<Identifier | Pattern | RestElement>;
  body: BlockStatement;
  generator: boolean;
  async: boolean;
  predicate: DeclaredPredicate | InferredPredicate | null;
  returnType: TypeAnnotation | TSTypeAnnotation | Noop | null;
  typeParameters: TypeParameterDeclaration | TSTypeParameterDeclaration | Noop | null;
}

export interface Identifier extends BaseNode {
  type: "Identifier";
  name: string;
  decorators: Array<Decorator> | null;
  optional: boolean | null;
  typeAnnotation: TypeAnnotation | TSTypeAnnotation | Noop | null;
}

export interface IfStatement extends BaseNode {
  type: "IfStatement";
  test: Expression;
  consequent: Statement;
  alternate: Statement | null;
}

export interface LabeledStatement extends BaseNode {
  type: "LabeledStatement";
  label: Identifier;
  body: Statement;
}

export interface StringLiteral extends BaseNode {
  type: "StringLiteral";
  value: string;
}

export interface NumericLiteral extends BaseNode {
  type: "NumericLiteral";
  value: number;
}

export interface NullLiteral extends BaseNode {
  type: "NullLiteral";
}

export interface BooleanLiteral extends BaseNode {
  type: "BooleanLiteral";
  value: boolean;
}

export interface RegExpLiteral extends BaseNode {
  type: "RegExpLiteral";
  pattern: string;
  flags: string;
}

export interface LogicalExpression extends BaseNode {
  type: "LogicalExpression";
  operator: "||" | "&&" | "??";
  left: Expression;
  right: Expression;
}

export interface MemberExpression extends BaseNode {
  type: "MemberExpression";
  object: Expression | Super;
  property: Expression | Identifier | PrivateName;
  computed: boolean;
  optional: boolean | null;
}

export interface NewExpression extends BaseNode {
  type: "NewExpression";
  callee: Expression | Super | V8IntrinsicIdentifier;
  arguments: Array<Expression | SpreadElement | ArgumentPlaceholder>;
  optional: boolean | null;
  typeArguments: TypeParameterInstantiation | null;
  typeParameters: TSTypeParameterInstantiation | null;
}

export interface Program extends BaseNode {
  type: "Program";
  body: Array<Statement>;
  directives: Array<Directive>;
  sourceType: "script" | "module";
  interpreter: InterpreterDirective | null;
}

export interface ObjectExpression extends BaseNode {
  type: "ObjectExpression";
  properties: Array<ObjectMethod | ObjectProperty | SpreadElement>;
}

export interface ObjectMethod extends BaseNode {
  type: "ObjectMethod";
  kind: "method" | "get" | "set";
  key: Expression | Identifier | StringLiteral | NumericLiteral | BigIntLiteral;
  params: Array<Identifier | Pattern | RestElement>;
  body: BlockStatement;
  computed: boolean;
  generator: boolean;
  async: boolean;
  decorators: Array<Decorator> | null;
  returnType: TypeAnnotation | TSTypeAnnotation | Noop | null;
  typeParameters: TypeParameterDeclaration | TSTypeParameterDeclaration | Noop | null;
}

export interface ObjectProperty extends BaseNode {
  type: "ObjectProperty";
  key: Expression | Identifier | StringLiteral | NumericLiteral | BigIntLiteral | DecimalLiteral | PrivateName;
  value: Expression | PatternLike;
  computed: boolean;
  shorthand: boolean;
  decorators: Array<Decorator> | null;
}

export interface RestElement extends BaseNode {
  type: "RestElement";
  argument: LVal;
  decorators: Array<Decorator> | null;
  optional: boolean | null;
  typeAnnotation: TypeAnnotation | TSTypeAnnotation | Noop | null;
}

export interface ReturnStatement extends BaseNode {
  type: "ReturnStatement";
  argument: Expression | null;
}

export interface SequenceExpression extends BaseNode {
  type: "SequenceExpression";
  expressions: Array<Expression>;
}

export interface ParenthesizedExpression extends BaseNode {
  type: "ParenthesizedExpression";
  expression: Expression;
}

export interface SwitchCase extends BaseNode {
  type: "SwitchCase";
  test: Expression | null;
  consequent: Array<Statement>;
}

export interface SwitchStatement extends BaseNode {
  type: "SwitchStatement";
  discriminant: Expression;
  cases: Array<SwitchCase>;
}

export interface ThisExpression extends BaseNode {
  type: "ThisExpression";
}

export interface ThrowStatement extends BaseNode {
  type: "ThrowStatement";
  argument: Expression;
}

export interface TryStatement extends BaseNode {
  type: "TryStatement";
  block: BlockStatement;
  handler: CatchClause | null;
  finalizer: BlockStatement | null;
}

export interface UnaryExpression extends BaseNode {
  type: "UnaryExpression";
  operator: "void" | "throw" | "delete" | "!" | "+" | "-" | "~" | "typeof";
  argument: Expression;
  prefix: boolean;
}

export interface UpdateExpression extends BaseNode {
  type: "UpdateExpression";
  operator: "++" | "--";
  argument: Expression;
  prefix: boolean;
}

export interface VariableDeclaration extends BaseNode {
  type: "VariableDeclaration";
  kind: "var" | "let" | "const" | "using" | "await using";
  declarations: Array<VariableDeclarator>;
  declare: boolean | null;
}

export interface VariableDeclarator extends BaseNode {
  type: "VariableDeclarator";
  id: LVal;
  init: Expression | null;
  definite: boolean | null;
}

export interface WhileStatement extends BaseNode {
  type: "WhileStatement";
  test: Expression;
  body: Statement;
}

export interface WithStatement extends BaseNode {
  type: "WithStatement";
  object: Expression;
  body: Statement;
}

export interface AssignmentPattern extends BaseNode {
  type: "AssignmentPattern";
  left: Identifier | ObjectPattern | ArrayPattern | MemberExpression | TSAsExpression | TSSatisfiesExpression | TSTypeAssertion | TSNonNullExpression;
  right: Expression;
  decorators: Array<Decorator> | null;
  optional: boolean | null;
  typeAnnotation: TypeAnnotation | TSTypeAnnotation | Noop | null;
}

export interface ArrayPattern extends BaseNode {
  type: "ArrayPattern";
  elements: Array<null | PatternLike | LVal>;
  decorators: Array<Decorator> | null;
  optional: boolean | null;
  typeAnnotation: TypeAnnotation | TSTypeAnnotation | Noop | null;
}

export interface ArrowFunctionExpression extends BaseNode {
  type: "ArrowFunctionExpression";
  params: Array<Identifier | Pattern | RestElement>;
  body: BlockStatement | Expression;
  async: boolean;
  expression: boolean;
  generator: boolean;
  predicate: DeclaredPredicate | InferredPredicate | null;
  returnType: TypeAnnotation | TSTypeAnnotation | Noop | null;
  typeParameters: TypeParameterDeclaration | TSTypeParameterDeclaration | Noop | null;
}

export interface ClassBody extends BaseNode {
  type: "ClassBody";
  body: Array<ClassMethod | ClassPrivateMethod | ClassProperty | ClassPrivateProperty | ClassAccessorProperty | TSDeclareMethod | TSIndexSignature | StaticBlock>;
}

export interface ClassExpression extends BaseNode {
  type: "ClassExpression";
  id: Identifier | null;
  superClass: Expression | null;
  body: ClassBody;
  decorators: Array<Decorator> | null;
  implements: Array<TSExpressionWithTypeArguments | ClassImplements> | null;
  mixins: InterfaceExtends | null;
  superTypeParameters: TypeParameterInstantiation | TSTypeParameterInstantiation | null;
  typeParameters: TypeParameterDeclaration | TSTypeParameterDeclaration | Noop | null;
}

export interface ClassDeclaration extends BaseNode {
  type: "ClassDeclaration";
  id: Identifier | null;
  superClass: Expression | null;
  body: ClassBody;
  decorators: Array<Decorator> | null;
  abstract: boolean | null;
  declare: boolean | null;
  implements: Array<TSExpressionWithTypeArguments | ClassImplements> | null;
  mixins: InterfaceExtends | null;
  superTypeParameters: TypeParameterInstantiation | TSTypeParameterInstantiation | null;
  typeParameters: TypeParameterDeclaration | TSTypeParameterDeclaration | Noop | null;
}

export interface ExportAllDeclaration extends BaseNode {
  type: "ExportAllDeclaration";
  source: StringLiteral;
  assertions: Array<ImportAttribute> | null;
  attributes: Array<ImportAttribute> | null;
  exportKind: "type" | "value" | null;
}

export interface ExportDefaultDeclaration extends BaseNode {
  type: "ExportDefaultDeclaration";
  declaration: TSDeclareFunction | FunctionDeclaration | ClassDeclaration | Expression;
  exportKind: "value" | null;
}

export interface ExportNamedDeclaration extends BaseNode {
  type: "ExportNamedDeclaration";
  declaration: Declaration | null;
  specifiers: Array<ExportSpecifier | ExportDefaultSpecifier | ExportNamespaceSpecifier>;
  source: StringLiteral | null;
  assertions: Array<ImportAttribute> | null;
  attributes: Array<ImportAttribute> | null;
  exportKind: "type" | "value" | null;
}

export interface ExportSpecifier extends BaseNode {
  type: "ExportSpecifier";
  local: Identifier;
  exported: Identifier | StringLiteral;
  exportKind: "type" | "value" | null;
}

export interface ForOfStatement extends BaseNode {
  type: "ForOfStatement";
  left: VariableDeclaration | LVal;
  right: Expression;
  body: Statement;
  await: boolean;
}

export interface ImportDeclaration extends BaseNode {
  type: "ImportDeclaration";
  specifiers: Array<ImportSpecifier | ImportDefaultSpecifier | ImportNamespaceSpecifier>;
  source: StringLiteral;
  assertions: Array<ImportAttribute> | null;
  attributes: Array<ImportAttribute> | null;
  importKind: "type" | "typeof" | "value" | null;
  module: boolean | null;
  phase: "source" | "defer" | null;
}

export interface ImportDefaultSpecifier extends BaseNode {
  type: "ImportDefaultSpecifier";
  local: Identifier;
}

export interface ImportNamespaceSpecifier extends BaseNode {
  type: "ImportNamespaceSpecifier";
  local: Identifier;
}

export interface ImportSpecifier extends BaseNode {
  type: "ImportSpecifier";
  local: Identifier;
  imported: Identifier | StringLiteral;
  importKind: "type" | "typeof" | "value" | null;
}

export interface ImportExpression extends BaseNode {
  type: "ImportExpression";
  source: Expression;
  options: Expression | null;
  phase: "source" | "defer" | null;
}

export interface MetaProperty extends BaseNode {
  type: "MetaProperty";
  meta: Identifier;
  property: Identifier;
}

export interface ClassMethod extends BaseNode {
  type: "ClassMethod";
  kind: "get" | "set" | "method" | "constructor";
  key: Identifier | StringLiteral | NumericLiteral | BigIntLiteral | Expression;
  params: Array<Identifier | Pattern | RestElement | TSParameterProperty>;
  body: BlockStatement;
  computed: boolean;
  static: boolean;
  generator: boolean;
  async: boolean;
  abstract: boolean | null;
  access: "public" | "private" | "protected" | null;
  accessibility: "public" | "private" | "protected" | null;
  decorators: Array<Decorator> | null;
  optional: boolean | null;
  override: boolean;
  returnType: TypeAnnotation | TSTypeAnnotation | Noop | null;
  typeParameters: TypeParameterDeclaration | TSTypeParameterDeclaration | Noop | null;
}

export interface ObjectPattern extends BaseNode {
  type: "ObjectPattern";
  properties: Array<RestElement | ObjectProperty>;
  decorators: Array<Decorator> | null;
  optional: boolean | null;
  typeAnnotation: TypeAnnotation | TSTypeAnnotation | Noop | null;
}

export interface SpreadElement extends BaseNode {
  type: "SpreadElement";
  argument: Expression;
}

export interface Super extends BaseNode {
  type: "Super";
}

export interface TaggedTemplateExpression extends BaseNode {
  type: "TaggedTemplateExpression";
  tag: Expression;
  quasi: TemplateLiteral;
  typeParameters: TypeParameterInstantiation | TSTypeParameterInstantiation | null;
}

export interface TemplateElement extends BaseNode {
  type: "TemplateElement";
  value: { raw: string, cooked?: string };
  tail: boolean;
}

export interface TemplateLiteral extends BaseNode {
  type: "TemplateLiteral";
  quasis: Array<TemplateElement>;
  expressions: Array<Expression | TSType>;
}

export interface YieldExpression extends BaseNode {
  type: "YieldExpression";
  argument: Expression | null;
  delegate: boolean;
}

export interface AwaitExpression extends BaseNode {
  type: "AwaitExpression";
  argument: Expression;
}

export interface Import extends BaseNode {
  type: "Import";
}

export interface BigIntLiteral extends BaseNode {
  type: "BigIntLiteral";
  value: string;
}

export interface ExportNamespaceSpecifier extends BaseNode {
  type: "ExportNamespaceSpecifier";
  exported: Identifier;
}

export interface OptionalMemberExpression extends BaseNode {
  type: "OptionalMemberExpression";
  object: Expression;
  property: Expression | Identifier;
  computed: boolean;
  optional: boolean;
}

export interface OptionalCallExpression extends BaseNode {
  type: "OptionalCallExpression";
  callee: Expression;
  arguments: Array<Expression | SpreadElement | ArgumentPlaceholder>;
  optional: boolean;
  typeArguments: TypeParameterInstantiation | null;
  typeParameters: TSTypeParameterInstantiation | null;
}

export interface ClassProperty extends BaseNode {
  type: "ClassProperty";
  key: Identifier | StringLiteral | NumericLiteral | BigIntLiteral | Expression;
  value: Expression | null;
  typeAnnotation: TypeAnnotation | TSTypeAnnotation | Noop | null;
  decorators: Array<Decorator> | null;
  computed: boolean;
  static: boolean;
  abstract: boolean | null;
  accessibility: "public" | "private" | "protected" | null;
  declare: boolean | null;
  definite: boolean | null;
  optional: boolean | null;
  override: boolean;
  readonly: boolean | null;
  variance: Variance | null;
}

export interface ClassAccessorProperty extends BaseNode {
  type: "ClassAccessorProperty";
  key: Identifier | StringLiteral | NumericLiteral | BigIntLiteral | Expression | PrivateName;
  value: Expression | null;
  typeAnnotation: TypeAnnotation | TSTypeAnnotation | Noop | null;
  decorators: Array<Decorator> | null;
  computed: boolean;
  static: boolean;
  abstract: boolean | null;
  accessibility: "public" | "private" | "protected" | null;
  declare: boolean | null;
  definite: boolean | null;
  optional: boolean | null;
  override: boolean;
  readonly: boolean | null;
  variance: Variance | null;
}

export interface ClassPrivateProperty extends BaseNode {
  type: "ClassPrivateProperty";
  key: PrivateName;
  value: Expression | null;
  decorators: Array<Decorator> | null;
  static: boolean;
  definite: boolean | null;
  readonly: boolean | null;
  typeAnnotation: TypeAnnotation | TSTypeAnnotation | Noop | null;
  variance: Variance | null;
}

export interface ClassPrivateMethod extends BaseNode {
  type: "ClassPrivateMethod";
  kind: "get" | "set" | "method";
  key: PrivateName;
  params: Array<Identifier | Pattern | RestElement | TSParameterProperty>;
  body: BlockStatement;
  static: boolean;
  abstract: boolean | null;
  access: "public" | "private" | "protected" | null;
  accessibility: "public" | "private" | "protected" | null;
  async: boolean;
  computed: boolean;
  decorators: Array<Decorator> | null;
  generator: boolean;
  optional: boolean | null;
  override: boolean;
  returnType: TypeAnnotation | TSTypeAnnotation | Noop | null;
  typeParameters: TypeParameterDeclaration | TSTypeParameterDeclaration | Noop | null;
}

export interface PrivateName extends BaseNode {
  type: "PrivateName";
  id: Identifier;
}

export interface StaticBlock extends BaseNode {
  type: "StaticBlock";
  body: Array<Statement>;
}

export interface AnyTypeAnnotation extends BaseNode {
  type: "AnyTypeAnnotation";
}

export interface ArrayTypeAnnotation extends BaseNode {
  type: "ArrayTypeAnnotation";
  elementType: FlowType;
}

export interface BooleanTypeAnnotation extends BaseNode {
  type: "BooleanTypeAnnotation";
}

export interface BooleanLiteralTypeAnnotation extends BaseNode {
  type: "BooleanLiteralTypeAnnotation";
  value: boolean;
}

export interface NullLiteralTypeAnnotation extends BaseNode {
  type: "NullLiteralTypeAnnotation";
}

export interface ClassImplements extends BaseNode {
  type: "ClassImplements";
  id: Identifier;
  typeParameters: TypeParameterInstantiation | null;
}

export interface DeclareClass extends BaseNode {
  type: "DeclareClass";
  id: Identifier;
  typeParameters: TypeParameterDeclaration | null;
  extends: Array<InterfaceExtends> | null;
  body: ObjectTypeAnnotation;
  implements: Array<ClassImplements> | null;
  mixins: Array<InterfaceExtends> | null;
}

export interface DeclareFunction extends BaseNode {
  type: "DeclareFunction";
  id: Identifier;
  predicate: DeclaredPredicate | null;
}

export interface DeclareInterface extends BaseNode {
  type: "DeclareInterface";
  id: Identifier;
  typeParameters: TypeParameterDeclaration | null;
  extends: Array<InterfaceExtends> | null;
  body: ObjectTypeAnnotation;
}

export interface DeclareModule extends BaseNode {
  type: "DeclareModule";
  id: Identifier | StringLiteral;
  body: BlockStatement;
  kind: "CommonJS" | "ES" | null;
}

export interface DeclareModuleExports extends BaseNode {
  type: "DeclareModuleExports";
  typeAnnotation: TypeAnnotation;
}

export interface DeclareTypeAlias extends BaseNode {
  type: "DeclareTypeAlias";
  id: Identifier;
  typeParameters: TypeParameterDeclaration | null;
  right: FlowType;
}

export interface DeclareOpaqueType extends BaseNode {
  type: "DeclareOpaqueType";
  id: Identifier;
  typeParameters: TypeParameterDeclaration | null;
  supertype: FlowType | null;
  impltype: FlowType | null;
}

export interface DeclareVariable extends BaseNode {
  type: "DeclareVariable";
  id: Identifier;
}

export interface DeclareExportDeclaration extends BaseNode {
  type: "DeclareExportDeclaration";
  declaration: Flow | null;
  specifiers: Array<ExportSpecifier | ExportNamespaceSpecifier> | null;
  source: StringLiteral | null;
  default: boolean | null;
}

export interface DeclareExportAllDeclaration extends BaseNode {
  type: "DeclareExportAllDeclaration";
  source: StringLiteral;
  exportKind: "type" | "value" | null;
}

export interface DeclaredPredicate extends BaseNode {
  type: "DeclaredPredicate";
  value: Flow;
}

export interface ExistsTypeAnnotation extends BaseNode {
  type: "ExistsTypeAnnotation";
}

export interface FunctionTypeAnnotation extends BaseNode {
  type: "FunctionTypeAnnotation";
  typeParameters: TypeParameterDeclaration | null;
  params: Array<FunctionTypeParam>;
  rest: FunctionTypeParam | null;
  returnType: FlowType;
  this: FunctionTypeParam | null;
}

export interface FunctionTypeParam extends BaseNode {
  type: "FunctionTypeParam";
  name: Identifier | null;
  typeAnnotation: FlowType;
  optional: boolean | null;
}

export interface GenericTypeAnnotation extends BaseNode {
  type: "GenericTypeAnnotation";
  id: Identifier | QualifiedTypeIdentifier;
  typeParameters: TypeParameterInstantiation | null;
}

export interface InferredPredicate extends BaseNode {
  type: "InferredPredicate";
}

export interface InterfaceExtends extends BaseNode {
  type: "InterfaceExtends";
  id: Identifier | QualifiedTypeIdentifier;
  typeParameters: TypeParameterInstantiation | null;
}

export interface InterfaceDeclaration extends BaseNode {
  type: "InterfaceDeclaration";
  id: Identifier;
  typeParameters: TypeParameterDeclaration | null;
  extends: Array<InterfaceExtends> | null;
  body: ObjectTypeAnnotation;
}

export interface InterfaceTypeAnnotation extends BaseNode {
  type: "InterfaceTypeAnnotation";
  extends: Array<InterfaceExtends> | null;
  body: ObjectTypeAnnotation;
}

export interface IntersectionTypeAnnotation extends BaseNode {
  type: "IntersectionTypeAnnotation";
  types: Array<FlowType>;
}

export interface MixedTypeAnnotation extends BaseNode {
  type: "MixedTypeAnnotation";
}

export interface EmptyTypeAnnotation extends BaseNode {
  type: "EmptyTypeAnnotation";
}

export interface NullableTypeAnnotation extends BaseNode {
  type: "NullableTypeAnnotation";
  typeAnnotation: FlowType;
}

export interface NumberLiteralTypeAnnotation extends BaseNode {
  type: "NumberLiteralTypeAnnotation";
  value: number;
}

export interface NumberTypeAnnotation extends BaseNode {
  type: "NumberTypeAnnotation";
}

export interface ObjectTypeAnnotation extends BaseNode {
  type: "ObjectTypeAnnotation";
  properties: Array<ObjectTypeProperty | ObjectTypeSpreadProperty>;
  indexers: Array<ObjectTypeIndexer>;
  callProperties: Array<ObjectTypeCallProperty>;
  internalSlots: Array<ObjectTypeInternalSlot>;
  exact: boolean;
  inexact: boolean | null;
}

export interface ObjectTypeInternalSlot extends BaseNode {
  type: "ObjectTypeInternalSlot";
  id: Identifier;
  value: FlowType;
  optional: boolean;
  static: boolean;
  method: boolean;
}

export interface ObjectTypeCallProperty extends BaseNode {
  type: "ObjectTypeCallProperty";
  value: FlowType;
  static: boolean;
}

export interface ObjectTypeIndexer extends BaseNode {
  type: "ObjectTypeIndexer";
  id: Identifier | null;
  key: FlowType;
  value: FlowType;
  variance: Variance | null;
  static: boolean;
}

export interface ObjectTypeProperty extends BaseNode {
  type: "ObjectTypeProperty";
  key: Identifier | StringLiteral;
  value: FlowType;
  variance: Variance | null;
  kind: "init" | "get" | "set";
  method: boolean;
  optional: boolean;
  proto: boolean;
  static: boolean;
}

export interface ObjectTypeSpreadProperty extends BaseNode {
  type: "ObjectTypeSpreadProperty";
  argument: FlowType;
}

export interface OpaqueType extends BaseNode {
  type: "OpaqueType";
  id: Identifier;
  typeParameters: TypeParameterDeclaration | null;
  supertype: FlowType | null;
  impltype: FlowType;
}

export interface QualifiedTypeIdentifier extends BaseNode {
  type: "QualifiedTypeIdentifier";
  id: Identifier;
  qualification: Identifier | QualifiedTypeIdentifier;
}

export interface StringLiteralTypeAnnotation extends BaseNode {
  type: "StringLiteralTypeAnnotation";
  value: string;
}

export interface StringTypeAnnotation extends BaseNode {
  type: "StringTypeAnnotation";
}

export interface SymbolTypeAnnotation extends BaseNode {
  type: "SymbolTypeAnnotation";
}

export interface ThisTypeAnnotation extends BaseNode {
  type: "ThisTypeAnnotation";
}

export interface TupleTypeAnnotation extends BaseNode {
  type: "TupleTypeAnnotation";
  types: Array<FlowType>;
}

export interface TypeofTypeAnnotation extends BaseNode {
  type: "TypeofTypeAnnotation";
  argument: FlowType;
}

export interface TypeAlias extends BaseNode {
  type: "TypeAlias";
  id: Identifier;
  typeParameters: TypeParameterDeclaration | null;
  right: FlowType;
}

export interface TypeAnnotation extends BaseNode {
  type: "TypeAnnotation";
  typeAnnotation: FlowType;
}

export interface TypeCastExpression extends BaseNode {
  type: "TypeCastExpression";
  expression: Expression;
  typeAnnotation: TypeAnnotation;
}

export interface TypeParameter extends BaseNode {
  type: "TypeParameter";
  bound: TypeAnnotation | null;
  default: FlowType | null;
  variance: Variance | null;
  name: string;
}

export interface TypeParameterDeclaration extends BaseNode {
  type: "TypeParameterDeclaration";
  params: Array<TypeParameter>;
}

export interface TypeParameterInstantiation extends BaseNode {
  type: "TypeParameterInstantiation";
  params: Array<FlowType>;
}

export interface UnionTypeAnnotation extends BaseNode {
  type: "UnionTypeAnnotation";
  types: Array<FlowType>;
}

export interface Variance extends BaseNode {
  type: "Variance";
  kind: "minus" | "plus";
}

export interface VoidTypeAnnotation extends BaseNode {
  type: "VoidTypeAnnotation";
}

export interface EnumDeclaration extends BaseNode {
  type: "EnumDeclaration";
  id: Identifier;
  body: EnumBooleanBody | EnumNumberBody | EnumStringBody | EnumSymbolBody;
}

export interface EnumBooleanBody extends BaseNode {
  type: "EnumBooleanBody";
  members: Array<EnumBooleanMember>;
  explicitType: boolean;
  hasUnknownMembers: boolean;
}

export interface EnumNumberBody extends BaseNode {
  type: "EnumNumberBody";
  members: Array<EnumNumberMember>;
  explicitType: boolean;
  hasUnknownMembers: boolean;
}

export interface EnumStringBody extends BaseNode {
  type: "EnumStringBody";
  members: Array<EnumStringMember | EnumDefaultedMember>;
  explicitType: boolean;
  hasUnknownMembers: boolean;
}

export interface EnumSymbolBody extends BaseNode {
  type: "EnumSymbolBody";
  members: Array<EnumDefaultedMember>;
  hasUnknownMembers: boolean;
}

export interface EnumBooleanMember extends BaseNode {
  type: "EnumBooleanMember";
  id: Identifier;
  init: BooleanLiteral;
}

export interface EnumNumberMember extends BaseNode {
  type: "EnumNumberMember";
  id: Identifier;
  init: NumericLiteral;
}

export interface EnumStringMember extends BaseNode {
  type: "EnumStringMember";
  id: Identifier;
  init: StringLiteral;
}

export interface EnumDefaultedMember extends BaseNode {
  type: "EnumDefaultedMember";
  id: Identifier;
}

export interface IndexedAccessType extends BaseNode {
  type: "IndexedAccessType";
  objectType: FlowType;
  indexType: FlowType;
}

export interface OptionalIndexedAccessType extends BaseNode {
  type: "OptionalIndexedAccessType";
  objectType: FlowType;
  indexType: FlowType;
  optional: boolean;
}

export interface JSXAttribute extends BaseNode {
  type: "JSXAttribute";
  name: JSXIdentifier | JSXNamespacedName;
  value: JSXElement | JSXFragment | StringLiteral | JSXExpressionContainer | null;
}

export interface JSXClosingElement extends BaseNode {
  type: "JSXClosingElement";
  name: JSXIdentifier | JSXMemberExpression | JSXNamespacedName;
}

export interface JSXElement extends BaseNode {
  type: "JSXElement";
  openingElement: JSXOpeningElement;
  closingElement: JSXClosingElement | null;
  children: Array<JSXText | JSXExpressionContainer | JSXSpreadChild | JSXElement | JSXFragment>;
  selfClosing: boolean | null;
}

export interface JSXEmptyExpression extends BaseNode {
  type: "JSXEmptyExpression";
}

export interface JSXExpressionContainer extends BaseNode {
  type: "JSXExpressionContainer";
  expression: Expression | JSXEmptyExpression;
}

export interface JSXSpreadChild extends BaseNode {
  type: "JSXSpreadChild";
  expression: Expression;
}

export interface JSXIdentifier extends BaseNode {
  type: "JSXIdentifier";
  name: string;
}

export interface JSXMemberExpression extends BaseNode {
  type: "JSXMemberExpression";
  object: JSXMemberExpression | JSXIdentifier;
  property: JSXIdentifier;
}

export interface JSXNamespacedName extends BaseNode {
  type: "JSXNamespacedName";
  namespace: JSXIdentifier;
  name: JSXIdentifier;
}

export interface JSXOpeningElement extends BaseNode {
  type: "JSXOpeningElement";
  name: JSXIdentifier | JSXMemberExpression | JSXNamespacedName;
  attributes: Array<JSXAttribute | JSXSpreadAttribute>;
  selfClosing: boolean;
  typeParameters: TypeParameterInstantiation | TSTypeParameterInstantiation | null;
}

export interface JSXSpreadAttribute extends BaseNode {
  type: "JSXSpreadAttribute";
  argument: Expression;
}

export interface JSXText extends BaseNode {
  type: "JSXText";
  value: string;
}

export interface JSXFragment extends BaseNode {
  type: "JSXFragment";
  openingFragment: JSXOpeningFragment;
  closingFragment: JSXClosingFragment;
  children: Array<JSXText | JSXExpressionContainer | JSXSpreadChild | JSXElement | JSXFragment>;
}

export interface JSXOpeningFragment extends BaseNode {
  type: "JSXOpeningFragment";
}

export interface JSXClosingFragment extends BaseNode {
  type: "JSXClosingFragment";
}

export interface Noop extends BaseNode {
  type: "Noop";
}

export interface Placeholder extends BaseNode {
  type: "Placeholder";
  expectedNode: "Identifier" | "StringLiteral" | "Expression" | "Statement" | "Declaration" | "BlockStatement" | "ClassBody" | "Pattern";
  name: Identifier;
}

export interface V8IntrinsicIdentifier extends BaseNode {
  type: "V8IntrinsicIdentifier";
  name: string;
}

export interface ArgumentPlaceholder extends BaseNode {
  type: "ArgumentPlaceholder";
}

export interface BindExpression extends BaseNode {
  type: "BindExpression";
  object: Expression;
  callee: Expression;
}

export interface ImportAttribute extends BaseNode {
  type: "ImportAttribute";
  key: Identifier | StringLiteral;
  value: StringLiteral;
}

export interface Decorator extends BaseNode {
  type: "Decorator";
  expression: Expression;
}

export interface DoExpression extends BaseNode {
  type: "DoExpression";
  body: BlockStatement;
  async: boolean;
}

export interface ExportDefaultSpecifier extends BaseNode {
  type: "ExportDefaultSpecifier";
  exported: Identifier;
}

export interface RecordExpression extends BaseNode {
  type: "RecordExpression";
  properties: Array<ObjectProperty | SpreadElement>;
}

export interface TupleExpression extends BaseNode {
  type: "TupleExpression";
  elements: Array<Expression | SpreadElement>;
}

export interface DecimalLiteral extends BaseNode {
  type: "DecimalLiteral";
  value: string;
}

export interface ModuleExpression extends BaseNode {
  type: "ModuleExpression";
  body: Program;
}

export interface TopicReference extends BaseNode {
  type: "TopicReference";
}

export interface PipelineTopicExpression extends BaseNode {
  type: "PipelineTopicExpression";
  expression: Expression;
}

export interface PipelineBareFunction extends BaseNode {
  type: "PipelineBareFunction";
  callee: Expression;
}

export interface PipelinePrimaryTopicReference extends BaseNode {
  type: "PipelinePrimaryTopicReference";
}

export interface TSParameterProperty extends BaseNode {
  type: "TSParameterProperty";
  parameter: Identifier | AssignmentPattern;
  accessibility: "public" | "private" | "protected" | null;
  decorators: Array<Decorator> | null;
  override: boolean | null;
  readonly: boolean | null;
}

export interface TSDeclareFunction extends BaseNode {
  type: "TSDeclareFunction";
  id: Identifier | null;
  typeParameters: TSTypeParameterDeclaration | Noop | null;
  params: Array<Identifier | Pattern | RestElement>;
  returnType: TSTypeAnnotation | Noop | null;
  async: boolean;
  declare: boolean | null;
  generator: boolean;
}

export interface TSDeclareMethod extends BaseNode {
  type: "TSDeclareMethod";
  decorators: Array<Decorator> | null;
  key: Identifier | StringLiteral | NumericLiteral | BigIntLiteral | Expression;
  typeParameters: TSTypeParameterDeclaration | Noop | null;
  params: Array<Identifier | Pattern | RestElement | TSParameterProperty>;
  returnType: TSTypeAnnotation | Noop | null;
  abstract: boolean | null;
  access: "public" | "private" | "protected" | null;
  accessibility: "public" | "private" | "protected" | null;
  async: boolean;
  computed: boolean;
  generator: boolean;
  kind: "get" | "set" | "method" | "constructor";
  optional: boolean | null;
  override: boolean;
  static: boolean;
}

export interface TSQualifiedName extends BaseNode {
  type: "TSQualifiedName";
  left: TSEntityName;
  right: Identifier;
}

export interface TSCallSignatureDeclaration extends BaseNode {
  type: "TSCallSignatureDeclaration";
  typeParameters: TSTypeParameterDeclaration | null;
  parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>;
  typeAnnotation: TSTypeAnnotation | null;
}

export interface TSConstructSignatureDeclaration extends BaseNode {
  type: "TSConstructSignatureDeclaration";
  typeParameters: TSTypeParameterDeclaration | null;
  parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>;
  typeAnnotation: TSTypeAnnotation | null;
}

export interface TSPropertySignature extends BaseNode {
  type: "TSPropertySignature";
  key: Expression;
  typeAnnotation: TSTypeAnnotation | null;
  computed: boolean;
  kind: "get" | "set";
  optional: boolean | null;
  readonly: boolean | null;
}

export interface TSMethodSignature extends BaseNode {
  type: "TSMethodSignature";
  key: Expression;
  typeParameters: TSTypeParameterDeclaration | null;
  parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>;
  typeAnnotation: TSTypeAnnotation | null;
  computed: boolean;
  kind: "method" | "get" | "set";
  optional: boolean | null;
}

export interface TSIndexSignature extends BaseNode {
  type: "TSIndexSignature";
  parameters: Array<Identifier>;
  typeAnnotation: TSTypeAnnotation | null;
  readonly: boolean | null;
  static: boolean | null;
}

export interface TSAnyKeyword extends BaseNode {
  type: "TSAnyKeyword";
}

export interface TSBooleanKeyword extends BaseNode {
  type: "TSBooleanKeyword";
}

export interface TSBigIntKeyword extends BaseNode {
  type: "TSBigIntKeyword";
}

export interface TSIntrinsicKeyword extends BaseNode {
  type: "TSIntrinsicKeyword";
}

export interface TSNeverKeyword extends BaseNode {
  type: "TSNeverKeyword";
}

export interface TSNullKeyword extends BaseNode {
  type: "TSNullKeyword";
}

export interface TSNumberKeyword extends BaseNode {
  type: "TSNumberKeyword";
}

export interface TSObjectKeyword extends BaseNode {
  type: "TSObjectKeyword";
}

export interface TSStringKeyword extends BaseNode {
  type: "TSStringKeyword";
}

export interface TSSymbolKeyword extends BaseNode {
  type: "TSSymbolKeyword";
}

export interface TSUndefinedKeyword extends BaseNode {
  type: "TSUndefinedKeyword";
}

export interface TSUnknownKeyword extends BaseNode {
  type: "TSUnknownKeyword";
}

export interface TSVoidKeyword extends BaseNode {
  type: "TSVoidKeyword";
}

export interface TSThisType extends BaseNode {
  type: "TSThisType";
}

export interface TSFunctionType extends BaseNode {
  type: "TSFunctionType";
  typeParameters: TSTypeParameterDeclaration | null;
  parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>;
  typeAnnotation: TSTypeAnnotation | null;
}

export interface TSConstructorType extends BaseNode {
  type: "TSConstructorType";
  typeParameters: TSTypeParameterDeclaration | null;
  parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>;
  typeAnnotation: TSTypeAnnotation | null;
  abstract: boolean | null;
}

export interface TSTypeReference extends BaseNode {
  type: "TSTypeReference";
  typeName: TSEntityName;
  typeParameters: TSTypeParameterInstantiation | null;
}

export interface TSTypePredicate extends BaseNode {
  type: "TSTypePredicate";
  parameterName: Identifier | TSThisType;
  typeAnnotation: TSTypeAnnotation | null;
  asserts: boolean | null;
}

export interface TSTypeQuery extends BaseNode {
  type: "TSTypeQuery";
  exprName: TSEntityName | TSImportType;
  typeParameters: TSTypeParameterInstantiation | null;
}

export interface TSTypeLiteral extends BaseNode {
  type: "TSTypeLiteral";
  members: Array<TSTypeElement>;
}

export interface TSArrayType extends BaseNode {
  type: "TSArrayType";
  elementType: TSType;
}

export interface TSTupleType extends BaseNode {
  type: "TSTupleType";
  elementTypes: Array<TSType | TSNamedTupleMember>;
}

export interface TSOptionalType extends BaseNode {
  type: "TSOptionalType";
  typeAnnotation: TSType;
}

export interface TSRestType extends BaseNode {
  type: "TSRestType";
  typeAnnotation: TSType;
}

export interface TSNamedTupleMember extends BaseNode {
  type: "TSNamedTupleMember";
  label: Identifier;
  elementType: TSType;
  optional: boolean;
}

export interface TSUnionType extends BaseNode {
  type: "TSUnionType";
  types: Array<TSType>;
}

export interface TSIntersectionType extends BaseNode {
  type: "TSIntersectionType";
  types: Array<TSType>;
}

export interface TSConditionalType extends BaseNode {
  type: "TSConditionalType";
  checkType: TSType;
  extendsType: TSType;
  trueType: TSType;
  falseType: TSType;
}

export interface TSInferType extends BaseNode {
  type: "TSInferType";
  typeParameter: TSTypeParameter;
}

export interface TSParenthesizedType extends BaseNode {
  type: "TSParenthesizedType";
  typeAnnotation: TSType;
}

export interface TSTypeOperator extends BaseNode {
  type: "TSTypeOperator";
  typeAnnotation: TSType;
  operator: string;
}

export interface TSIndexedAccessType extends BaseNode {
  type: "TSIndexedAccessType";
  objectType: TSType;
  indexType: TSType;
}

export interface TSMappedType extends BaseNode {
  type: "TSMappedType";
  typeParameter: TSTypeParameter;
  typeAnnotation: TSType | null;
  nameType: TSType | null;
  optional: true | false | "+" | "-" | null;
  readonly: true | false | "+" | "-" | null;
}

export interface TSLiteralType extends BaseNode {
  type: "TSLiteralType";
  literal: NumericLiteral | StringLiteral | BooleanLiteral | BigIntLiteral | TemplateLiteral | UnaryExpression;
}

export interface TSExpressionWithTypeArguments extends BaseNode {
  type: "TSExpressionWithTypeArguments";
  expression: TSEntityName;
  typeParameters: TSTypeParameterInstantiation | null;
}

export interface TSInterfaceDeclaration extends BaseNode {
  type: "TSInterfaceDeclaration";
  id: Identifier;
  typeParameters: TSTypeParameterDeclaration | null;
  extends: Array<TSExpressionWithTypeArguments> | null;
  body: TSInterfaceBody;
  declare: boolean | null;
}

export interface TSInterfaceBody extends BaseNode {
  type: "TSInterfaceBody";
  body: Array<TSTypeElement>;
}

export interface TSTypeAliasDeclaration extends BaseNode {
  type: "TSTypeAliasDeclaration";
  id: Identifier;
  typeParameters: TSTypeParameterDeclaration | null;
  typeAnnotation: TSType;
  declare: boolean | null;
}

export interface TSInstantiationExpression extends BaseNode {
  type: "TSInstantiationExpression";
  expression: Expression;
  typeParameters: TSTypeParameterInstantiation | null;
}

export interface TSAsExpression extends BaseNode {
  type: "TSAsExpression";
  expression: Expression;
  typeAnnotation: TSType;
}

export interface TSSatisfiesExpression extends BaseNode {
  type: "TSSatisfiesExpression";
  expression: Expression;
  typeAnnotation: TSType;
}

export interface TSTypeAssertion extends BaseNode {
  type: "TSTypeAssertion";
  typeAnnotation: TSType;
  expression: Expression;
}

export interface TSEnumDeclaration extends BaseNode {
  type: "TSEnumDeclaration";
  id: Identifier;
  members: Array<TSEnumMember>;
  const: boolean | null;
  declare: boolean | null;
  initializer: Expression | null;
}

export interface TSEnumMember extends BaseNode {
  type: "TSEnumMember";
  id: Identifier | StringLiteral;
  initializer: Expression | null;
}

export interface TSModuleDeclaration extends BaseNode {
  type: "TSModuleDeclaration";
  id: Identifier | StringLiteral;
  body: TSModuleBlock | TSModuleDeclaration;
  declare: boolean | null;
  global: boolean | null;
}

export interface TSModuleBlock extends BaseNode {
  type: "TSModuleBlock";
  body: Array<Statement>;
}

export interface TSImportType extends BaseNode {
  type: "TSImportType";
  argument: StringLiteral;
  qualifier: TSEntityName | null;
  typeParameters: TSTypeParameterInstantiation | null;
  options: Expression | null;
}

export interface TSImportEqualsDeclaration extends BaseNode {
  type: "TSImportEqualsDeclaration";
  id: Identifier;
  moduleReference: TSEntityName | TSExternalModuleReference;
  importKind: "type" | "value" | null;
  isExport: boolean;
}

export interface TSExternalModuleReference extends BaseNode {
  type: "TSExternalModuleReference";
  expression: StringLiteral;
}

export interface TSNonNullExpression extends BaseNode {
  type: "TSNonNullExpression";
  expression: Expression;
}

export interface TSExportAssignment extends BaseNode {
  type: "TSExportAssignment";
  expression: Expression;
}

export interface TSNamespaceExportDeclaration extends BaseNode {
  type: "TSNamespaceExportDeclaration";
  id: Identifier;
}

export interface TSTypeAnnotation extends BaseNode {
  type: "TSTypeAnnotation";
  typeAnnotation: TSType;
}

export interface TSTypeParameterInstantiation extends BaseNode {
  type: "TSTypeParameterInstantiation";
  params: Array<TSType>;
}

export interface TSTypeParameterDeclaration extends BaseNode {
  type: "TSTypeParameterDeclaration";
  params: Array<TSTypeParameter>;
}

export interface TSTypeParameter extends BaseNode {
  type: "TSTypeParameter";
  constraint: TSType | null;
  default: TSType | null;
  name: string;
  const: boolean | null;
  in: boolean | null;
  out: boolean | null;
}

/**
 * @deprecated Use `NumericLiteral`
 */
export type NumberLiteral = NumericLiteral;

/**
 * @deprecated Use `RegExpLiteral`
 */
export type RegexLiteral = RegExpLiteral;

/**
 * @deprecated Use `RestElement`
 */
export type RestProperty = RestElement;

/**
 * @deprecated Use `SpreadElement`
 */
export type SpreadProperty = SpreadElement;

export type Standardized = ArrayExpression | AssignmentExpression | BinaryExpression | InterpreterDirective | Directive | DirectiveLiteral | BlockStatement | BreakStatement | CallExpression | CatchClause | ConditionalExpression | ContinueStatement | DebuggerStatement | DoWhileStatement | EmptyStatement | ExpressionStatement | File | ForInStatement | ForStatement | FunctionDeclaration | FunctionExpression | Identifier | IfStatement | LabeledStatement | StringLiteral | NumericLiteral | NullLiteral | BooleanLiteral | RegExpLiteral | LogicalExpression | MemberExpression | NewExpression | Program | ObjectExpression | ObjectMethod | ObjectProperty | RestElement | ReturnStatement | SequenceExpression | ParenthesizedExpression | SwitchCase | SwitchStatement | ThisExpression | ThrowStatement | TryStatement | UnaryExpression | UpdateExpression | VariableDeclaration | VariableDeclarator | WhileStatement | WithStatement | AssignmentPattern | ArrayPattern | ArrowFunctionExpression | ClassBody | ClassExpression | ClassDeclaration | ExportAllDeclaration | ExportDefaultDeclaration | ExportNamedDeclaration | ExportSpecifier | ForOfStatement | ImportDeclaration | ImportDefaultSpecifier | ImportNamespaceSpecifier | ImportSpecifier | ImportExpression | MetaProperty | ClassMethod | ObjectPattern | SpreadElement | Super | TaggedTemplateExpression | TemplateElement | TemplateLiteral | YieldExpression | AwaitExpression | Import | BigIntLiteral | ExportNamespaceSpecifier | OptionalMemberExpression | OptionalCallExpression | ClassProperty | ClassAccessorProperty | ClassPrivateProperty | ClassPrivateMethod | PrivateName | StaticBlock;
export type Expression = ArrayExpression | AssignmentExpression | BinaryExpression | CallExpression | ConditionalExpression | FunctionExpression | Identifier | StringLiteral | NumericLiteral | NullLiteral | BooleanLiteral | RegExpLiteral | LogicalExpression | MemberExpression | NewExpression | ObjectExpression | SequenceExpression | ParenthesizedExpression | ThisExpression | UnaryExpression | UpdateExpression | ArrowFunctionExpression | ClassExpression | ImportExpression | MetaProperty | Super | TaggedTemplateExpression | TemplateLiteral | YieldExpression | AwaitExpression | Import | BigIntLiteral | OptionalMemberExpression | OptionalCallExpression | TypeCastExpression | JSXElement | JSXFragment | BindExpression | DoExpression | RecordExpression | TupleExpression | DecimalLiteral | ModuleExpression | TopicReference | PipelineTopicExpression | PipelineBareFunction | PipelinePrimaryTopicReference | TSInstantiationExpression | TSAsExpression | TSSatisfiesExpression | TSTypeAssertion | TSNonNullExpression;
export type Binary = BinaryExpression | LogicalExpression;
export type Scopable = BlockStatement | CatchClause | DoWhileStatement | ForInStatement | ForStatement | FunctionDeclaration | FunctionExpression | Program | ObjectMethod | SwitchStatement | WhileStatement | ArrowFunctionExpression | ClassExpression | ClassDeclaration | ForOfStatement | ClassMethod | ClassPrivateMethod | StaticBlock | TSModuleBlock;
export type BlockParent = BlockStatement | CatchClause | DoWhileStatement | ForInStatement | ForStatement | FunctionDeclaration | FunctionExpression | Program | ObjectMethod | SwitchStatement | WhileStatement | ArrowFunctionExpression | ForOfStatement | ClassMethod | ClassPrivateMethod | StaticBlock | TSModuleBlock;
export type Block = BlockStatement | Program | TSModuleBlock;
export type Statement = BlockStatement | BreakStatement | ContinueStatement | DebuggerStatement | DoWhileStatement | EmptyStatement | ExpressionStatement | ForInStatement | ForStatement | FunctionDeclaration | IfStatement | LabeledStatement | ReturnStatement | SwitchStatement | ThrowStatement | TryStatement | VariableDeclaration | WhileStatement | WithStatement | ClassDeclaration | ExportAllDeclaration | ExportDefaultDeclaration | ExportNamedDeclaration | ForOfStatement | ImportDeclaration | DeclareClass | DeclareFunction | DeclareInterface | DeclareModule | DeclareModuleExports | DeclareTypeAlias | DeclareOpaqueType | DeclareVariable | DeclareExportDeclaration | DeclareExportAllDeclaration | InterfaceDeclaration | OpaqueType | TypeAlias | EnumDeclaration | TSDeclareFunction | TSInterfaceDeclaration | TSTypeAliasDeclaration | TSEnumDeclaration | TSModuleDeclaration | TSImportEqualsDeclaration | TSExportAssignment | TSNamespaceExportDeclaration;
export type Terminatorless = BreakStatement | ContinueStatement | ReturnStatement | ThrowStatement | YieldExpression | AwaitExpression;
export type CompletionStatement = BreakStatement | ContinueStatement | ReturnStatement | ThrowStatement;
export type Conditional = ConditionalExpression | IfStatement;
export type Loop = DoWhileStatement | ForInStatement | ForStatement | WhileStatement | ForOfStatement;
export type While = DoWhileStatement | WhileStatement;
export type ExpressionWrapper = ExpressionStatement | ParenthesizedExpression | TypeCastExpression;
export type For = ForInStatement | ForStatement | ForOfStatement;
export type ForXStatement = ForInStatement | ForOfStatement;
export type Function = FunctionDeclaration | FunctionExpression | ObjectMethod | ArrowFunctionExpression | ClassMethod | ClassPrivateMethod;
export type FunctionParent = FunctionDeclaration | FunctionExpression | ObjectMethod | ArrowFunctionExpression | ClassMethod | ClassPrivateMethod | StaticBlock | TSModuleBlock;
export type Pureish = FunctionDeclaration | FunctionExpression | StringLiteral | NumericLiteral | NullLiteral | BooleanLiteral | RegExpLiteral | ArrowFunctionExpression | BigIntLiteral | DecimalLiteral;
export type Declaration = FunctionDeclaration | VariableDeclaration | ClassDeclaration | ExportAllDeclaration | ExportDefaultDeclaration | ExportNamedDeclaration | ImportDeclaration | DeclareClass | DeclareFunction | DeclareInterface | DeclareModule | DeclareModuleExports | DeclareTypeAlias | DeclareOpaqueType | DeclareVariable | DeclareExportDeclaration | DeclareExportAllDeclaration | InterfaceDeclaration | OpaqueType | TypeAlias | EnumDeclaration | TSDeclareFunction | TSInterfaceDeclaration | TSTypeAliasDeclaration | TSEnumDeclaration | TSModuleDeclaration;
export type PatternLike = Identifier | RestElement | AssignmentPattern | ArrayPattern | ObjectPattern | TSAsExpression | TSSatisfiesExpression | TSTypeAssertion | TSNonNullExpression;
export type LVal = Identifier | MemberExpression | RestElement | AssignmentPattern | ArrayPattern | ObjectPattern | TSParameterProperty | TSAsExpression | TSSatisfiesExpression | TSTypeAssertion | TSNonNullExpression;
export type TSEntityName = Identifier | TSQualifiedName;
export type Literal = StringLiteral | NumericLiteral | NullLiteral | BooleanLiteral | RegExpLiteral | TemplateLiteral | BigIntLiteral | DecimalLiteral;
export type Immutable = StringLiteral | NumericLiteral | NullLiteral | BooleanLiteral | BigIntLiteral | JSXAttribute | JSXClosingElement | JSXElement | JSXExpressionContainer | JSXSpreadChild | JSXOpeningElement | JSXText | JSXFragment | JSXOpeningFragment | JSXClosingFragment | DecimalLiteral;
export type UserWhitespacable = ObjectMethod | ObjectProperty | ObjectTypeInternalSlot | ObjectTypeCallProperty | ObjectTypeIndexer | ObjectTypeProperty | ObjectTypeSpreadProperty;
export type Method = ObjectMethod | ClassMethod | ClassPrivateMethod;
export type ObjectMember = ObjectMethod | ObjectProperty;
export type Property = ObjectProperty | ClassProperty | ClassAccessorProperty | ClassPrivateProperty;
export type UnaryLike = UnaryExpression | SpreadElement;
export type Pattern = AssignmentPattern | ArrayPattern | ObjectPattern;
export type Class = ClassExpression | ClassDeclaration;
export type ImportOrExportDeclaration = ExportAllDeclaration | ExportDefaultDeclaration | ExportNamedDeclaration | ImportDeclaration;
export type ExportDeclaration = ExportAllDeclaration | ExportDefaultDeclaration | ExportNamedDeclaration;
export type ModuleSpecifier = ExportSpecifier | ImportDefaultSpecifier | ImportNamespaceSpecifier | ImportSpecifier | ExportNamespaceSpecifier | ExportDefaultSpecifier;
export type Accessor = ClassAccessorProperty;
export type Private = ClassPrivateProperty | ClassPrivateMethod | PrivateName;
export type Flow = AnyTypeAnnotation | ArrayTypeAnnotation | BooleanTypeAnnotation | BooleanLiteralTypeAnnotation | NullLiteralTypeAnnotation | ClassImplements | DeclareClass | DeclareFunction | DeclareInterface | DeclareModule | DeclareModuleExports | DeclareTypeAlias | DeclareOpaqueType | DeclareVariable | DeclareExportDeclaration | DeclareExportAllDeclaration | DeclaredPredicate | ExistsTypeAnnotation | FunctionTypeAnnotation | FunctionTypeParam | GenericTypeAnnotation | InferredPredicate | InterfaceExtends | InterfaceDeclaration | InterfaceTypeAnnotation | IntersectionTypeAnnotation | MixedTypeAnnotation | EmptyTypeAnnotation | NullableTypeAnnotation | NumberLiteralTypeAnnotation | NumberTypeAnnotation | ObjectTypeAnnotation | ObjectTypeInternalSlot | ObjectTypeCallProperty | ObjectTypeIndexer | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | QualifiedTypeIdentifier | StringLiteralTypeAnnotation | StringTypeAnnotation | SymbolTypeAnnotation | ThisTypeAnnotation | TupleTypeAnnotation | TypeofTypeAnnotation | TypeAlias | TypeAnnotation | TypeCastExpression | TypeParameter | TypeParameterDeclaration | TypeParameterInstantiation | UnionTypeAnnotation | Variance | VoidTypeAnnotation | EnumDeclaration | EnumBooleanBody | EnumNumberBody | EnumStringBody | EnumSymbolBody | EnumBooleanMember | EnumNumberMember | EnumStringMember | EnumDefaultedMember | IndexedAccessType | OptionalIndexedAccessType;
export type FlowType = AnyTypeAnnotation | ArrayTypeAnnotation | BooleanTypeAnnotation | BooleanLiteralTypeAnnotation | NullLiteralTypeAnnotation | ExistsTypeAnnotation | FunctionTypeAnnotation | GenericTypeAnnotation | InterfaceTypeAnnotation | IntersectionTypeAnnotation | MixedTypeAnnotation | EmptyTypeAnnotation | NullableTypeAnnotation | NumberLiteralTypeAnnotation | NumberTypeAnnotation | ObjectTypeAnnotation | StringLiteralTypeAnnotation | StringTypeAnnotation | SymbolTypeAnnotation | ThisTypeAnnotation | TupleTypeAnnotation | TypeofTypeAnnotation | UnionTypeAnnotation | VoidTypeAnnotation | IndexedAccessType | OptionalIndexedAccessType;
export type FlowBaseAnnotation = AnyTypeAnnotation | BooleanTypeAnnotation | NullLiteralTypeAnnotation | MixedTypeAnnotation | EmptyTypeAnnotation | NumberTypeAnnotation | StringTypeAnnotation | SymbolTypeAnnotation | ThisTypeAnnotation | VoidTypeAnnotation;
export type FlowDeclaration = DeclareClass | DeclareFunction | DeclareInterface | DeclareModule | DeclareModuleExports | DeclareTypeAlias | DeclareOpaqueType | DeclareVariable | DeclareExportDeclaration | DeclareExportAllDeclaration | InterfaceDeclaration | OpaqueType | TypeAlias;
export type FlowPredicate = DeclaredPredicate | InferredPredicate;
export type EnumBody = EnumBooleanBody | EnumNumberBody | EnumStringBody | EnumSymbolBody;
export type EnumMember = EnumBooleanMember | EnumNumberMember | EnumStringMember | EnumDefaultedMember;
export type JSX = JSXAttribute | JSXClosingElement | JSXElement | JSXEmptyExpression | JSXExpressionContainer | JSXSpreadChild | JSXIdentifier | JSXMemberExpression | JSXNamespacedName | JSXOpeningElement | JSXSpreadAttribute | JSXText | JSXFragment | JSXOpeningFragment | JSXClosingFragment;
export type Miscellaneous = Noop | Placeholder | V8IntrinsicIdentifier;
export type TypeScript = TSParameterProperty | TSDeclareFunction | TSDeclareMethod | TSQualifiedName | TSCallSignatureDeclaration | TSConstructSignatureDeclaration | TSPropertySignature | TSMethodSignature | TSIndexSignature | TSAnyKeyword | TSBooleanKeyword | TSBigIntKeyword | TSIntrinsicKeyword | TSNeverKeyword | TSNullKeyword | TSNumberKeyword | TSObjectKeyword | TSStringKeyword | TSSymbolKeyword | TSUndefinedKeyword | TSUnknownKeyword | TSVoidKeyword | TSThisType | TSFunctionType | TSConstructorType | TSTypeReference | TSTypePredicate | TSTypeQuery | TSTypeLiteral | TSArrayType | TSTupleType | TSOptionalType | TSRestType | TSNamedTupleMember | TSUnionType | TSIntersectionType | TSConditionalType | TSInferType | TSParenthesizedType | TSTypeOperator | TSIndexedAccessType | TSMappedType | TSLiteralType | TSExpressionWithTypeArguments | TSInterfaceDeclaration | TSInterfaceBody | TSTypeAliasDeclaration | TSInstantiationExpression | TSAsExpression | TSSatisfiesExpression | TSTypeAssertion | TSEnumDeclaration | TSEnumMember | TSModuleDeclaration | TSModuleBlock | TSImportType | TSImportEqualsDeclaration | TSExternalModuleReference | TSNonNullExpression | TSExportAssignment | TSNamespaceExportDeclaration | TSTypeAnnotation | TSTypeParameterInstantiation | TSTypeParameterDeclaration | TSTypeParameter;
export type TSTypeElement = TSCallSignatureDeclaration | TSConstructSignatureDeclaration | TSPropertySignature | TSMethodSignature | TSIndexSignature;
export type TSType = TSAnyKeyword | TSBooleanKeyword | TSBigIntKeyword | TSIntrinsicKeyword | TSNeverKeyword | TSNullKeyword | TSNumberKeyword | TSObjectKeyword | TSStringKeyword | TSSymbolKeyword | TSUndefinedKeyword | TSUnknownKeyword | TSVoidKeyword | TSThisType | TSFunctionType | TSConstructorType | TSTypeReference | TSTypePredicate | TSTypeQuery | TSTypeLiteral | TSArrayType | TSTupleType | TSOptionalType | TSRestType | TSUnionType | TSIntersectionType | TSConditionalType | TSInferType | TSParenthesizedType | TSTypeOperator | TSIndexedAccessType | TSMappedType | TSLiteralType | TSExpressionWithTypeArguments | TSImportType;
export type TSBaseType = TSAnyKeyword | TSBooleanKeyword | TSBigIntKeyword | TSIntrinsicKeyword | TSNeverKeyword | TSNullKeyword | TSNumberKeyword | TSObjectKeyword | TSStringKeyword | TSSymbolKeyword | TSUndefinedKeyword | TSUnknownKeyword | TSVoidKeyword | TSThisType | TSLiteralType;
export type ModuleDeclaration = ExportAllDeclaration | ExportDefaultDeclaration | ExportNamedDeclaration | ImportDeclaration;

export interface Aliases {
  Standardized: Standardized;
  Expression: Expression;
  Binary: Binary;
  Scopable: Scopable;
  BlockParent: BlockParent;
  Block: Block;
  Statement: Statement;
  Terminatorless: Terminatorless;
  CompletionStatement: CompletionStatement;
  Conditional: Conditional;
  Loop: Loop;
  While: While;
  ExpressionWrapper: ExpressionWrapper;
  For: For;
  ForXStatement: ForXStatement;
  Function: Function;
  FunctionParent: FunctionParent;
  Pureish: Pureish;
  Declaration: Declaration;
  PatternLike: PatternLike;
  LVal: LVal;
  TSEntityName: TSEntityName;
  Literal: Literal;
  Immutable: Immutable;
  UserWhitespacable: UserWhitespacable;
  Method: Method;
  ObjectMember: ObjectMember;
  Property: Property;
  UnaryLike: UnaryLike;
  Pattern: Pattern;
  Class: Class;
  ImportOrExportDeclaration: ImportOrExportDeclaration;
  ExportDeclaration: ExportDeclaration;
  ModuleSpecifier: ModuleSpecifier;
  Accessor: Accessor;
  Private: Private;
  Flow: Flow;
  FlowType: FlowType;
  FlowBaseAnnotation: FlowBaseAnnotation;
  FlowDeclaration: FlowDeclaration;
  FlowPredicate: FlowPredicate;
  EnumBody: EnumBody;
  EnumMember: EnumMember;
  JSX: JSX;
  Miscellaneous: Miscellaneous;
  TypeScript: TypeScript;
  TSTypeElement: TSTypeElement;
  TSType: TSType;
  TSBaseType: TSBaseType;
  ModuleDeclaration: ModuleDeclaration;
}

export function arrayExpression(elements?: Array<null | Expression | SpreadElement>): ArrayExpression;
export function assignmentExpression(operator: string, left: LVal | OptionalMemberExpression, right: Expression): AssignmentExpression;
export function binaryExpression(operator: "+" | "-" | "/" | "%" | "*" | "**" | "&" | "|" | ">>" | ">>>" | "<<" | "^" | "==" | "===" | "!=" | "!==" | "in" | "instanceof" | ">" | "<" | ">=" | "<=" | "|>", left: Expression | PrivateName, right: Expression): BinaryExpression;
export function interpreterDirective(value: string): InterpreterDirective;
export function directive(value: DirectiveLiteral): Directive;
export function directiveLiteral(value: string): DirectiveLiteral;
export function blockStatement(body: Array<Statement>, directives?: Array<Directive>): BlockStatement;
export function breakStatement(label?: Identifier | null): BreakStatement;
export function callExpression(callee: Expression | Super | V8IntrinsicIdentifier, _arguments: Array<Expression | SpreadElement | ArgumentPlaceholder>): CallExpression;
export function catchClause(param: Identifier | ArrayPattern | ObjectPattern | null | undefined, body: BlockStatement): CatchClause;
export function conditionalExpression(test: Expression, consequent: Expression, alternate: Expression): ConditionalExpression;
export function continueStatement(label?: Identifier | null): ContinueStatement;
export function debuggerStatement(): DebuggerStatement;
export function doWhileStatement(test: Expression, body: Statement): DoWhileStatement;
export function emptyStatement(): EmptyStatement;
export function expressionStatement(expression: Expression): ExpressionStatement;
export function file(program: Program, comments?: Array<CommentBlock | CommentLine> | null, tokens?: Array<any> | null): File;
export function forInStatement(left: VariableDeclaration | LVal, right: Expression, body: Statement): ForInStatement;
export function forStatement(init: VariableDeclaration | Expression | null | undefined, test: Expression | null | undefined, update: Expression | null | undefined, body: Statement): ForStatement;
export function functionDeclaration(id: Identifier | null | undefined, params: Array<Identifier | Pattern | RestElement>, body: BlockStatement, generator?: boolean, async?: boolean): FunctionDeclaration;
export function functionExpression(id: Identifier | null | undefined, params: Array<Identifier | Pattern | RestElement>, body: BlockStatement, generator?: boolean, async?: boolean): FunctionExpression;
export function identifier(name: string): Identifier;
export function ifStatement(test: Expression, consequent: Statement, alternate?: Statement | null): IfStatement;
export function labeledStatement(label: Identifier, body: Statement): LabeledStatement;
export function stringLiteral(value: string): StringLiteral;
export function numericLiteral(value: number): NumericLiteral;
export function nullLiteral(): NullLiteral;
export function booleanLiteral(value: boolean): BooleanLiteral;
export function regExpLiteral(pattern: string, flags?: string): RegExpLiteral;
export function logicalExpression(operator: "||" | "&&" | "??", left: Expression, right: Expression): LogicalExpression;
export function memberExpression(object: Expression | Super, property: Expression | Identifier | PrivateName, computed?: boolean, optional?: boolean | null): MemberExpression;
export function newExpression(callee: Expression | Super | V8IntrinsicIdentifier, _arguments: Array<Expression | SpreadElement | ArgumentPlaceholder>): NewExpression;
export function program(body: Array<Statement>, directives?: Array<Directive>, sourceType?: "script" | "module", interpreter?: InterpreterDirective | null): Program;
export function objectExpression(properties: Array<ObjectMethod | ObjectProperty | SpreadElement>): ObjectExpression;
export function objectMethod(kind: "method" | "get" | "set" | undefined, key: Expression | Identifier | StringLiteral | NumericLiteral | BigIntLiteral, params: Array<Identifier | Pattern | RestElement>, body: BlockStatement, computed?: boolean, generator?: boolean, async?: boolean): ObjectMethod;
export function objectProperty(key: Expression | Identifier | StringLiteral | NumericLiteral | BigIntLiteral | DecimalLiteral | PrivateName, value: Expression | PatternLike, computed?: boolean, shorthand?: boolean, decorators?: Array<Decorator> | null): ObjectProperty;
export function restElement(argument: LVal): RestElement;
export function returnStatement(argument?: Expression | null): ReturnStatement;
export function sequenceExpression(expressions: Array<Expression>): SequenceExpression;
export function parenthesizedExpression(expression: Expression): ParenthesizedExpression;
export function switchCase(test: Expression | null | undefined, consequent: Array<Statement>): SwitchCase;
export function switchStatement(discriminant: Expression, cases: Array<SwitchCase>): SwitchStatement;
export function thisExpression(): ThisExpression;
export function throwStatement(argument: Expression): ThrowStatement;
export function tryStatement(block: BlockStatement, handler?: CatchClause | null, finalizer?: BlockStatement | null): TryStatement;
export function unaryExpression(operator: "void" | "throw" | "delete" | "!" | "+" | "-" | "~" | "typeof", argument: Expression, prefix?: boolean): UnaryExpression;
export function updateExpression(operator: "++" | "--", argument: Expression, prefix?: boolean): UpdateExpression;
export function variableDeclaration(kind: "var" | "let" | "const" | "using" | "await using", declarations: Array<VariableDeclarator>): VariableDeclaration;
export function variableDeclarator(id: LVal, init?: Expression | null): VariableDeclarator;
export function whileStatement(test: Expression, body: Statement): WhileStatement;
export function withStatement(object: Expression, body: Statement): WithStatement;
export function assignmentPattern(left: Identifier | ObjectPattern | ArrayPattern | MemberExpression | TSAsExpression | TSSatisfiesExpression | TSTypeAssertion | TSNonNullExpression, right: Expression): AssignmentPattern;
export function arrayPattern(elements: Array<null | PatternLike | LVal>): ArrayPattern;
export function arrowFunctionExpression(params: Array<Identifier | Pattern | RestElement>, body: BlockStatement | Expression, async?: boolean): ArrowFunctionExpression;
export function classBody(body: Array<ClassMethod | ClassPrivateMethod | ClassProperty | ClassPrivateProperty | ClassAccessorProperty | TSDeclareMethod | TSIndexSignature | StaticBlock>): ClassBody;
export function classExpression(id: Identifier | null | undefined, superClass: Expression | null | undefined, body: ClassBody, decorators?: Array<Decorator> | null): ClassExpression;
export function classDeclaration(id: Identifier | null | undefined, superClass: Expression | null | undefined, body: ClassBody, decorators?: Array<Decorator> | null): ClassDeclaration;
export function exportAllDeclaration(source: StringLiteral): ExportAllDeclaration;
export function exportDefaultDeclaration(declaration: TSDeclareFunction | FunctionDeclaration | ClassDeclaration | Expression): ExportDefaultDeclaration;
export function exportNamedDeclaration(declaration?: Declaration | null, specifiers?: Array<ExportSpecifier | ExportDefaultSpecifier | ExportNamespaceSpecifier>, source?: StringLiteral | null): ExportNamedDeclaration;
export function exportSpecifier(local: Identifier, exported: Identifier | StringLiteral): ExportSpecifier;
export function forOfStatement(left: VariableDeclaration | LVal, right: Expression, body: Statement, _await?: boolean): ForOfStatement;
export function importDeclaration(specifiers: Array<ImportSpecifier | ImportDefaultSpecifier | ImportNamespaceSpecifier>, source: StringLiteral): ImportDeclaration;
export function importDefaultSpecifier(local: Identifier): ImportDefaultSpecifier;
export function importNamespaceSpecifier(local: Identifier): ImportNamespaceSpecifier;
export function importSpecifier(local: Identifier, imported: Identifier | StringLiteral): ImportSpecifier;
export function importExpression(source: Expression, options?: Expression | null): ImportExpression;
export function metaProperty(meta: Identifier, property: Identifier): MetaProperty;
export function classMethod(kind: "get" | "set" | "method" | "constructor" | undefined, key: Identifier | StringLiteral | NumericLiteral | BigIntLiteral | Expression, params: Array<Identifier | Pattern | RestElement | TSParameterProperty>, body: BlockStatement, computed?: boolean, _static?: boolean, generator?: boolean, async?: boolean): ClassMethod;
export function objectPattern(properties: Array<RestElement | ObjectProperty>): ObjectPattern;
export function spreadElement(argument: Expression): SpreadElement;
declare function _super(): Super;
export { _super as super}
export function taggedTemplateExpression(tag: Expression, quasi: TemplateLiteral): TaggedTemplateExpression;
export function templateElement(value: { raw: string, cooked?: string }, tail?: boolean): TemplateElement;
export function templateLiteral(quasis: Array<TemplateElement>, expressions: Array<Expression | TSType>): TemplateLiteral;
export function yieldExpression(argument?: Expression | null, delegate?: boolean): YieldExpression;
export function awaitExpression(argument: Expression): AwaitExpression;
declare function _import(): Import;
export { _import as import}
export function bigIntLiteral(value: string): BigIntLiteral;
export function exportNamespaceSpecifier(exported: Identifier): ExportNamespaceSpecifier;
export function optionalMemberExpression(object: Expression, property: Expression | Identifier, computed: boolean | undefined, optional: boolean): OptionalMemberExpression;
export function optionalCallExpression(callee: Expression, _arguments: Array<Expression | SpreadElement | ArgumentPlaceholder>, optional: boolean): OptionalCallExpression;
export function classProperty(key: Identifier | StringLiteral | NumericLiteral | BigIntLiteral | Expression, value?: Expression | null, typeAnnotation?: TypeAnnotation | TSTypeAnnotation | Noop | null, decorators?: Array<Decorator> | null, computed?: boolean, _static?: boolean): ClassProperty;
export function classAccessorProperty(key: Identifier | StringLiteral | NumericLiteral | BigIntLiteral | Expression | PrivateName, value?: Expression | null, typeAnnotation?: TypeAnnotation | TSTypeAnnotation | Noop | null, decorators?: Array<Decorator> | null, computed?: boolean, _static?: boolean): ClassAccessorProperty;
export function classPrivateProperty(key: PrivateName, value?: Expression | null, decorators?: Array<Decorator> | null, _static?: boolean): ClassPrivateProperty;
export function classPrivateMethod(kind: "get" | "set" | "method" | undefined, key: PrivateName, params: Array<Identifier | Pattern | RestElement | TSParameterProperty>, body: BlockStatement, _static?: boolean): ClassPrivateMethod;
export function privateName(id: Identifier): PrivateName;
export function staticBlock(body: Array<Statement>): StaticBlock;
export function anyTypeAnnotation(): AnyTypeAnnotation;
export function arrayTypeAnnotation(elementType: FlowType): ArrayTypeAnnotation;
export function booleanTypeAnnotation(): BooleanTypeAnnotation;
export function booleanLiteralTypeAnnotation(value: boolean): BooleanLiteralTypeAnnotation;
export function nullLiteralTypeAnnotation(): NullLiteralTypeAnnotation;
export function classImplements(id: Identifier, typeParameters?: TypeParameterInstantiation | null): ClassImplements;
export function declareClass(id: Identifier, typeParameters: TypeParameterDeclaration | null | undefined, _extends: Array<InterfaceExtends> | null | undefined, body: ObjectTypeAnnotation): DeclareClass;
export function declareFunction(id: Identifier): DeclareFunction;
export function declareInterface(id: Identifier, typeParameters: TypeParameterDeclaration | null | undefined, _extends: Array<InterfaceExtends> | null | undefined, body: ObjectTypeAnnotation): DeclareInterface;
export function declareModule(id: Identifier | StringLiteral, body: BlockStatement, kind?: "CommonJS" | "ES" | null): DeclareModule;
export function declareModuleExports(typeAnnotation: TypeAnnotation): DeclareModuleExports;
export function declareTypeAlias(id: Identifier, typeParameters: TypeParameterDeclaration | null | undefined, right: FlowType): DeclareTypeAlias;
export function declareOpaqueType(id: Identifier, typeParameters?: TypeParameterDeclaration | null, supertype?: FlowType | null): DeclareOpaqueType;
export function declareVariable(id: Identifier): DeclareVariable;
export function declareExportDeclaration(declaration?: Flow | null, specifiers?: Array<ExportSpecifier | ExportNamespaceSpecifier> | null, source?: StringLiteral | null): DeclareExportDeclaration;
export function declareExportAllDeclaration(source: StringLiteral): DeclareExportAllDeclaration;
export function declaredPredicate(value: Flow): DeclaredPredicate;
export function existsTypeAnnotation(): ExistsTypeAnnotation;
export function functionTypeAnnotation(typeParameters: TypeParameterDeclaration | null | undefined, params: Array<FunctionTypeParam>, rest: FunctionTypeParam | null | undefined, returnType: FlowType): FunctionTypeAnnotation;
export function functionTypeParam(name: Identifier | null | undefined, typeAnnotation: FlowType): FunctionTypeParam;
export function genericTypeAnnotation(id: Identifier | QualifiedTypeIdentifier, typeParameters?: TypeParameterInstantiation | null): GenericTypeAnnotation;
export function inferredPredicate(): InferredPredicate;
export function interfaceExtends(id: Identifier | QualifiedTypeIdentifier, typeParameters?: TypeParameterInstantiation | null): InterfaceExtends;
export function interfaceDeclaration(id: Identifier, typeParameters: TypeParameterDeclaration | null | undefined, _extends: Array<InterfaceExtends> | null | undefined, body: ObjectTypeAnnotation): InterfaceDeclaration;
export function interfaceTypeAnnotation(_extends: Array<InterfaceExtends> | null | undefined, body: ObjectTypeAnnotation): InterfaceTypeAnnotation;
export function intersectionTypeAnnotation(types: Array<FlowType>): IntersectionTypeAnnotation;
export function mixedTypeAnnotation(): MixedTypeAnnotation;
export function emptyTypeAnnotation(): EmptyTypeAnnotation;
export function nullableTypeAnnotation(typeAnnotation: FlowType): NullableTypeAnnotation;
export function numberLiteralTypeAnnotation(value: number): NumberLiteralTypeAnnotation;
export function numberTypeAnnotation(): NumberTypeAnnotation;
export function objectTypeAnnotation(properties: Array<ObjectTypeProperty | ObjectTypeSpreadProperty>, indexers?: Array<ObjectTypeIndexer>, callProperties?: Array<ObjectTypeCallProperty>, internalSlots?: Array<ObjectTypeInternalSlot>, exact?: boolean): ObjectTypeAnnotation;
export function objectTypeInternalSlot(id: Identifier, value: FlowType, optional: boolean, _static: boolean, method: boolean): ObjectTypeInternalSlot;
export function objectTypeCallProperty(value: FlowType): ObjectTypeCallProperty;
export function objectTypeIndexer(id: Identifier | null | undefined, key: FlowType, value: FlowType, variance?: Variance | null): ObjectTypeIndexer;
export function objectTypeProperty(key: Identifier | StringLiteral, value: FlowType, variance?: Variance | null): ObjectTypeProperty;
export function objectTypeSpreadProperty(argument: FlowType): ObjectTypeSpreadProperty;
export function opaqueType(id: Identifier, typeParameters: TypeParameterDeclaration | null | undefined, supertype: FlowType | null | undefined, impltype: FlowType): OpaqueType;
export function qualifiedTypeIdentifier(id: Identifier, qualification: Identifier | QualifiedTypeIdentifier): QualifiedTypeIdentifier;
export function stringLiteralTypeAnnotation(value: string): StringLiteralTypeAnnotation;
export function stringTypeAnnotation(): StringTypeAnnotation;
export function symbolTypeAnnotation(): SymbolTypeAnnotation;
export function thisTypeAnnotation(): ThisTypeAnnotation;
export function tupleTypeAnnotation(types: Array<FlowType>): TupleTypeAnnotation;
export function typeofTypeAnnotation(argument: FlowType): TypeofTypeAnnotation;
export function typeAlias(id: Identifier, typeParameters: TypeParameterDeclaration | null | undefined, right: FlowType): TypeAlias;
export function typeAnnotation(typeAnnotation: FlowType): TypeAnnotation;
export function typeCastExpression(expression: Expression, typeAnnotation: TypeAnnotation): TypeCastExpression;
export function typeParameter(bound?: TypeAnnotation | null, _default?: FlowType | null, variance?: Variance | null): TypeParameter;
export function typeParameterDeclaration(params: Array<TypeParameter>): TypeParameterDeclaration;
export function typeParameterInstantiation(params: Array<FlowType>): TypeParameterInstantiation;
export function unionTypeAnnotation(types: Array<FlowType>): UnionTypeAnnotation;
export function variance(kind: "minus" | "plus"): Variance;
export function voidTypeAnnotation(): VoidTypeAnnotation;
export function enumDeclaration(id: Identifier, body: EnumBooleanBody | EnumNumberBody | EnumStringBody | EnumSymbolBody): EnumDeclaration;
export function enumBooleanBody(members: Array<EnumBooleanMember>): EnumBooleanBody;
export function enumNumberBody(members: Array<EnumNumberMember>): EnumNumberBody;
export function enumStringBody(members: Array<EnumStringMember | EnumDefaultedMember>): EnumStringBody;
export function enumSymbolBody(members: Array<EnumDefaultedMember>): EnumSymbolBody;
export function enumBooleanMember(id: Identifier): EnumBooleanMember;
export function enumNumberMember(id: Identifier, init: NumericLiteral): EnumNumberMember;
export function enumStringMember(id: Identifier, init: StringLiteral): EnumStringMember;
export function enumDefaultedMember(id: Identifier): EnumDefaultedMember;
export function indexedAccessType(objectType: FlowType, indexType: FlowType): IndexedAccessType;
export function optionalIndexedAccessType(objectType: FlowType, indexType: FlowType): OptionalIndexedAccessType;
export function jsxAttribute(name: JSXIdentifier | JSXNamespacedName, value?: JSXElement | JSXFragment | StringLiteral | JSXExpressionContainer | null): JSXAttribute;
export function jsxClosingElement(name: JSXIdentifier | JSXMemberExpression | JSXNamespacedName): JSXClosingElement;
export function jsxElement(openingElement: JSXOpeningElement, closingElement: JSXClosingElement | null | undefined, children: Array<JSXText | JSXExpressionContainer | JSXSpreadChild | JSXElement | JSXFragment>, selfClosing?: boolean | null): JSXElement;
export function jsxEmptyExpression(): JSXEmptyExpression;
export function jsxExpressionContainer(expression: Expression | JSXEmptyExpression): JSXExpressionContainer;
export function jsxSpreadChild(expression: Expression): JSXSpreadChild;
export function jsxIdentifier(name: string): JSXIdentifier;
export function jsxMemberExpression(object: JSXMemberExpression | JSXIdentifier, property: JSXIdentifier): JSXMemberExpression;
export function jsxNamespacedName(namespace: JSXIdentifier, name: JSXIdentifier): JSXNamespacedName;
export function jsxOpeningElement(name: JSXIdentifier | JSXMemberExpression | JSXNamespacedName, attributes: Array<JSXAttribute | JSXSpreadAttribute>, selfClosing?: boolean): JSXOpeningElement;
export function jsxSpreadAttribute(argument: Expression): JSXSpreadAttribute;
export function jsxText(value: string): JSXText;
export function jsxFragment(openingFragment: JSXOpeningFragment, closingFragment: JSXClosingFragment, children: Array<JSXText | JSXExpressionContainer | JSXSpreadChild | JSXElement | JSXFragment>): JSXFragment;
export function jsxOpeningFragment(): JSXOpeningFragment;
export function jsxClosingFragment(): JSXClosingFragment;
export function noop(): Noop;
export function placeholder(expectedNode: "Identifier" | "StringLiteral" | "Expression" | "Statement" | "Declaration" | "BlockStatement" | "ClassBody" | "Pattern", name: Identifier): Placeholder;
export function v8IntrinsicIdentifier(name: string): V8IntrinsicIdentifier;
export function argumentPlaceholder(): ArgumentPlaceholder;
export function bindExpression(object: Expression, callee: Expression): BindExpression;
export function importAttribute(key: Identifier | StringLiteral, value: StringLiteral): ImportAttribute;
export function decorator(expression: Expression): Decorator;
export function doExpression(body: BlockStatement, async?: boolean): DoExpression;
export function exportDefaultSpecifier(exported: Identifier): ExportDefaultSpecifier;
export function recordExpression(properties: Array<ObjectProperty | SpreadElement>): RecordExpression;
export function tupleExpression(elements?: Array<Expression | SpreadElement>): TupleExpression;
export function decimalLiteral(value: string): DecimalLiteral;
export function moduleExpression(body: Program): ModuleExpression;
export function topicReference(): TopicReference;
export function pipelineTopicExpression(expression: Expression): PipelineTopicExpression;
export function pipelineBareFunction(callee: Expression): PipelineBareFunction;
export function pipelinePrimaryTopicReference(): PipelinePrimaryTopicReference;
export function tsParameterProperty(parameter: Identifier | AssignmentPattern): TSParameterProperty;
export function tsDeclareFunction(id: Identifier | null | undefined, typeParameters: TSTypeParameterDeclaration | Noop | null | undefined, params: Array<Identifier | Pattern | RestElement>, returnType?: TSTypeAnnotation | Noop | null): TSDeclareFunction;
export function tsDeclareMethod(decorators: Array<Decorator> | null | undefined, key: Identifier | StringLiteral | NumericLiteral | BigIntLiteral | Expression, typeParameters: TSTypeParameterDeclaration | Noop | null | undefined, params: Array<Identifier | Pattern | RestElement | TSParameterProperty>, returnType?: TSTypeAnnotation | Noop | null): TSDeclareMethod;
export function tsQualifiedName(left: TSEntityName, right: Identifier): TSQualifiedName;
export function tsCallSignatureDeclaration(typeParameters: TSTypeParameterDeclaration | null | undefined, parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>, typeAnnotation?: TSTypeAnnotation | null): TSCallSignatureDeclaration;
export function tsConstructSignatureDeclaration(typeParameters: TSTypeParameterDeclaration | null | undefined, parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>, typeAnnotation?: TSTypeAnnotation | null): TSConstructSignatureDeclaration;
export function tsPropertySignature(key: Expression, typeAnnotation?: TSTypeAnnotation | null): TSPropertySignature;
export function tsMethodSignature(key: Expression, typeParameters: TSTypeParameterDeclaration | null | undefined, parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>, typeAnnotation?: TSTypeAnnotation | null): TSMethodSignature;
export function tsIndexSignature(parameters: Array<Identifier>, typeAnnotation?: TSTypeAnnotation | null): TSIndexSignature;
export function tsAnyKeyword(): TSAnyKeyword;
export function tsBooleanKeyword(): TSBooleanKeyword;
export function tsBigIntKeyword(): TSBigIntKeyword;
export function tsIntrinsicKeyword(): TSIntrinsicKeyword;
export function tsNeverKeyword(): TSNeverKeyword;
export function tsNullKeyword(): TSNullKeyword;
export function tsNumberKeyword(): TSNumberKeyword;
export function tsObjectKeyword(): TSObjectKeyword;
export function tsStringKeyword(): TSStringKeyword;
export function tsSymbolKeyword(): TSSymbolKeyword;
export function tsUndefinedKeyword(): TSUndefinedKeyword;
export function tsUnknownKeyword(): TSUnknownKeyword;
export function tsVoidKeyword(): TSVoidKeyword;
export function tsThisType(): TSThisType;
export function tsFunctionType(typeParameters: TSTypeParameterDeclaration | null | undefined, parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>, typeAnnotation?: TSTypeAnnotation | null): TSFunctionType;
export function tsConstructorType(typeParameters: TSTypeParameterDeclaration | null | undefined, parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>, typeAnnotation?: TSTypeAnnotation | null): TSConstructorType;
export function tsTypeReference(typeName: TSEntityName, typeParameters?: TSTypeParameterInstantiation | null): TSTypeReference;
export function tsTypePredicate(parameterName: Identifier | TSThisType, typeAnnotation?: TSTypeAnnotation | null, asserts?: boolean | null): TSTypePredicate;
export function tsTypeQuery(exprName: TSEntityName | TSImportType, typeParameters?: TSTypeParameterInstantiation | null): TSTypeQuery;
export function tsTypeLiteral(members: Array<TSTypeElement>): TSTypeLiteral;
export function tsArrayType(elementType: TSType): TSArrayType;
export function tsTupleType(elementTypes: Array<TSType | TSNamedTupleMember>): TSTupleType;
export function tsOptionalType(typeAnnotation: TSType): TSOptionalType;
export function tsRestType(typeAnnotation: TSType): TSRestType;
export function tsNamedTupleMember(label: Identifier, elementType: TSType, optional?: boolean): TSNamedTupleMember;
export function tsUnionType(types: Array<TSType>): TSUnionType;
export function tsIntersectionType(types: Array<TSType>): TSIntersectionType;
export function tsConditionalType(checkType: TSType, extendsType: TSType, trueType: TSType, falseType: TSType): TSConditionalType;
export function tsInferType(typeParameter: TSTypeParameter): TSInferType;
export function tsParenthesizedType(typeAnnotation: TSType): TSParenthesizedType;
export function tsTypeOperator(typeAnnotation: TSType): TSTypeOperator;
export function tsIndexedAccessType(objectType: TSType, indexType: TSType): TSIndexedAccessType;
export function tsMappedType(typeParameter: TSTypeParameter, typeAnnotation?: TSType | null, nameType?: TSType | null): TSMappedType;
export function tsLiteralType(literal: NumericLiteral | StringLiteral | BooleanLiteral | BigIntLiteral | TemplateLiteral | UnaryExpression): TSLiteralType;
export function tsExpressionWithTypeArguments(expression: TSEntityName, typeParameters?: TSTypeParameterInstantiation | null): TSExpressionWithTypeArguments;
export function tsInterfaceDeclaration(id: Identifier, typeParameters: TSTypeParameterDeclaration | null | undefined, _extends: Array<TSExpressionWithTypeArguments> | null | undefined, body: TSInterfaceBody): TSInterfaceDeclaration;
export function tsInterfaceBody(body: Array<TSTypeElement>): TSInterfaceBody;
export function tsTypeAliasDeclaration(id: Identifier, typeParameters: TSTypeParameterDeclaration | null | undefined, typeAnnotation: TSType): TSTypeAliasDeclaration;
export function tsInstantiationExpression(expression: Expression, typeParameters?: TSTypeParameterInstantiation | null): TSInstantiationExpression;
export function tsAsExpression(expression: Expression, typeAnnotation: TSType): TSAsExpression;
export function tsSatisfiesExpression(expression: Expression, typeAnnotation: TSType): TSSatisfiesExpression;
export function tsTypeAssertion(typeAnnotation: TSType, expression: Expression): TSTypeAssertion;
export function tsEnumDeclaration(id: Identifier, members: Array<TSEnumMember>): TSEnumDeclaration;
export function tsEnumMember(id: Identifier | StringLiteral, initializer?: Expression | null): TSEnumMember;
export function tsModuleDeclaration(id: Identifier | StringLiteral, body: TSModuleBlock | TSModuleDeclaration): TSModuleDeclaration;
export function tsModuleBlock(body: Array<Statement>): TSModuleBlock;
export function tsImportType(argument: StringLiteral, qualifier?: TSEntityName | null, typeParameters?: TSTypeParameterInstantiation | null): TSImportType;
export function tsImportEqualsDeclaration(id: Identifier, moduleReference: TSEntityName | TSExternalModuleReference): TSImportEqualsDeclaration;
export function tsExternalModuleReference(expression: StringLiteral): TSExternalModuleReference;
export function tsNonNullExpression(expression: Expression): TSNonNullExpression;
export function tsExportAssignment(expression: Expression): TSExportAssignment;
export function tsNamespaceExportDeclaration(id: Identifier): TSNamespaceExportDeclaration;
export function tsTypeAnnotation(typeAnnotation: TSType): TSTypeAnnotation;
export function tsTypeParameterInstantiation(params: Array<TSType>): TSTypeParameterInstantiation;
export function tsTypeParameterDeclaration(params: Array<TSTypeParameter>): TSTypeParameterDeclaration;
export function tsTypeParameter(constraint: TSType | null | undefined, _default: TSType | null | undefined, name: string): TSTypeParameter;
export function isAccessor(node: object | null | undefined, opts?: object | null): node is Accessor;
export function assertAccessor(node: object | null | undefined, opts?: object | null): void;
export function isAnyTypeAnnotation(node: object | null | undefined, opts?: object | null): node is AnyTypeAnnotation;
export function assertAnyTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
export function isArgumentPlaceholder(node: object | null | undefined, opts?: object | null): node is ArgumentPlaceholder;
export function assertArgumentPlaceholder(node: object | null | undefined, opts?: object | null): void;
export function isArrayExpression(node: object | null | undefined, opts?: object | null): node is ArrayExpression;
export function assertArrayExpression(node: object | null | undefined, opts?: object | null): void;
export function isArrayPattern(node: object | null | undefined, opts?: object | null): node is ArrayPattern;
export function assertArrayPattern(node: object | null | undefined, opts?: object | null): void;
export function isArrayTypeAnnotation(node: object | null | undefined, opts?: object | null): node is ArrayTypeAnnotation;
export function assertArrayTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
export function isArrowFunctionExpression(node: object | null | undefined, opts?: object | null): node is ArrowFunctionExpression;
export function assertArrowFunctionExpression(node: object | null | undefined, opts?: object | null): void;
export function isAssignmentExpression(node: object | null | undefined, opts?: object | null): node is AssignmentExpression;
export function assertAssignmentExpression(node: object | null | undefined, opts?: object | null): void;
export function isAssignmentPattern(node: object | null | undefined, opts?: object | null): node is AssignmentPattern;
export function assertAssignmentPattern(node: object | null | undefined, opts?: object | null): void;
export function isAwaitExpression(node: object | null | undefined, opts?: object | null): node is AwaitExpression;
export function assertAwaitExpression(node: object | null | undefined, opts?: object | null): void;
export function isBigIntLiteral(node: object | null | undefined, opts?: object | null): node is BigIntLiteral;
export function assertBigIntLiteral(node: object | null | undefined, opts?: object | null): void;
export function isBinary(node: object | null | undefined, opts?: object | null): node is Binary;
export function assertBinary(node: object | null | undefined, opts?: object | null): void;
export function isBinaryExpression(node: object | null | undefined, opts?: object | null): node is BinaryExpression;
export function assertBinaryExpression(node: object | null | undefined, opts?: object | null): void;
export function isBindExpression(node: object | null | undefined, opts?: object | null): node is BindExpression;
export function assertBindExpression(node: object | null | undefined, opts?: object | null): void;
export function isBlock(node: object | null | undefined, opts?: object | null): node is Block;
export function assertBlock(node: object | null | undefined, opts?: object | null): void;
export function isBlockParent(node: object | null | undefined, opts?: object | null): node is BlockParent;
export function assertBlockParent(node: object | null | undefined, opts?: object | null): void;
export function isBlockStatement(node: object | null | undefined, opts?: object | null): node is BlockStatement;
export function assertBlockStatement(node: object | null | undefined, opts?: object | null): void;
export function isBooleanLiteral(node: object | null | undefined, opts?: object | null): node is BooleanLiteral;
export function assertBooleanLiteral(node: object | null | undefined, opts?: object | null): void;
export function isBooleanLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): node is BooleanLiteralTypeAnnotation;
export function assertBooleanLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
export function isBooleanTypeAnnotation(node: object | null | undefined, opts?: object | null): node is BooleanTypeAnnotation;
export function assertBooleanTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
export function isBreakStatement(node: object | null | undefined, opts?: object | null): node is BreakStatement;
export function assertBreakStatement(node: object | null | undefined, opts?: object | null): void;
export function isCallExpression(node: object | null | undefined, opts?: object | null): node is CallExpression;
export function assertCallExpression(node: object | null | undefined, opts?: object | null): void;
export function isCatchClause(node: object | null | undefined, opts?: object | null): node is CatchClause;
export function assertCatchClause(node: object | null | undefined, opts?: object | null): void;
export function isClass(node: object | null | undefined, opts?: object | null): node is Class;
export function assertClass(node: object | null | undefined, opts?: object | null): void;
export function isClassAccessorProperty(node: object | null | undefined, opts?: object | null): node is ClassAccessorProperty;
export function assertClassAccessorProperty(node: object | null | undefined, opts?: object | null): void;
export function isClassBody(node: object | null | undefined, opts?: object | null): node is ClassBody;
export function assertClassBody(node: object | null | undefined, opts?: object | null): void;
export function isClassDeclaration(node: object | null | undefined, opts?: object | null): node is ClassDeclaration;
export function assertClassDeclaration(node: object | null | undefined, opts?: object | null): void;
export function isClassExpression(node: object | null | undefined, opts?: object | null): node is ClassExpression;
export function assertClassExpression(node: object | null | undefined, opts?: object | null): void;
export function isClassImplements(node: object | null | undefined, opts?: object | null): node is ClassImplements;
export function assertClassImplements(node: object | null | undefined, opts?: object | null): void;
export function isClassMethod(node: object | null | undefined, opts?: object | null): node is ClassMethod;
export function assertClassMethod(node: object | null | undefined, opts?: object | null): void;
export function isClassPrivateMethod(node: object | null | undefined, opts?: object | null): node is ClassPrivateMethod;
export function assertClassPrivateMethod(node: object | null | undefined, opts?: object | null): void;
export function isClassPrivateProperty(node: object | null | undefined, opts?: object | null): node is ClassPrivateProperty;
export function assertClassPrivateProperty(node: object | null | undefined, opts?: object | null): void;
export function isClassProperty(node: object | null | undefined, opts?: object | null): node is ClassProperty;
export function assertClassProperty(node: object | null | undefined, opts?: object | null): void;
export function isCompletionStatement(node: object | null | undefined, opts?: object | null): node is CompletionStatement;
export function assertCompletionStatement(node: object | null | undefined, opts?: object | null): void;
export function isConditional(node: object | null | undefined, opts?: object | null): node is Conditional;
export function assertConditional(node: object | null | undefined, opts?: object | null): void;
export function isConditionalExpression(node: object | null | undefined, opts?: object | null): node is ConditionalExpression;
export function assertConditionalExpression(node: object | null | undefined, opts?: object | null): void;
export function isContinueStatement(node: object | null | undefined, opts?: object | null): node is ContinueStatement;
export function assertContinueStatement(node: object | null | undefined, opts?: object | null): void;
export function isDebuggerStatement(node: object | null | undefined, opts?: object | null): node is DebuggerStatement;
export function assertDebuggerStatement(node: object | null | undefined, opts?: object | null): void;
export function isDecimalLiteral(node: object | null | undefined, opts?: object | null): node is DecimalLiteral;
export function assertDecimalLiteral(node: object | null | undefined, opts?: object | null): void;
export function isDeclaration(node: object | null | undefined, opts?: object | null): node is Declaration;
export function assertDeclaration(node: object | null | undefined, opts?: object | null): void;
export function isDeclareClass(node: object | null | undefined, opts?: object | null): node is DeclareClass;
export function assertDeclareClass(node: object | null | undefined, opts?: object | null): void;
export function isDeclareExportAllDeclaration(node: object | null | undefined, opts?: object | null): node is DeclareExportAllDeclaration;
export function assertDeclareExportAllDeclaration(node: object | null | undefined, opts?: object | null): void;
export function isDeclareExportDeclaration(node: object | null | undefined, opts?: object | null): node is DeclareExportDeclaration;
export function assertDeclareExportDeclaration(node: object | null | undefined, opts?: object | null): void;
export function isDeclareFunction(node: object | null | undefined, opts?: object | null): node is DeclareFunction;
export function assertDeclareFunction(node: object | null | undefined, opts?: object | null): void;
export function isDeclareInterface(node: object | null | undefined, opts?: object | null): node is DeclareInterface;
export function assertDeclareInterface(node: object | null | undefined, opts?: object | null): void;
export function isDeclareModule(node: object | null | undefined, opts?: object | null): node is DeclareModule;
export function assertDeclareModule(node: object | null | undefined, opts?: object | null): void;
export function isDeclareModuleExports(node: object | null | undefined, opts?: object | null): node is DeclareModuleExports;
export function assertDeclareModuleExports(node: object | null | undefined, opts?: object | null): void;
export function isDeclareOpaqueType(node: object | null | undefined, opts?: object | null): node is DeclareOpaqueType;
export function assertDeclareOpaqueType(node: object | null | undefined, opts?: object | null): void;
export function isDeclareTypeAlias(node: object | null | undefined, opts?: object | null): node is DeclareTypeAlias;
export function assertDeclareTypeAlias(node: object | null | undefined, opts?: object | null): void;
export function isDeclareVariable(node: object | null | undefined, opts?: object | null): node is DeclareVariable;
export function assertDeclareVariable(node: object | null | undefined, opts?: object | null): void;
export function isDeclaredPredicate(node: object | null | undefined, opts?: object | null): node is DeclaredPredicate;
export function assertDeclaredPredicate(node: object | null | undefined, opts?: object | null): void;
export function isDecorator(node: object | null | undefined, opts?: object | null): node is Decorator;
export function assertDecorator(node: object | null | undefined, opts?: object | null): void;
export function isDirective(node: object | null | undefined, opts?: object | null): node is Directive;
export function assertDirective(node: object | null | undefined, opts?: object | null): void;
export function isDirectiveLiteral(node: object | null | undefined, opts?: object | null): node is DirectiveLiteral;
export function assertDirectiveLiteral(node: object | null | undefined, opts?: object | null): void;
export function isDoExpression(node: object | null | undefined, opts?: object | null): node is DoExpression;
export function assertDoExpression(node: object | null | undefined, opts?: object | null): void;
export function isDoWhileStatement(node: object | null | undefined, opts?: object | null): node is DoWhileStatement;
export function assertDoWhileStatement(node: object | null | undefined, opts?: object | null): void;
export function isEmptyStatement(node: object | null | undefined, opts?: object | null): node is EmptyStatement;
export function assertEmptyStatement(node: object | null | undefined, opts?: object | null): void;
export function isEmptyTypeAnnotation(node: object | null | undefined, opts?: object | null): node is EmptyTypeAnnotation;
export function assertEmptyTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
export function isEnumBody(node: object | null | undefined, opts?: object | null): node is EnumBody;
export function assertEnumBody(node: object | null | undefined, opts?: object | null): void;
export function isEnumBooleanBody(node: object | null | undefined, opts?: object | null): node is EnumBooleanBody;
export function assertEnumBooleanBody(node: object | null | undefined, opts?: object | null): void;
export function isEnumBooleanMember(node: object | null | undefined, opts?: object | null): node is EnumBooleanMember;
export function assertEnumBooleanMember(node: object | null | undefined, opts?: object | null): void;
export function isEnumDeclaration(node: object | null | undefined, opts?: object | null): node is EnumDeclaration;
export function assertEnumDeclaration(node: object | null | undefined, opts?: object | null): void;
export function isEnumDefaultedMember(node: object | null | undefined, opts?: object | null): node is EnumDefaultedMember;
export function assertEnumDefaultedMember(node: object | null | undefined, opts?: object | null): void;
export function isEnumMember(node: object | null | undefined, opts?: object | null): node is EnumMember;
export function assertEnumMember(node: object | null | undefined, opts?: object | null): void;
export function isEnumNumberBody(node: object | null | undefined, opts?: object | null): node is EnumNumberBody;
export function assertEnumNumberBody(node: object | null | undefined, opts?: object | null): void;
export function isEnumNumberMember(node: object | null | undefined, opts?: object | null): node is EnumNumberMember;
export function assertEnumNumberMember(node: object | null | undefined, opts?: object | null): void;
export function isEnumStringBody(node: object | null | undefined, opts?: object | null): node is EnumStringBody;
export function assertEnumStringBody(node: object | null | undefined, opts?: object | null): void;
export function isEnumStringMember(node: object | null | undefined, opts?: object | null): node is EnumStringMember;
export function assertEnumStringMember(node: object | null | undefined, opts?: object | null): void;
export function isEnumSymbolBody(node: object | null | undefined, opts?: object | null): node is EnumSymbolBody;
export function assertEnumSymbolBody(node: object | null | undefined, opts?: object | null): void;
export function isExistsTypeAnnotation(node: object | null | undefined, opts?: object | null): node is ExistsTypeAnnotation;
export function assertExistsTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
export function isExportAllDeclaration(node: object | null | undefined, opts?: object | null): node is ExportAllDeclaration;
export function assertExportAllDeclaration(node: object | null | undefined, opts?: object | null): void;
export function isExportDeclaration(node: object | null | undefined, opts?: object | null): node is ExportDeclaration;
export function assertExportDeclaration(node: object | null | undefined, opts?: object | null): void;
export function isExportDefaultDeclaration(node: object | null | undefined, opts?: object | null): node is ExportDefaultDeclaration;
export function assertExportDefaultDeclaration(node: object | null | undefined, opts?: object | null): void;
export function isExportDefaultSpecifier(node: object | null | undefined, opts?: object | null): node is ExportDefaultSpecifier;
export function assertExportDefaultSpecifier(node: object | null | undefined, opts?: object | null): void;
export function isExportNamedDeclaration(node: object | null | undefined, opts?: object | null): node is ExportNamedDeclaration;
export function assertExportNamedDeclaration(node: object | null | undefined, opts?: object | null): void;
export function isExportNamespaceSpecifier(node: object | null | undefined, opts?: object | null): node is ExportNamespaceSpecifier;
export function assertExportNamespaceSpecifier(node: object | null | undefined, opts?: object | null): void;
export function isExportSpecifier(node: object | null | undefined, opts?: object | null): node is ExportSpecifier;
export function assertExportSpecifier(node: object | null | undefined, opts?: object | null): void;
export function isExpression(node: object | null | undefined, opts?: object | null): node is Expression;
export function assertExpression(node: object | null | undefined, opts?: object | null): void;
export function isExpressionStatement(node: object | null | undefined, opts?: object | null): node is ExpressionStatement;
export function assertExpressionStatement(node: object | null | undefined, opts?: object | null): void;
export function isExpressionWrapper(node: object | null | undefined, opts?: object | null): node is ExpressionWrapper;
export function assertExpressionWrapper(node: object | null | undefined, opts?: object | null): void;
export function isFile(node: object | null | undefined, opts?: object | null): node is File;
export function assertFile(node: object | null | undefined, opts?: object | null): void;
export function isFlow(node: object | null | undefined, opts?: object | null): node is Flow;
export function assertFlow(node: object | null | undefined, opts?: object | null): void;
export function isFlowBaseAnnotation(node: object | null | undefined, opts?: object | null): node is FlowBaseAnnotation;
export function assertFlowBaseAnnotation(node: object | null | undefined, opts?: object | null): void;
export function isFlowDeclaration(node: object | null | undefined, opts?: object | null): node is FlowDeclaration;
export function assertFlowDeclaration(node: object | null | undefined, opts?: object | null): void;
export function isFlowPredicate(node: object | null | undefined, opts?: object | null): node is FlowPredicate;
export function assertFlowPredicate(node: object | null | undefined, opts?: object | null): void;
export function isFlowType(node: object | null | undefined, opts?: object | null): node is FlowType;
export function assertFlowType(node: object | null | undefined, opts?: object | null): void;
export function isFor(node: object | null | undefined, opts?: object | null): node is For;
export function assertFor(node: object | null | undefined, opts?: object | null): void;
export function isForInStatement(node: object | null | undefined, opts?: object | null): node is ForInStatement;
export function assertForInStatement(node: object | null | undefined, opts?: object | null): void;
export function isForOfStatement(node: object | null | undefined, opts?: object | null): node is ForOfStatement;
export function assertForOfStatement(node: object | null | undefined, opts?: object | null): void;
export function isForStatement(node: object | null | undefined, opts?: object | null): node is ForStatement;
export function assertForStatement(node: object | null | undefined, opts?: object | null): void;
export function isForXStatement(node: object | null | undefined, opts?: object | null): node is ForXStatement;
export function assertForXStatement(node: object | null | undefined, opts?: object | null): void;
export function isFunction(node: object | null | undefined, opts?: object | null): node is Function;
export function assertFunction(node: object | null | undefined, opts?: object | null): void;
export function isFunctionDeclaration(node: object | null | undefined, opts?: object | null): node is FunctionDeclaration;
export function assertFunctionDeclaration(node: object | null | undefined, opts?: object | null): void;
export function isFunctionExpression(node: object | null | undefined, opts?: object | null): node is FunctionExpression;
export function assertFunctionExpression(node: object | null | undefined, opts?: object | null): void;
export function isFunctionParent(node: object | null | undefined, opts?: object | null): node is FunctionParent;
export function assertFunctionParent(node: object | null | undefined, opts?: object | null): void;
export function isFunctionTypeAnnotation(node: object | null | undefined, opts?: object | null): node is FunctionTypeAnnotation;
export function assertFunctionTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
export function isFunctionTypeParam(node: object | null | undefined, opts?: object | null): node is FunctionTypeParam;
export function assertFunctionTypeParam(node: object | null | undefined, opts?: object | null): void;
export function isGenericTypeAnnotation(node: object | null | undefined, opts?: object | null): node is GenericTypeAnnotation;
export function assertGenericTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
export function isIdentifier(node: object | null | undefined, opts?: object | null): node is Identifier;
export function assertIdentifier(node: object | null | undefined, opts?: object | null): void;
export function isIfStatement(node: object | null | undefined, opts?: object | null): node is IfStatement;
export function assertIfStatement(node: object | null | undefined, opts?: object | null): void;
export function isImmutable(node: object | null | undefined, opts?: object | null): node is Immutable;
export function assertImmutable(node: object | null | undefined, opts?: object | null): void;
export function isImport(node: object | null | undefined, opts?: object | null): node is Import;
export function assertImport(node: object | null | undefined, opts?: object | null): void;
export function isImportAttribute(node: object | null | undefined, opts?: object | null): node is ImportAttribute;
export function assertImportAttribute(node: object | null | undefined, opts?: object | null): void;
export function isImportDeclaration(node: object | null | undefined, opts?: object | null): node is ImportDeclaration;
export function assertImportDeclaration(node: object | null | undefined, opts?: object | null): void;
export function isImportDefaultSpecifier(node: object | null | undefined, opts?: object | null): node is ImportDefaultSpecifier;
export function assertImportDefaultSpecifier(node: object | null | undefined, opts?: object | null): void;
export function isImportExpression(node: object | null | undefined, opts?: object | null): node is ImportExpression;
export function assertImportExpression(node: object | null | undefined, opts?: object | null): void;
export function isImportNamespaceSpecifier(node: object | null | undefined, opts?: object | null): node is ImportNamespaceSpecifier;
export function assertImportNamespaceSpecifier(node: object | null | undefined, opts?: object | null): void;
export function isImportOrExportDeclaration(node: object | null | undefined, opts?: object | null): node is ImportOrExportDeclaration;
export function assertImportOrExportDeclaration(node: object | null | undefined, opts?: object | null): void;
export function isImportSpecifier(node: object | null | undefined, opts?: object | null): node is ImportSpecifier;
export function assertImportSpecifier(node: object | null | undefined, opts?: object | null): void;
export function isIndexedAccessType(node: object | null | undefined, opts?: object | null): node is IndexedAccessType;
export function assertIndexedAccessType(node: object | null | undefined, opts?: object | null): void;
export function isInferredPredicate(node: object | null | undefined, opts?: object | null): node is InferredPredicate;
export function assertInferredPredicate(node: object | null | undefined, opts?: object | null): void;
export function isInterfaceDeclaration(node: object | null | undefined, opts?: object | null): node is InterfaceDeclaration;
export function assertInterfaceDeclaration(node: object | null | undefined, opts?: object | null): void;
export function isInterfaceExtends(node: object | null | undefined, opts?: object | null): node is InterfaceExtends;
export function assertInterfaceExtends(node: object | null | undefined, opts?: object | null): void;
export function isInterfaceTypeAnnotation(node: object | null | undefined, opts?: object | null): node is InterfaceTypeAnnotation;
export function assertInterfaceTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
export function isInterpreterDirective(node: object | null | undefined, opts?: object | null): node is InterpreterDirective;
export function assertInterpreterDirective(node: object | null | undefined, opts?: object | null): void;
export function isIntersectionTypeAnnotation(node: object | null | undefined, opts?: object | null): node is IntersectionTypeAnnotation;
export function assertIntersectionTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
export function isJSX(node: object | null | undefined, opts?: object | null): node is JSX;
export function assertJSX(node: object | null | undefined, opts?: object | null): void;
export function isJSXAttribute(node: object | null | undefined, opts?: object | null): node is JSXAttribute;
export function assertJSXAttribute(node: object | null | undefined, opts?: object | null): void;
export function isJSXClosingElement(node: object | null | undefined, opts?: object | null): node is JSXClosingElement;
export function assertJSXClosingElement(node: object | null | undefined, opts?: object | null): void;
export function isJSXClosingFragment(node: object | null | undefined, opts?: object | null): node is JSXClosingFragment;
export function assertJSXClosingFragment(node: object | null | undefined, opts?: object | null): void;
export function isJSXElement(node: object | null | undefined, opts?: object | null): node is JSXElement;
export function assertJSXElement(node: object | null | undefined, opts?: object | null): void;
export function isJSXEmptyExpression(node: object | null | undefined, opts?: object | null): node is JSXEmptyExpression;
export function assertJSXEmptyExpression(node: object | null | undefined, opts?: object | null): void;
export function isJSXExpressionContainer(node: object | null | undefined, opts?: object | null): node is JSXExpressionContainer;
export function assertJSXExpressionContainer(node: object | null | undefined, opts?: object | null): void;
export function isJSXFragment(node: object | null | undefined, opts?: object | null): node is JSXFragment;
export function assertJSXFragment(node: object | null | undefined, opts?: object | null): void;
export function isJSXIdentifier(node: object | null | undefined, opts?: object | null): node is JSXIdentifier;
export function assertJSXIdentifier(node: object | null | undefined, opts?: object | null): void;
export function isJSXMemberExpression(node: object | null | undefined, opts?: object | null): node is JSXMemberExpression;
export function assertJSXMemberExpression(node: object | null | undefined, opts?: object | null): void;
export function isJSXNamespacedName(node: object | null | undefined, opts?: object | null): node is JSXNamespacedName;
export function assertJSXNamespacedName(node: object | null | undefined, opts?: object | null): void;
export function isJSXOpeningElement(node: object | null | undefined, opts?: object | null): node is JSXOpeningElement;
export function assertJSXOpeningElement(node: object | null | undefined, opts?: object | null): void;
export function isJSXOpeningFragment(node: object | null | undefined, opts?: object | null): node is JSXOpeningFragment;
export function assertJSXOpeningFragment(node: object | null | undefined, opts?: object | null): void;
export function isJSXSpreadAttribute(node: object | null | undefined, opts?: object | null): node is JSXSpreadAttribute;
export function assertJSXSpreadAttribute(node: object | null | undefined, opts?: object | null): void;
export function isJSXSpreadChild(node: object | null | undefined, opts?: object | null): node is JSXSpreadChild;
export function assertJSXSpreadChild(node: object | null | undefined, opts?: object | null): void;
export function isJSXText(node: object | null | undefined, opts?: object | null): node is JSXText;
export function assertJSXText(node: object | null | undefined, opts?: object | null): void;
export function isLVal(node: object | null | undefined, opts?: object | null): node is LVal;
export function assertLVal(node: object | null | undefined, opts?: object | null): void;
export function isLabeledStatement(node: object | null | undefined, opts?: object | null): node is LabeledStatement;
export function assertLabeledStatement(node: object | null | undefined, opts?: object | null): void;
export function isLiteral(node: object | null | undefined, opts?: object | null): node is Literal;
export function assertLiteral(node: object | null | undefined, opts?: object | null): void;
export function isLogicalExpression(node: object | null | undefined, opts?: object | null): node is LogicalExpression;
export function assertLogicalExpression(node: object | null | undefined, opts?: object | null): void;
export function isLoop(node: object | null | undefined, opts?: object | null): node is Loop;
export function assertLoop(node: object | null | undefined, opts?: object | null): void;
export function isMemberExpression(node: object | null | undefined, opts?: object | null): node is MemberExpression;
export function assertMemberExpression(node: object | null | undefined, opts?: object | null): void;
export function isMetaProperty(node: object | null | undefined, opts?: object | null): node is MetaProperty;
export function assertMetaProperty(node: object | null | undefined, opts?: object | null): void;
export function isMethod(node: object | null | undefined, opts?: object | null): node is Method;
export function assertMethod(node: object | null | undefined, opts?: object | null): void;
export function isMiscellaneous(node: object | null | undefined, opts?: object | null): node is Miscellaneous;
export function assertMiscellaneous(node: object | null | undefined, opts?: object | null): void;
export function isMixedTypeAnnotation(node: object | null | undefined, opts?: object | null): node is MixedTypeAnnotation;
export function assertMixedTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
export function isModuleDeclaration(node: object | null | undefined, opts?: object | null): node is ModuleDeclaration;
export function assertModuleDeclaration(node: object | null | undefined, opts?: object | null): void;
export function isModuleExpression(node: object | null | undefined, opts?: object | null): node is ModuleExpression;
export function assertModuleExpression(node: object | null | undefined, opts?: object | null): void;
export function isModuleSpecifier(node: object | null | undefined, opts?: object | null): node is ModuleSpecifier;
export function assertModuleSpecifier(node: object | null | undefined, opts?: object | null): void;
export function isNewExpression(node: object | null | undefined, opts?: object | null): node is NewExpression;
export function assertNewExpression(node: object | null | undefined, opts?: object | null): void;
export function isNoop(node: object | null | undefined, opts?: object | null): node is Noop;
export function assertNoop(node: object | null | undefined, opts?: object | null): void;
export function isNullLiteral(node: object | null | undefined, opts?: object | null): node is NullLiteral;
export function assertNullLiteral(node: object | null | undefined, opts?: object | null): void;
export function isNullLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): node is NullLiteralTypeAnnotation;
export function assertNullLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
export function isNullableTypeAnnotation(node: object | null | undefined, opts?: object | null): node is NullableTypeAnnotation;
export function assertNullableTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
/** @deprecated Use `isNumericLiteral` */
export function isNumberLiteral(node: object | null | undefined, opts?: object | null): node is NumericLiteral;
/** @deprecated Use `assertNumericLiteral` */
export function assertNumberLiteral(node: object | null | undefined, opts?: object | null): void;
export function isNumberLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): node is NumberLiteralTypeAnnotation;
export function assertNumberLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
export function isNumberTypeAnnotation(node: object | null | undefined, opts?: object | null): node is NumberTypeAnnotation;
export function assertNumberTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
export function isNumericLiteral(node: object | null | undefined, opts?: object | null): node is NumericLiteral;
export function assertNumericLiteral(node: object | null | undefined, opts?: object | null): void;
export function isObjectExpression(node: object | null | undefined, opts?: object | null): node is ObjectExpression;
export function assertObjectExpression(node: object | null | undefined, opts?: object | null): void;
export function isObjectMember(node: object | null | undefined, opts?: object | null): node is ObjectMember;
export function assertObjectMember(node: object | null | undefined, opts?: object | null): void;
export function isObjectMethod(node: object | null | undefined, opts?: object | null): node is ObjectMethod;
export function assertObjectMethod(node: object | null | undefined, opts?: object | null): void;
export function isObjectPattern(node: object | null | undefined, opts?: object | null): node is ObjectPattern;
export function assertObjectPattern(node: object | null | undefined, opts?: object | null): void;
export function isObjectProperty(node: object | null | undefined, opts?: object | null): node is ObjectProperty;
export function assertObjectProperty(node: object | null | undefined, opts?: object | null): void;
export function isObjectTypeAnnotation(node: object | null | undefined, opts?: object | null): node is ObjectTypeAnnotation;
export function assertObjectTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
export function isObjectTypeCallProperty(node: object | null | undefined, opts?: object | null): node is ObjectTypeCallProperty;
export function assertObjectTypeCallProperty(node: object | null | undefined, opts?: object | null): void;
export function isObjectTypeIndexer(node: object | null | undefined, opts?: object | null): node is ObjectTypeIndexer;
export function assertObjectTypeIndexer(node: object | null | undefined, opts?: object | null): void;
export function isObjectTypeInternalSlot(node: object | null | undefined, opts?: object | null): node is ObjectTypeInternalSlot;
export function assertObjectTypeInternalSlot(node: object | null | undefined, opts?: object | null): void;
export function isObjectTypeProperty(node: object | null | undefined, opts?: object | null): node is ObjectTypeProperty;
export function assertObjectTypeProperty(node: object | null | undefined, opts?: object | null): void;
export function isObjectTypeSpreadProperty(node: object | null | undefined, opts?: object | null): node is ObjectTypeSpreadProperty;
export function assertObjectTypeSpreadProperty(node: object | null | undefined, opts?: object | null): void;
export function isOpaqueType(node: object | null | undefined, opts?: object | null): node is OpaqueType;
export function assertOpaqueType(node: object | null | undefined, opts?: object | null): void;
export function isOptionalCallExpression(node: object | null | undefined, opts?: object | null): node is OptionalCallExpression;
export function assertOptionalCallExpression(node: object | null | undefined, opts?: object | null): void;
export function isOptionalIndexedAccessType(node: object | null | undefined, opts?: object | null): node is OptionalIndexedAccessType;
export function assertOptionalIndexedAccessType(node: object | null | undefined, opts?: object | null): void;
export function isOptionalMemberExpression(node: object | null | undefined, opts?: object | null): node is OptionalMemberExpression;
export function assertOptionalMemberExpression(node: object | null | undefined, opts?: object | null): void;
export function isParenthesizedExpression(node: object | null | undefined, opts?: object | null): node is ParenthesizedExpression;
export function assertParenthesizedExpression(node: object | null | undefined, opts?: object | null): void;
export function isPattern(node: object | null | undefined, opts?: object | null): node is Pattern;
export function assertPattern(node: object | null | undefined, opts?: object | null): void;
export function isPatternLike(node: object | null | undefined, opts?: object | null): node is PatternLike;
export function assertPatternLike(node: object | null | undefined, opts?: object | null): void;
export function isPipelineBareFunction(node: object | null | undefined, opts?: object | null): node is PipelineBareFunction;
export function assertPipelineBareFunction(node: object | null | undefined, opts?: object | null): void;
export function isPipelinePrimaryTopicReference(node: object | null | undefined, opts?: object | null): node is PipelinePrimaryTopicReference;
export function assertPipelinePrimaryTopicReference(node: object | null | undefined, opts?: object | null): void;
export function isPipelineTopicExpression(node: object | null | undefined, opts?: object | null): node is PipelineTopicExpression;
export function assertPipelineTopicExpression(node: object | null | undefined, opts?: object | null): void;
export function isPlaceholder(node: object | null | undefined, opts?: object | null): node is Placeholder;
export function assertPlaceholder(node: object | null | undefined, opts?: object | null): void;
export function isPrivate(node: object | null | undefined, opts?: object | null): node is Private;
export function assertPrivate(node: object | null | undefined, opts?: object | null): void;
export function isPrivateName(node: object | null | undefined, opts?: object | null): node is PrivateName;
export function assertPrivateName(node: object | null | undefined, opts?: object | null): void;
export function isProgram(node: object | null | undefined, opts?: object | null): node is Program;
export function assertProgram(node: object | null | undefined, opts?: object | null): void;
export function isProperty(node: object | null | undefined, opts?: object | null): node is Property;
export function assertProperty(node: object | null | undefined, opts?: object | null): void;
export function isPureish(node: object | null | undefined, opts?: object | null): node is Pureish;
export function assertPureish(node: object | null | undefined, opts?: object | null): void;
export function isQualifiedTypeIdentifier(node: object | null | undefined, opts?: object | null): node is QualifiedTypeIdentifier;
export function assertQualifiedTypeIdentifier(node: object | null | undefined, opts?: object | null): void;
export function isRecordExpression(node: object | null | undefined, opts?: object | null): node is RecordExpression;
export function assertRecordExpression(node: object | null | undefined, opts?: object | null): void;
export function isRegExpLiteral(node: object | null | undefined, opts?: object | null): node is RegExpLiteral;
export function assertRegExpLiteral(node: object | null | undefined, opts?: object | null): void;
/** @deprecated Use `isRegExpLiteral` */
export function isRegexLiteral(node: object | null | undefined, opts?: object | null): node is RegExpLiteral;
/** @deprecated Use `assertRegExpLiteral` */
export function assertRegexLiteral(node: object | null | undefined, opts?: object | null): void;
export function isRestElement(node: object | null | undefined, opts?: object | null): node is RestElement;
export function assertRestElement(node: object | null | undefined, opts?: object | null): void;
/** @deprecated Use `isRestElement` */
export function isRestProperty(node: object | null | undefined, opts?: object | null): node is RestElement;
/** @deprecated Use `assertRestElement` */
export function assertRestProperty(node: object | null | undefined, opts?: object | null): void;
export function isReturnStatement(node: object | null | undefined, opts?: object | null): node is ReturnStatement;
export function assertReturnStatement(node: object | null | undefined, opts?: object | null): void;
export function isScopable(node: object | null | undefined, opts?: object | null): node is Scopable;
export function assertScopable(node: object | null | undefined, opts?: object | null): void;
export function isSequenceExpression(node: object | null | undefined, opts?: object | null): node is SequenceExpression;
export function assertSequenceExpression(node: object | null | undefined, opts?: object | null): void;
export function isSpreadElement(node: object | null | undefined, opts?: object | null): node is SpreadElement;
export function assertSpreadElement(node: object | null | undefined, opts?: object | null): void;
/** @deprecated Use `isSpreadElement` */
export function isSpreadProperty(node: object | null | undefined, opts?: object | null): node is SpreadElement;
/** @deprecated Use `assertSpreadElement` */
export function assertSpreadProperty(node: object | null | undefined, opts?: object | null): void;
export function isStandardized(node: object | null | undefined, opts?: object | null): node is Standardized;
export function assertStandardized(node: object | null | undefined, opts?: object | null): void;
export function isStatement(node: object | null | undefined, opts?: object | null): node is Statement;
export function assertStatement(node: object | null | undefined, opts?: object | null): void;
export function isStaticBlock(node: object | null | undefined, opts?: object | null): node is StaticBlock;
export function assertStaticBlock(node: object | null | undefined, opts?: object | null): void;
export function isStringLiteral(node: object | null | undefined, opts?: object | null): node is StringLiteral;
export function assertStringLiteral(node: object | null | undefined, opts?: object | null): void;
export function isStringLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): node is StringLiteralTypeAnnotation;
export function assertStringLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
export function isStringTypeAnnotation(node: object | null | undefined, opts?: object | null): node is StringTypeAnnotation;
export function assertStringTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
export function isSuper(node: object | null | undefined, opts?: object | null): node is Super;
export function assertSuper(node: object | null | undefined, opts?: object | null): void;
export function isSwitchCase(node: object | null | undefined, opts?: object | null): node is SwitchCase;
export function assertSwitchCase(node: object | null | undefined, opts?: object | null): void;
export function isSwitchStatement(node: object | null | undefined, opts?: object | null): node is SwitchStatement;
export function assertSwitchStatement(node: object | null | undefined, opts?: object | null): void;
export function isSymbolTypeAnnotation(node: object | null | undefined, opts?: object | null): node is SymbolTypeAnnotation;
export function assertSymbolTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
export function isTSAnyKeyword(node: object | null | undefined, opts?: object | null): node is TSAnyKeyword;
export function assertTSAnyKeyword(node: object | null | undefined, opts?: object | null): void;
export function isTSArrayType(node: object | null | undefined, opts?: object | null): node is TSArrayType;
export function assertTSArrayType(node: object | null | undefined, opts?: object | null): void;
export function isTSAsExpression(node: object | null | undefined, opts?: object | null): node is TSAsExpression;
export function assertTSAsExpression(node: object | null | undefined, opts?: object | null): void;
export function isTSBaseType(node: object | null | undefined, opts?: object | null): node is TSBaseType;
export function assertTSBaseType(node: object | null | undefined, opts?: object | null): void;
export function isTSBigIntKeyword(node: object | null | undefined, opts?: object | null): node is TSBigIntKeyword;
export function assertTSBigIntKeyword(node: object | null | undefined, opts?: object | null): void;
export function isTSBooleanKeyword(node: object | null | undefined, opts?: object | null): node is TSBooleanKeyword;
export function assertTSBooleanKeyword(node: object | null | undefined, opts?: object | null): void;
export function isTSCallSignatureDeclaration(node: object | null | undefined, opts?: object | null): node is TSCallSignatureDeclaration;
export function assertTSCallSignatureDeclaration(node: object | null | undefined, opts?: object | null): void;
export function isTSConditionalType(node: object | null | undefined, opts?: object | null): node is TSConditionalType;
export function assertTSConditionalType(node: object | null | undefined, opts?: object | null): void;
export function isTSConstructSignatureDeclaration(node: object | null | undefined, opts?: object | null): node is TSConstructSignatureDeclaration;
export function assertTSConstructSignatureDeclaration(node: object | null | undefined, opts?: object | null): void;
export function isTSConstructorType(node: object | null | undefined, opts?: object | null): node is TSConstructorType;
export function assertTSConstructorType(node: object | null | undefined, opts?: object | null): void;
export function isTSDeclareFunction(node: object | null | undefined, opts?: object | null): node is TSDeclareFunction;
export function assertTSDeclareFunction(node: object | null | undefined, opts?: object | null): void;
export function isTSDeclareMethod(node: object | null | undefined, opts?: object | null): node is TSDeclareMethod;
export function assertTSDeclareMethod(node: object | null | undefined, opts?: object | null): void;
export function isTSEntityName(node: object | null | undefined, opts?: object | null): node is TSEntityName;
export function assertTSEntityName(node: object | null | undefined, opts?: object | null): void;
export function isTSEnumDeclaration(node: object | null | undefined, opts?: object | null): node is TSEnumDeclaration;
export function assertTSEnumDeclaration(node: object | null | undefined, opts?: object | null): void;
export function isTSEnumMember(node: object | null | undefined, opts?: object | null): node is TSEnumMember;
export function assertTSEnumMember(node: object | null | undefined, opts?: object | null): void;
export function isTSExportAssignment(node: object | null | undefined, opts?: object | null): node is TSExportAssignment;
export function assertTSExportAssignment(node: object | null | undefined, opts?: object | null): void;
export function isTSExpressionWithTypeArguments(node: object | null | undefined, opts?: object | null): node is TSExpressionWithTypeArguments;
export function assertTSExpressionWithTypeArguments(node: object | null | undefined, opts?: object | null): void;
export function isTSExternalModuleReference(node: object | null | undefined, opts?: object | null): node is TSExternalModuleReference;
export function assertTSExternalModuleReference(node: object | null | undefined, opts?: object | null): void;
export function isTSFunctionType(node: object | null | undefined, opts?: object | null): node is TSFunctionType;
export function assertTSFunctionType(node: object | null | undefined, opts?: object | null): void;
export function isTSImportEqualsDeclaration(node: object | null | undefined, opts?: object | null): node is TSImportEqualsDeclaration;
export function assertTSImportEqualsDeclaration(node: object | null | undefined, opts?: object | null): void;
export function isTSImportType(node: object | null | undefined, opts?: object | null): node is TSImportType;
export function assertTSImportType(node: object | null | undefined, opts?: object | null): void;
export function isTSIndexSignature(node: object | null | undefined, opts?: object | null): node is TSIndexSignature;
export function assertTSIndexSignature(node: object | null | undefined, opts?: object | null): void;
export function isTSIndexedAccessType(node: object | null | undefined, opts?: object | null): node is TSIndexedAccessType;
export function assertTSIndexedAccessType(node: object | null | undefined, opts?: object | null): void;
export function isTSInferType(node: object | null | undefined, opts?: object | null): node is TSInferType;
export function assertTSInferType(node: object | null | undefined, opts?: object | null): void;
export function isTSInstantiationExpression(node: object | null | undefined, opts?: object | null): node is TSInstantiationExpression;
export function assertTSInstantiationExpression(node: object | null | undefined, opts?: object | null): void;
export function isTSInterfaceBody(node: object | null | undefined, opts?: object | null): node is TSInterfaceBody;
export function assertTSInterfaceBody(node: object | null | undefined, opts?: object | null): void;
export function isTSInterfaceDeclaration(node: object | null | undefined, opts?: object | null): node is TSInterfaceDeclaration;
export function assertTSInterfaceDeclaration(node: object | null | undefined, opts?: object | null): void;
export function isTSIntersectionType(node: object | null | undefined, opts?: object | null): node is TSIntersectionType;
export function assertTSIntersectionType(node: object | null | undefined, opts?: object | null): void;
export function isTSIntrinsicKeyword(node: object | null | undefined, opts?: object | null): node is TSIntrinsicKeyword;
export function assertTSIntrinsicKeyword(node: object | null | undefined, opts?: object | null): void;
export function isTSLiteralType(node: object | null | undefined, opts?: object | null): node is TSLiteralType;
export function assertTSLiteralType(node: object | null | undefined, opts?: object | null): void;
export function isTSMappedType(node: object | null | undefined, opts?: object | null): node is TSMappedType;
export function assertTSMappedType(node: object | null | undefined, opts?: object | null): void;
export function isTSMethodSignature(node: object | null | undefined, opts?: object | null): node is TSMethodSignature;
export function assertTSMethodSignature(node: object | null | undefined, opts?: object | null): void;
export function isTSModuleBlock(node: object | null | undefined, opts?: object | null): node is TSModuleBlock;
export function assertTSModuleBlock(node: object | null | undefined, opts?: object | null): void;
export function isTSModuleDeclaration(node: object | null | undefined, opts?: object | null): node is TSModuleDeclaration;
export function assertTSModuleDeclaration(node: object | null | undefined, opts?: object | null): void;
export function isTSNamedTupleMember(node: object | null | undefined, opts?: object | null): node is TSNamedTupleMember;
export function assertTSNamedTupleMember(node: object | null | undefined, opts?: object | null): void;
export function isTSNamespaceExportDeclaration(node: object | null | undefined, opts?: object | null): node is TSNamespaceExportDeclaration;
export function assertTSNamespaceExportDeclaration(node: object | null | undefined, opts?: object | null): void;
export function isTSNeverKeyword(node: object | null | undefined, opts?: object | null): node is TSNeverKeyword;
export function assertTSNeverKeyword(node: object | null | undefined, opts?: object | null): void;
export function isTSNonNullExpression(node: object | null | undefined, opts?: object | null): node is TSNonNullExpression;
export function assertTSNonNullExpression(node: object | null | undefined, opts?: object | null): void;
export function isTSNullKeyword(node: object | null | undefined, opts?: object | null): node is TSNullKeyword;
export function assertTSNullKeyword(node: object | null | undefined, opts?: object | null): void;
export function isTSNumberKeyword(node: object | null | undefined, opts?: object | null): node is TSNumberKeyword;
export function assertTSNumberKeyword(node: object | null | undefined, opts?: object | null): void;
export function isTSObjectKeyword(node: object | null | undefined, opts?: object | null): node is TSObjectKeyword;
export function assertTSObjectKeyword(node: object | null | undefined, opts?: object | null): void;
export function isTSOptionalType(node: object | null | undefined, opts?: object | null): node is TSOptionalType;
export function assertTSOptionalType(node: object | null | undefined, opts?: object | null): void;
export function isTSParameterProperty(node: object | null | undefined, opts?: object | null): node is TSParameterProperty;
export function assertTSParameterProperty(node: object | null | undefined, opts?: object | null): void;
export function isTSParenthesizedType(node: object | null | undefined, opts?: object | null): node is TSParenthesizedType;
export function assertTSParenthesizedType(node: object | null | undefined, opts?: object | null): void;
export function isTSPropertySignature(node: object | null | undefined, opts?: object | null): node is TSPropertySignature;
export function assertTSPropertySignature(node: object | null | undefined, opts?: object | null): void;
export function isTSQualifiedName(node: object | null | undefined, opts?: object | null): node is TSQualifiedName;
export function assertTSQualifiedName(node: object | null | undefined, opts?: object | null): void;
export function isTSRestType(node: object | null | undefined, opts?: object | null): node is TSRestType;
export function assertTSRestType(node: object | null | undefined, opts?: object | null): void;
export function isTSSatisfiesExpression(node: object | null | undefined, opts?: object | null): node is TSSatisfiesExpression;
export function assertTSSatisfiesExpression(node: object | null | undefined, opts?: object | null): void;
export function isTSStringKeyword(node: object | null | undefined, opts?: object | null): node is TSStringKeyword;
export function assertTSStringKeyword(node: object | null | undefined, opts?: object | null): void;
export function isTSSymbolKeyword(node: object | null | undefined, opts?: object | null): node is TSSymbolKeyword;
export function assertTSSymbolKeyword(node: object | null | undefined, opts?: object | null): void;
export function isTSThisType(node: object | null | undefined, opts?: object | null): node is TSThisType;
export function assertTSThisType(node: object | null | undefined, opts?: object | null): void;
export function isTSTupleType(node: object | null | undefined, opts?: object | null): node is TSTupleType;
export function assertTSTupleType(node: object | null | undefined, opts?: object | null): void;
export function isTSType(node: object | null | undefined, opts?: object | null): node is TSType;
export function assertTSType(node: object | null | undefined, opts?: object | null): void;
export function isTSTypeAliasDeclaration(node: object | null | undefined, opts?: object | null): node is TSTypeAliasDeclaration;
export function assertTSTypeAliasDeclaration(node: object | null | undefined, opts?: object | null): void;
export function isTSTypeAnnotation(node: object | null | undefined, opts?: object | null): node is TSTypeAnnotation;
export function assertTSTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
export function isTSTypeAssertion(node: object | null | undefined, opts?: object | null): node is TSTypeAssertion;
export function assertTSTypeAssertion(node: object | null | undefined, opts?: object | null): void;
export function isTSTypeElement(node: object | null | undefined, opts?: object | null): node is TSTypeElement;
export function assertTSTypeElement(node: object | null | undefined, opts?: object | null): void;
export function isTSTypeLiteral(node: object | null | undefined, opts?: object | null): node is TSTypeLiteral;
export function assertTSTypeLiteral(node: object | null | undefined, opts?: object | null): void;
export function isTSTypeOperator(node: object | null | undefined, opts?: object | null): node is TSTypeOperator;
export function assertTSTypeOperator(node: object | null | undefined, opts?: object | null): void;
export function isTSTypeParameter(node: object | null | undefined, opts?: object | null): node is TSTypeParameter;
export function assertTSTypeParameter(node: object | null | undefined, opts?: object | null): void;
export function isTSTypeParameterDeclaration(node: object | null | undefined, opts?: object | null): node is TSTypeParameterDeclaration;
export function assertTSTypeParameterDeclaration(node: object | null | undefined, opts?: object | null): void;
export function isTSTypeParameterInstantiation(node: object | null | undefined, opts?: object | null): node is TSTypeParameterInstantiation;
export function assertTSTypeParameterInstantiation(node: object | null | undefined, opts?: object | null): void;
export function isTSTypePredicate(node: object | null | undefined, opts?: object | null): node is TSTypePredicate;
export function assertTSTypePredicate(node: object | null | undefined, opts?: object | null): void;
export function isTSTypeQuery(node: object | null | undefined, opts?: object | null): node is TSTypeQuery;
export function assertTSTypeQuery(node: object | null | undefined, opts?: object | null): void;
export function isTSTypeReference(node: object | null | undefined, opts?: object | null): node is TSTypeReference;
export function assertTSTypeReference(node: object | null | undefined, opts?: object | null): void;
export function isTSUndefinedKeyword(node: object | null | undefined, opts?: object | null): node is TSUndefinedKeyword;
export function assertTSUndefinedKeyword(node: object | null | undefined, opts?: object | null): void;
export function isTSUnionType(node: object | null | undefined, opts?: object | null): node is TSUnionType;
export function assertTSUnionType(node: object | null | undefined, opts?: object | null): void;
export function isTSUnknownKeyword(node: object | null | undefined, opts?: object | null): node is TSUnknownKeyword;
export function assertTSUnknownKeyword(node: object | null | undefined, opts?: object | null): void;
export function isTSVoidKeyword(node: object | null | undefined, opts?: object | null): node is TSVoidKeyword;
export function assertTSVoidKeyword(node: object | null | undefined, opts?: object | null): void;
export function isTaggedTemplateExpression(node: object | null | undefined, opts?: object | null): node is TaggedTemplateExpression;
export function assertTaggedTemplateExpression(node: object | null | undefined, opts?: object | null): void;
export function isTemplateElement(node: object | null | undefined, opts?: object | null): node is TemplateElement;
export function assertTemplateElement(node: object | null | undefined, opts?: object | null): void;
export function isTemplateLiteral(node: object | null | undefined, opts?: object | null): node is TemplateLiteral;
export function assertTemplateLiteral(node: object | null | undefined, opts?: object | null): void;
export function isTerminatorless(node: object | null | undefined, opts?: object | null): node is Terminatorless;
export function assertTerminatorless(node: object | null | undefined, opts?: object | null): void;
export function isThisExpression(node: object | null | undefined, opts?: object | null): node is ThisExpression;
export function assertThisExpression(node: object | null | undefined, opts?: object | null): void;
export function isThisTypeAnnotation(node: object | null | undefined, opts?: object | null): node is ThisTypeAnnotation;
export function assertThisTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
export function isThrowStatement(node: object | null | undefined, opts?: object | null): node is ThrowStatement;
export function assertThrowStatement(node: object | null | undefined, opts?: object | null): void;
export function isTopicReference(node: object | null | undefined, opts?: object | null): node is TopicReference;
export function assertTopicReference(node: object | null | undefined, opts?: object | null): void;
export function isTryStatement(node: object | null | undefined, opts?: object | null): node is TryStatement;
export function assertTryStatement(node: object | null | undefined, opts?: object | null): void;
export function isTupleExpression(node: object | null | undefined, opts?: object | null): node is TupleExpression;
export function assertTupleExpression(node: object | null | undefined, opts?: object | null): void;
export function isTupleTypeAnnotation(node: object | null | undefined, opts?: object | null): node is TupleTypeAnnotation;
export function assertTupleTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
export function isTypeAlias(node: object | null | undefined, opts?: object | null): node is TypeAlias;
export function assertTypeAlias(node: object | null | undefined, opts?: object | null): void;
export function isTypeAnnotation(node: object | null | undefined, opts?: object | null): node is TypeAnnotation;
export function assertTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
export function isTypeCastExpression(node: object | null | undefined, opts?: object | null): node is TypeCastExpression;
export function assertTypeCastExpression(node: object | null | undefined, opts?: object | null): void;
export function isTypeParameter(node: object | null | undefined, opts?: object | null): node is TypeParameter;
export function assertTypeParameter(node: object | null | undefined, opts?: object | null): void;
export function isTypeParameterDeclaration(node: object | null | undefined, opts?: object | null): node is TypeParameterDeclaration;
export function assertTypeParameterDeclaration(node: object | null | undefined, opts?: object | null): void;
export function isTypeParameterInstantiation(node: object | null | undefined, opts?: object | null): node is TypeParameterInstantiation;
export function assertTypeParameterInstantiation(node: object | null | undefined, opts?: object | null): void;
export function isTypeScript(node: object | null | undefined, opts?: object | null): node is TypeScript;
export function assertTypeScript(node: object | null | undefined, opts?: object | null): void;
export function isTypeofTypeAnnotation(node: object | null | undefined, opts?: object | null): node is TypeofTypeAnnotation;
export function assertTypeofTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
export function isUnaryExpression(node: object | null | undefined, opts?: object | null): node is UnaryExpression;
export function assertUnaryExpression(node: object | null | undefined, opts?: object | null): void;
export function isUnaryLike(node: object | null | undefined, opts?: object | null): node is UnaryLike;
export function assertUnaryLike(node: object | null | undefined, opts?: object | null): void;
export function isUnionTypeAnnotation(node: object | null | undefined, opts?: object | null): node is UnionTypeAnnotation;
export function assertUnionTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
export function isUpdateExpression(node: object | null | undefined, opts?: object | null): node is UpdateExpression;
export function assertUpdateExpression(node: object | null | undefined, opts?: object | null): void;
export function isUserWhitespacable(node: object | null | undefined, opts?: object | null): node is UserWhitespacable;
export function assertUserWhitespacable(node: object | null | undefined, opts?: object | null): void;
export function isV8IntrinsicIdentifier(node: object | null | undefined, opts?: object | null): node is V8IntrinsicIdentifier;
export function assertV8IntrinsicIdentifier(node: object | null | undefined, opts?: object | null): void;
export function isVariableDeclaration(node: object | null | undefined, opts?: object | null): node is VariableDeclaration;
export function assertVariableDeclaration(node: object | null | undefined, opts?: object | null): void;
export function isVariableDeclarator(node: object | null | undefined, opts?: object | null): node is VariableDeclarator;
export function assertVariableDeclarator(node: object | null | undefined, opts?: object | null): void;
export function isVariance(node: object | null | undefined, opts?: object | null): node is Variance;
export function assertVariance(node: object | null | undefined, opts?: object | null): void;
export function isVoidTypeAnnotation(node: object | null | undefined, opts?: object | null): node is VoidTypeAnnotation;
export function assertVoidTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
export function isWhile(node: object | null | undefined, opts?: object | null): node is While;
export function assertWhile(node: object | null | undefined, opts?: object | null): void;
export function isWhileStatement(node: object | null | undefined, opts?: object | null): node is WhileStatement;
export function assertWhileStatement(node: object | null | undefined, opts?: object | null): void;
export function isWithStatement(node: object | null | undefined, opts?: object | null): node is WithStatement;
export function assertWithStatement(node: object | null | undefined, opts?: object | null): void;
export function isYieldExpression(node: object | null | undefined, opts?: object | null): node is YieldExpression;
export function assertYieldExpression(node: object | null | undefined, opts?: object | null): void;
export function assertNode(obj: any): void
export function createTypeAnnotationBasedOnTypeof(type: 'string' | 'number' | 'undefined' | 'boolean' | 'function' | 'object' | 'symbol'): StringTypeAnnotation | VoidTypeAnnotation | NumberTypeAnnotation | BooleanTypeAnnotation | GenericTypeAnnotation
export function createUnionTypeAnnotation<T extends FlowType>(types: [T]): T
export function createFlowUnionType<T extends FlowType>(types: [T]): T
export function createUnionTypeAnnotation(types: ReadonlyArray<FlowType>): UnionTypeAnnotation
export function createFlowUnionType(types: ReadonlyArray<FlowType>): UnionTypeAnnotation
export function buildChildren(node: { children: ReadonlyArray<JSXText | JSXExpressionContainer | JSXSpreadChild | JSXElement | JSXFragment | JSXEmptyExpression> }): JSXElement['children']
export function clone<T extends Node>(n: T): T;
export function cloneDeep<T extends Node>(n: T): T;
export function cloneDeepWithoutLoc<T extends Node>(n: T): T;
export function cloneNode<T extends Node>(n: T, deep?: boolean, withoutLoc?: boolean): T;
export function cloneWithoutLoc<T extends Node>(n: T): T;
export type CommentTypeShorthand = 'leading' | 'inner' | 'trailing'
export function addComment<T extends Node>(node: T, type: CommentTypeShorthand, content: string, line?: boolean): T
export function addComments<T extends Node>(node: T, type: CommentTypeShorthand, comments: ReadonlyArray<Comment>): T
export function inheritInnerComments(node: Node, parent: Node): void
export function inheritLeadingComments(node: Node, parent: Node): void
export function inheritsComments<T extends Node>(node: T, parent: Node): void
export function inheritTrailingComments(node: Node, parent: Node): void
export function removeComments<T extends Node>(node: T): T
export function ensureBlock(node: Extract<Node, { body: BlockStatement | Statement | Expression }>): BlockStatement
export function ensureBlock<K extends keyof Extract<Node, { body: BlockStatement | Statement | Expression }> = 'body'>(node: Extract<Node, Record<K, BlockStatement | Statement | Expression>>, key: K): BlockStatement
export function toBindingIdentifierName(name: { toString(): string } | null | undefined): string
export function toBlock(node: Statement | Expression, parent?: Function | null): BlockStatement
export function toComputedKey<T extends Extract<Node, { computed: boolean | null }>>(node: T, key?: Expression | Identifier): Expression
export function toExpression(node: Function): FunctionExpression
export function toExpression(node: Class): ClassExpression
export function toExpression(node: ExpressionStatement | Expression | Class | Function): Expression
export function toIdentifier(name: { toString(): string } | null | undefined): string
export function toKeyAlias(node: Method | Property, key?: Node): string
export function toSequenceExpression(nodes: ReadonlyArray<Node>, scope: { push(value: { id: LVal; kind: 'var'; init?: Expression}): void; buildUndefinedNode(): Node }): SequenceExpression | undefined
export function toStatement(node: AssignmentExpression, ignore?: boolean): ExpressionStatement
export function toStatement(node: Statement | AssignmentExpression, ignore?: boolean): Statement
export function toStatement(node: Class, ignore: true): ClassDeclaration | undefined
export function toStatement(node: Class, ignore?: boolean): ClassDeclaration
export function toStatement(node: Function, ignore: true): FunctionDeclaration | undefined
export function toStatement(node: Function, ignore?: boolean): FunctionDeclaration
export function toStatement(node: Statement | Class | Function | AssignmentExpression, ignore: true): Statement | undefined
export function toStatement(node: Statement | Class | Function | AssignmentExpression, ignore?: boolean): Statement
export function valueToNode(value: undefined): Identifier
export function valueToNode(value: boolean): BooleanLiteral
export function valueToNode(value: null): NullLiteral
export function valueToNode(value: string): StringLiteral
export function valueToNode(value: number): NumericLiteral | BinaryExpression | UnaryExpression
export function valueToNode(value: RegExp): RegExpLiteral
export function valueToNode(value: ReadonlyArray<undefined | boolean | null | string | number | RegExp | object>): ArrayExpression
export function valueToNode(value: object): ObjectExpression
export function valueToNode(value: undefined | boolean | null | string | number | RegExp | object): Expression
export function removeTypeDuplicates(types: ReadonlyArray<FlowType | false | null | undefined>): FlowType[]
export function appendToMemberExpression<T extends Pick<MemberExpression, 'object' | 'property'>>(member: T, append: MemberExpression['property'], computed?: boolean): T
export function inherits<T extends Node | null | undefined>(child: T, parent: Node | null | undefined): T
export function prependToMemberExpression<T extends Pick<MemberExpression, 'object' | 'property'>>(member: T, prepend: MemberExpression['object']): T
export function removeProperties(
  n: Node,
  opts?: { preserveComments: boolean } | null
): void;
export function removePropertiesDeep<T extends Node>(
  n: T,
  opts?: { preserveComments: boolean } | null
): T;
export function getBindingIdentifiers(node: Node, duplicates: true, outerOnly?: boolean): Record<string, Array<Identifier>>
export function getBindingIdentifiers(node: Node, duplicates?: false, outerOnly?: boolean): Record<string, Identifier>
export function getBindingIdentifiers(node: Node, duplicates: boolean, outerOnly?: boolean): Record<string, Identifier | Array<Identifier>>
export function getOuterBindingIdentifiers(node: Node, duplicates: true): Record<string, Array<Identifier>>
export function getOuterBindingIdentifiers(node: Node, duplicates?: false): Record<string, Identifier>
export function getOuterBindingIdentifiers(node: Node, duplicates: boolean): Record<string, Identifier | Array<Identifier>>
export type TraversalAncestors = ReadonlyArray<{
  node: Node,
  key: string,
  index?: number,
}>;
export type TraversalHandler<T> = (
  this: undefined, node: Node, parent: TraversalAncestors, type: T
) => void;
export type TraversalHandlers<T> = {
  enter?: TraversalHandler<T>,
  exit?: TraversalHandler<T>,
};
export function traverse<T>(n: Node, h: TraversalHandler<T> | TraversalHandlers<T>, state?: T): void;
export function traverseFast<T>(n: Node, h: TraversalHandler<T>, state?: T): void;
export function shallowEqual<T extends object>(actual: object, expected: T): actual is T
export function buildMatchMemberExpression(match: string, allowPartial?: boolean): (node: Node | null | undefined) => node is MemberExpression
export function is<T extends Node['type']>(type: T, n: Node | null | undefined, required?: undefined): n is Extract<Node, { type: T }>
export function is<T extends Node['type'], P extends Extract<Node, { type: T }>>(type: T, n: Node | null | undefined, required: Partial<P>): n is P
export function is<P extends Node>(type: string, n: Node | null | undefined, required: Partial<P>): n is P
export function is(type: string, n: Node | null | undefined, required?: Partial<Node>): n is Node
export function isBinding(node: Node, parent: Node, grandparent?: Node): boolean
export function isBlockScoped(node: Node): node is FunctionDeclaration | ClassDeclaration | VariableDeclaration
export function isImmutable(node: Node): node is Immutable
export function isLet(node: Node): node is VariableDeclaration
export function isNode(node: object | null | undefined): node is Node
export function isNodesEquivalent<T extends Partial<Node>>(a: T, b: any): b is T
export function isNodesEquivalent(a: any, b: any): boolean
export function isPlaceholderType(placeholderType: Node['type'], targetType: Node['type']): boolean
export function isReferenced(node: Node, parent: Node, grandparent?: Node): boolean
export function isScope(node: Node, parent: Node): node is Scopable
export function isSpecifierDefault(specifier: ModuleSpecifier): boolean
export function isType<T extends Node['type']>(nodetype: string, targetType: T): nodetype is T
export function isType(nodetype: string | null | undefined, targetType: string): boolean
export function isValidES3Identifier(name: string): boolean
export function isValidIdentifier(name: string): boolean
export function isVar(node: Node): node is VariableDeclaration
export function matchesPattern(node: Node | null | undefined, match: string | ReadonlyArray<string>, allowPartial?: boolean): node is MemberExpression
export function validate<T extends Node, K extends keyof T>(n: Node | null | undefined, key: K, value: T[K]): void;
export function validate(n: Node, key: string, value: any): void;declare function isCompatTag(tagName?: string): boolean;

type ReturnedChild = JSXSpreadChild | JSXElement | JSXFragment | Expression;
declare function buildChildren(node: JSXElement | JSXFragment): ReturnedChild[];

declare function assertNode(node?: any): asserts node is Node;

declare function assertArrayExpression(node: object | null | undefined, opts?: object | null): asserts node is ArrayExpression;
declare function assertAssignmentExpression(node: object | null | undefined, opts?: object | null): asserts node is AssignmentExpression;
declare function assertBinaryExpression(node: object | null | undefined, opts?: object | null): asserts node is BinaryExpression;
declare function assertInterpreterDirective(node: object | null | undefined, opts?: object | null): asserts node is InterpreterDirective;
declare function assertDirective(node: object | null | undefined, opts?: object | null): asserts node is Directive;
declare function assertDirectiveLiteral(node: object | null | undefined, opts?: object | null): asserts node is DirectiveLiteral;
declare function assertBlockStatement(node: object | null | undefined, opts?: object | null): asserts node is BlockStatement;
declare function assertBreakStatement(node: object | null | undefined, opts?: object | null): asserts node is BreakStatement;
declare function assertCallExpression(node: object | null | undefined, opts?: object | null): asserts node is CallExpression;
declare function assertCatchClause(node: object | null | undefined, opts?: object | null): asserts node is CatchClause;
declare function assertConditionalExpression(node: object | null | undefined, opts?: object | null): asserts node is ConditionalExpression;
declare function assertContinueStatement(node: object | null | undefined, opts?: object | null): asserts node is ContinueStatement;
declare function assertDebuggerStatement(node: object | null | undefined, opts?: object | null): asserts node is DebuggerStatement;
declare function assertDoWhileStatement(node: object | null | undefined, opts?: object | null): asserts node is DoWhileStatement;
declare function assertEmptyStatement(node: object | null | undefined, opts?: object | null): asserts node is EmptyStatement;
declare function assertExpressionStatement(node: object | null | undefined, opts?: object | null): asserts node is ExpressionStatement;
declare function assertFile(node: object | null | undefined, opts?: object | null): asserts node is File;
declare function assertForInStatement(node: object | null | undefined, opts?: object | null): asserts node is ForInStatement;
declare function assertForStatement(node: object | null | undefined, opts?: object | null): asserts node is ForStatement;
declare function assertFunctionDeclaration(node: object | null | undefined, opts?: object | null): asserts node is FunctionDeclaration;
declare function assertFunctionExpression(node: object | null | undefined, opts?: object | null): asserts node is FunctionExpression;
declare function assertIdentifier(node: object | null | undefined, opts?: object | null): asserts node is Identifier;
declare function assertIfStatement(node: object | null | undefined, opts?: object | null): asserts node is IfStatement;
declare function assertLabeledStatement(node: object | null | undefined, opts?: object | null): asserts node is LabeledStatement;
declare function assertStringLiteral(node: object | null | undefined, opts?: object | null): asserts node is StringLiteral;
declare function assertNumericLiteral(node: object | null | undefined, opts?: object | null): asserts node is NumericLiteral;
declare function assertNullLiteral(node: object | null | undefined, opts?: object | null): asserts node is NullLiteral;
declare function assertBooleanLiteral(node: object | null | undefined, opts?: object | null): asserts node is BooleanLiteral;
declare function assertRegExpLiteral(node: object | null | undefined, opts?: object | null): asserts node is RegExpLiteral;
declare function assertLogicalExpression(node: object | null | undefined, opts?: object | null): asserts node is LogicalExpression;
declare function assertMemberExpression(node: object | null | undefined, opts?: object | null): asserts node is MemberExpression;
declare function assertNewExpression(node: object | null | undefined, opts?: object | null): asserts node is NewExpression;
declare function assertProgram(node: object | null | undefined, opts?: object | null): asserts node is Program;
declare function assertObjectExpression(node: object | null | undefined, opts?: object | null): asserts node is ObjectExpression;
declare function assertObjectMethod(node: object | null | undefined, opts?: object | null): asserts node is ObjectMethod;
declare function assertObjectProperty(node: object | null | undefined, opts?: object | null): asserts node is ObjectProperty;
declare function assertRestElement(node: object | null | undefined, opts?: object | null): asserts node is RestElement;
declare function assertReturnStatement(node: object | null | undefined, opts?: object | null): asserts node is ReturnStatement;
declare function assertSequenceExpression(node: object | null | undefined, opts?: object | null): asserts node is SequenceExpression;
declare function assertParenthesizedExpression(node: object | null | undefined, opts?: object | null): asserts node is ParenthesizedExpression;
declare function assertSwitchCase(node: object | null | undefined, opts?: object | null): asserts node is SwitchCase;
declare function assertSwitchStatement(node: object | null | undefined, opts?: object | null): asserts node is SwitchStatement;
declare function assertThisExpression(node: object | null | undefined, opts?: object | null): asserts node is ThisExpression;
declare function assertThrowStatement(node: object | null | undefined, opts?: object | null): asserts node is ThrowStatement;
declare function assertTryStatement(node: object | null | undefined, opts?: object | null): asserts node is TryStatement;
declare function assertUnaryExpression(node: object | null | undefined, opts?: object | null): asserts node is UnaryExpression;
declare function assertUpdateExpression(node: object | null | undefined, opts?: object | null): asserts node is UpdateExpression;
declare function assertVariableDeclaration(node: object | null | undefined, opts?: object | null): asserts node is VariableDeclaration;
declare function assertVariableDeclarator(node: object | null | undefined, opts?: object | null): asserts node is VariableDeclarator;
declare function assertWhileStatement(node: object | null | undefined, opts?: object | null): asserts node is WhileStatement;
declare function assertWithStatement(node: object | null | undefined, opts?: object | null): asserts node is WithStatement;
declare function assertAssignmentPattern(node: object | null | undefined, opts?: object | null): asserts node is AssignmentPattern;
declare function assertArrayPattern(node: object | null | undefined, opts?: object | null): asserts node is ArrayPattern;
declare function assertArrowFunctionExpression(node: object | null | undefined, opts?: object | null): asserts node is ArrowFunctionExpression;
declare function assertClassBody(node: object | null | undefined, opts?: object | null): asserts node is ClassBody;
declare function assertClassExpression(node: object | null | undefined, opts?: object | null): asserts node is ClassExpression;
declare function assertClassDeclaration(node: object | null | undefined, opts?: object | null): asserts node is ClassDeclaration;
declare function assertExportAllDeclaration(node: object | null | undefined, opts?: object | null): asserts node is ExportAllDeclaration;
declare function assertExportDefaultDeclaration(node: object | null | undefined, opts?: object | null): asserts node is ExportDefaultDeclaration;
declare function assertExportNamedDeclaration(node: object | null | undefined, opts?: object | null): asserts node is ExportNamedDeclaration;
declare function assertExportSpecifier(node: object | null | undefined, opts?: object | null): asserts node is ExportSpecifier;
declare function assertForOfStatement(node: object | null | undefined, opts?: object | null): asserts node is ForOfStatement;
declare function assertImportDeclaration(node: object | null | undefined, opts?: object | null): asserts node is ImportDeclaration;
declare function assertImportDefaultSpecifier(node: object | null | undefined, opts?: object | null): asserts node is ImportDefaultSpecifier;
declare function assertImportNamespaceSpecifier(node: object | null | undefined, opts?: object | null): asserts node is ImportNamespaceSpecifier;
declare function assertImportSpecifier(node: object | null | undefined, opts?: object | null): asserts node is ImportSpecifier;
declare function assertImportExpression(node: object | null | undefined, opts?: object | null): asserts node is ImportExpression;
declare function assertMetaProperty(node: object | null | undefined, opts?: object | null): asserts node is MetaProperty;
declare function assertClassMethod(node: object | null | undefined, opts?: object | null): asserts node is ClassMethod;
declare function assertObjectPattern(node: object | null | undefined, opts?: object | null): asserts node is ObjectPattern;
declare function assertSpreadElement(node: object | null | undefined, opts?: object | null): asserts node is SpreadElement;
declare function assertSuper(node: object | null | undefined, opts?: object | null): asserts node is Super;
declare function assertTaggedTemplateExpression(node: object | null | undefined, opts?: object | null): asserts node is TaggedTemplateExpression;
declare function assertTemplateElement(node: object | null | undefined, opts?: object | null): asserts node is TemplateElement;
declare function assertTemplateLiteral(node: object | null | undefined, opts?: object | null): asserts node is TemplateLiteral;
declare function assertYieldExpression(node: object | null | undefined, opts?: object | null): asserts node is YieldExpression;
declare function assertAwaitExpression(node: object | null | undefined, opts?: object | null): asserts node is AwaitExpression;
declare function assertImport(node: object | null | undefined, opts?: object | null): asserts node is Import;
declare function assertBigIntLiteral(node: object | null | undefined, opts?: object | null): asserts node is BigIntLiteral;
declare function assertExportNamespaceSpecifier(node: object | null | undefined, opts?: object | null): asserts node is ExportNamespaceSpecifier;
declare function assertOptionalMemberExpression(node: object | null | undefined, opts?: object | null): asserts node is OptionalMemberExpression;
declare function assertOptionalCallExpression(node: object | null | undefined, opts?: object | null): asserts node is OptionalCallExpression;
declare function assertClassProperty(node: object | null | undefined, opts?: object | null): asserts node is ClassProperty;
declare function assertClassAccessorProperty(node: object | null | undefined, opts?: object | null): asserts node is ClassAccessorProperty;
declare function assertClassPrivateProperty(node: object | null | undefined, opts?: object | null): asserts node is ClassPrivateProperty;
declare function assertClassPrivateMethod(node: object | null | undefined, opts?: object | null): asserts node is ClassPrivateMethod;
declare function assertPrivateName(node: object | null | undefined, opts?: object | null): asserts node is PrivateName;
declare function assertStaticBlock(node: object | null | undefined, opts?: object | null): asserts node is StaticBlock;
declare function assertAnyTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is AnyTypeAnnotation;
declare function assertArrayTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is ArrayTypeAnnotation;
declare function assertBooleanTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is BooleanTypeAnnotation;
declare function assertBooleanLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is BooleanLiteralTypeAnnotation;
declare function assertNullLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is NullLiteralTypeAnnotation;
declare function assertClassImplements(node: object | null | undefined, opts?: object | null): asserts node is ClassImplements;
declare function assertDeclareClass(node: object | null | undefined, opts?: object | null): asserts node is DeclareClass;
declare function assertDeclareFunction(node: object | null | undefined, opts?: object | null): asserts node is DeclareFunction;
declare function assertDeclareInterface(node: object | null | undefined, opts?: object | null): asserts node is DeclareInterface;
declare function assertDeclareModule(node: object | null | undefined, opts?: object | null): asserts node is DeclareModule;
declare function assertDeclareModuleExports(node: object | null | undefined, opts?: object | null): asserts node is DeclareModuleExports;
declare function assertDeclareTypeAlias(node: object | null | undefined, opts?: object | null): asserts node is DeclareTypeAlias;
declare function assertDeclareOpaqueType(node: object | null | undefined, opts?: object | null): asserts node is DeclareOpaqueType;
declare function assertDeclareVariable(node: object | null | undefined, opts?: object | null): asserts node is DeclareVariable;
declare function assertDeclareExportDeclaration(node: object | null | undefined, opts?: object | null): asserts node is DeclareExportDeclaration;
declare function assertDeclareExportAllDeclaration(node: object | null | undefined, opts?: object | null): asserts node is DeclareExportAllDeclaration;
declare function assertDeclaredPredicate(node: object | null | undefined, opts?: object | null): asserts node is DeclaredPredicate;
declare function assertExistsTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is ExistsTypeAnnotation;
declare function assertFunctionTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is FunctionTypeAnnotation;
declare function assertFunctionTypeParam(node: object | null | undefined, opts?: object | null): asserts node is FunctionTypeParam;
declare function assertGenericTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is GenericTypeAnnotation;
declare function assertInferredPredicate(node: object | null | undefined, opts?: object | null): asserts node is InferredPredicate;
declare function assertInterfaceExtends(node: object | null | undefined, opts?: object | null): asserts node is InterfaceExtends;
declare function assertInterfaceDeclaration(node: object | null | undefined, opts?: object | null): asserts node is InterfaceDeclaration;
declare function assertInterfaceTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is InterfaceTypeAnnotation;
declare function assertIntersectionTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is IntersectionTypeAnnotation;
declare function assertMixedTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is MixedTypeAnnotation;
declare function assertEmptyTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is EmptyTypeAnnotation;
declare function assertNullableTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is NullableTypeAnnotation;
declare function assertNumberLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is NumberLiteralTypeAnnotation;
declare function assertNumberTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is NumberTypeAnnotation;
declare function assertObjectTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is ObjectTypeAnnotation;
declare function assertObjectTypeInternalSlot(node: object | null | undefined, opts?: object | null): asserts node is ObjectTypeInternalSlot;
declare function assertObjectTypeCallProperty(node: object | null | undefined, opts?: object | null): asserts node is ObjectTypeCallProperty;
declare function assertObjectTypeIndexer(node: object | null | undefined, opts?: object | null): asserts node is ObjectTypeIndexer;
declare function assertObjectTypeProperty(node: object | null | undefined, opts?: object | null): asserts node is ObjectTypeProperty;
declare function assertObjectTypeSpreadProperty(node: object | null | undefined, opts?: object | null): asserts node is ObjectTypeSpreadProperty;
declare function assertOpaqueType(node: object | null | undefined, opts?: object | null): asserts node is OpaqueType;
declare function assertQualifiedTypeIdentifier(node: object | null | undefined, opts?: object | null): asserts node is QualifiedTypeIdentifier;
declare function assertStringLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is StringLiteralTypeAnnotation;
declare function assertStringTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is StringTypeAnnotation;
declare function assertSymbolTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is SymbolTypeAnnotation;
declare function assertThisTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is ThisTypeAnnotation;
declare function assertTupleTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is TupleTypeAnnotation;
declare function assertTypeofTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is TypeofTypeAnnotation;
declare function assertTypeAlias(node: object | null | undefined, opts?: object | null): asserts node is TypeAlias;
declare function assertTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is TypeAnnotation;
declare function assertTypeCastExpression(node: object | null | undefined, opts?: object | null): asserts node is TypeCastExpression;
declare function assertTypeParameter(node: object | null | undefined, opts?: object | null): asserts node is TypeParameter;
declare function assertTypeParameterDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TypeParameterDeclaration;
declare function assertTypeParameterInstantiation(node: object | null | undefined, opts?: object | null): asserts node is TypeParameterInstantiation;
declare function assertUnionTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is UnionTypeAnnotation;
declare function assertVariance(node: object | null | undefined, opts?: object | null): asserts node is Variance;
declare function assertVoidTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is VoidTypeAnnotation;
declare function assertEnumDeclaration(node: object | null | undefined, opts?: object | null): asserts node is EnumDeclaration;
declare function assertEnumBooleanBody(node: object | null | undefined, opts?: object | null): asserts node is EnumBooleanBody;
declare function assertEnumNumberBody(node: object | null | undefined, opts?: object | null): asserts node is EnumNumberBody;
declare function assertEnumStringBody(node: object | null | undefined, opts?: object | null): asserts node is EnumStringBody;
declare function assertEnumSymbolBody(node: object | null | undefined, opts?: object | null): asserts node is EnumSymbolBody;
declare function assertEnumBooleanMember(node: object | null | undefined, opts?: object | null): asserts node is EnumBooleanMember;
declare function assertEnumNumberMember(node: object | null | undefined, opts?: object | null): asserts node is EnumNumberMember;
declare function assertEnumStringMember(node: object | null | undefined, opts?: object | null): asserts node is EnumStringMember;
declare function assertEnumDefaultedMember(node: object | null | undefined, opts?: object | null): asserts node is EnumDefaultedMember;
declare function assertIndexedAccessType(node: object | null | undefined, opts?: object | null): asserts node is IndexedAccessType;
declare function assertOptionalIndexedAccessType(node: object | null | undefined, opts?: object | null): asserts node is OptionalIndexedAccessType;
declare function assertJSXAttribute(node: object | null | undefined, opts?: object | null): asserts node is JSXAttribute;
declare function assertJSXClosingElement(node: object | null | undefined, opts?: object | null): asserts node is JSXClosingElement;
declare function assertJSXElement(node: object | null | undefined, opts?: object | null): asserts node is JSXElement;
declare function assertJSXEmptyExpression(node: object | null | undefined, opts?: object | null): asserts node is JSXEmptyExpression;
declare function assertJSXExpressionContainer(node: object | null | undefined, opts?: object | null): asserts node is JSXExpressionContainer;
declare function assertJSXSpreadChild(node: object | null | undefined, opts?: object | null): asserts node is JSXSpreadChild;
declare function assertJSXIdentifier(node: object | null | undefined, opts?: object | null): asserts node is JSXIdentifier;
declare function assertJSXMemberExpression(node: object | null | undefined, opts?: object | null): asserts node is JSXMemberExpression;
declare function assertJSXNamespacedName(node: object | null | undefined, opts?: object | null): asserts node is JSXNamespacedName;
declare function assertJSXOpeningElement(node: object | null | undefined, opts?: object | null): asserts node is JSXOpeningElement;
declare function assertJSXSpreadAttribute(node: object | null | undefined, opts?: object | null): asserts node is JSXSpreadAttribute;
declare function assertJSXText(node: object | null | undefined, opts?: object | null): asserts node is JSXText;
declare function assertJSXFragment(node: object | null | undefined, opts?: object | null): asserts node is JSXFragment;
declare function assertJSXOpeningFragment(node: object | null | undefined, opts?: object | null): asserts node is JSXOpeningFragment;
declare function assertJSXClosingFragment(node: object | null | undefined, opts?: object | null): asserts node is JSXClosingFragment;
declare function assertNoop(node: object | null | undefined, opts?: object | null): asserts node is Noop;
declare function assertPlaceholder(node: object | null | undefined, opts?: object | null): asserts node is Placeholder;
declare function assertV8IntrinsicIdentifier(node: object | null | undefined, opts?: object | null): asserts node is V8IntrinsicIdentifier;
declare function assertArgumentPlaceholder(node: object | null | undefined, opts?: object | null): asserts node is ArgumentPlaceholder;
declare function assertBindExpression(node: object | null | undefined, opts?: object | null): asserts node is BindExpression;
declare function assertImportAttribute(node: object | null | undefined, opts?: object | null): asserts node is ImportAttribute;
declare function assertDecorator(node: object | null | undefined, opts?: object | null): asserts node is Decorator;
declare function assertDoExpression(node: object | null | undefined, opts?: object | null): asserts node is DoExpression;
declare function assertExportDefaultSpecifier(node: object | null | undefined, opts?: object | null): asserts node is ExportDefaultSpecifier;
declare function assertRecordExpression(node: object | null | undefined, opts?: object | null): asserts node is RecordExpression;
declare function assertTupleExpression(node: object | null | undefined, opts?: object | null): asserts node is TupleExpression;
declare function assertDecimalLiteral(node: object | null | undefined, opts?: object | null): asserts node is DecimalLiteral;
declare function assertModuleExpression(node: object | null | undefined, opts?: object | null): asserts node is ModuleExpression;
declare function assertTopicReference(node: object | null | undefined, opts?: object | null): asserts node is TopicReference;
declare function assertPipelineTopicExpression(node: object | null | undefined, opts?: object | null): asserts node is PipelineTopicExpression;
declare function assertPipelineBareFunction(node: object | null | undefined, opts?: object | null): asserts node is PipelineBareFunction;
declare function assertPipelinePrimaryTopicReference(node: object | null | undefined, opts?: object | null): asserts node is PipelinePrimaryTopicReference;
declare function assertTSParameterProperty(node: object | null | undefined, opts?: object | null): asserts node is TSParameterProperty;
declare function assertTSDeclareFunction(node: object | null | undefined, opts?: object | null): asserts node is TSDeclareFunction;
declare function assertTSDeclareMethod(node: object | null | undefined, opts?: object | null): asserts node is TSDeclareMethod;
declare function assertTSQualifiedName(node: object | null | undefined, opts?: object | null): asserts node is TSQualifiedName;
declare function assertTSCallSignatureDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSCallSignatureDeclaration;
declare function assertTSConstructSignatureDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSConstructSignatureDeclaration;
declare function assertTSPropertySignature(node: object | null | undefined, opts?: object | null): asserts node is TSPropertySignature;
declare function assertTSMethodSignature(node: object | null | undefined, opts?: object | null): asserts node is TSMethodSignature;
declare function assertTSIndexSignature(node: object | null | undefined, opts?: object | null): asserts node is TSIndexSignature;
declare function assertTSAnyKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSAnyKeyword;
declare function assertTSBooleanKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSBooleanKeyword;
declare function assertTSBigIntKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSBigIntKeyword;
declare function assertTSIntrinsicKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSIntrinsicKeyword;
declare function assertTSNeverKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSNeverKeyword;
declare function assertTSNullKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSNullKeyword;
declare function assertTSNumberKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSNumberKeyword;
declare function assertTSObjectKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSObjectKeyword;
declare function assertTSStringKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSStringKeyword;
declare function assertTSSymbolKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSSymbolKeyword;
declare function assertTSUndefinedKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSUndefinedKeyword;
declare function assertTSUnknownKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSUnknownKeyword;
declare function assertTSVoidKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSVoidKeyword;
declare function assertTSThisType(node: object | null | undefined, opts?: object | null): asserts node is TSThisType;
declare function assertTSFunctionType(node: object | null | undefined, opts?: object | null): asserts node is TSFunctionType;
declare function assertTSConstructorType(node: object | null | undefined, opts?: object | null): asserts node is TSConstructorType;
declare function assertTSTypeReference(node: object | null | undefined, opts?: object | null): asserts node is TSTypeReference;
declare function assertTSTypePredicate(node: object | null | undefined, opts?: object | null): asserts node is TSTypePredicate;
declare function assertTSTypeQuery(node: object | null | undefined, opts?: object | null): asserts node is TSTypeQuery;
declare function assertTSTypeLiteral(node: object | null | undefined, opts?: object | null): asserts node is TSTypeLiteral;
declare function assertTSArrayType(node: object | null | undefined, opts?: object | null): asserts node is TSArrayType;
declare function assertTSTupleType(node: object | null | undefined, opts?: object | null): asserts node is TSTupleType;
declare function assertTSOptionalType(node: object | null | undefined, opts?: object | null): asserts node is TSOptionalType;
declare function assertTSRestType(node: object | null | undefined, opts?: object | null): asserts node is TSRestType;
declare function assertTSNamedTupleMember(node: object | null | undefined, opts?: object | null): asserts node is TSNamedTupleMember;
declare function assertTSUnionType(node: object | null | undefined, opts?: object | null): asserts node is TSUnionType;
declare function assertTSIntersectionType(node: object | null | undefined, opts?: object | null): asserts node is TSIntersectionType;
declare function assertTSConditionalType(node: object | null | undefined, opts?: object | null): asserts node is TSConditionalType;
declare function assertTSInferType(node: object | null | undefined, opts?: object | null): asserts node is TSInferType;
declare function assertTSParenthesizedType(node: object | null | undefined, opts?: object | null): asserts node is TSParenthesizedType;
declare function assertTSTypeOperator(node: object | null | undefined, opts?: object | null): asserts node is TSTypeOperator;
declare function assertTSIndexedAccessType(node: object | null | undefined, opts?: object | null): asserts node is TSIndexedAccessType;
declare function assertTSMappedType(node: object | null | undefined, opts?: object | null): asserts node is TSMappedType;
declare function assertTSLiteralType(node: object | null | undefined, opts?: object | null): asserts node is TSLiteralType;
declare function assertTSExpressionWithTypeArguments(node: object | null | undefined, opts?: object | null): asserts node is TSExpressionWithTypeArguments;
declare function assertTSInterfaceDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSInterfaceDeclaration;
declare function assertTSInterfaceBody(node: object | null | undefined, opts?: object | null): asserts node is TSInterfaceBody;
declare function assertTSTypeAliasDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSTypeAliasDeclaration;
declare function assertTSInstantiationExpression(node: object | null | undefined, opts?: object | null): asserts node is TSInstantiationExpression;
declare function assertTSAsExpression(node: object | null | undefined, opts?: object | null): asserts node is TSAsExpression;
declare function assertTSSatisfiesExpression(node: object | null | undefined, opts?: object | null): asserts node is TSSatisfiesExpression;
declare function assertTSTypeAssertion(node: object | null | undefined, opts?: object | null): asserts node is TSTypeAssertion;
declare function assertTSEnumDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSEnumDeclaration;
declare function assertTSEnumMember(node: object | null | undefined, opts?: object | null): asserts node is TSEnumMember;
declare function assertTSModuleDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSModuleDeclaration;
declare function assertTSModuleBlock(node: object | null | undefined, opts?: object | null): asserts node is TSModuleBlock;
declare function assertTSImportType(node: object | null | undefined, opts?: object | null): asserts node is TSImportType;
declare function assertTSImportEqualsDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSImportEqualsDeclaration;
declare function assertTSExternalModuleReference(node: object | null | undefined, opts?: object | null): asserts node is TSExternalModuleReference;
declare function assertTSNonNullExpression(node: object | null | undefined, opts?: object | null): asserts node is TSNonNullExpression;
declare function assertTSExportAssignment(node: object | null | undefined, opts?: object | null): asserts node is TSExportAssignment;
declare function assertTSNamespaceExportDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSNamespaceExportDeclaration;
declare function assertTSTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is TSTypeAnnotation;
declare function assertTSTypeParameterInstantiation(node: object | null | undefined, opts?: object | null): asserts node is TSTypeParameterInstantiation;
declare function assertTSTypeParameterDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSTypeParameterDeclaration;
declare function assertTSTypeParameter(node: object | null | undefined, opts?: object | null): asserts node is TSTypeParameter;
declare function assertStandardized(node: object | null | undefined, opts?: object | null): asserts node is Standardized;
declare function assertExpression(node: object | null | undefined, opts?: object | null): asserts node is Expression;
declare function assertBinary(node: object | null | undefined, opts?: object | null): asserts node is Binary;
declare function assertScopable(node: object | null | undefined, opts?: object | null): asserts node is Scopable;
declare function assertBlockParent(node: object | null | undefined, opts?: object | null): asserts node is BlockParent;
declare function assertBlock(node: object | null | undefined, opts?: object | null): asserts node is Block;
declare function assertStatement(node: object | null | undefined, opts?: object | null): asserts node is Statement;
declare function assertTerminatorless(node: object | null | undefined, opts?: object | null): asserts node is Terminatorless;
declare function assertCompletionStatement(node: object | null | undefined, opts?: object | null): asserts node is CompletionStatement;
declare function assertConditional(node: object | null | undefined, opts?: object | null): asserts node is Conditional;
declare function assertLoop(node: object | null | undefined, opts?: object | null): asserts node is Loop;
declare function assertWhile(node: object | null | undefined, opts?: object | null): asserts node is While;
declare function assertExpressionWrapper(node: object | null | undefined, opts?: object | null): asserts node is ExpressionWrapper;
declare function assertFor(node: object | null | undefined, opts?: object | null): asserts node is For;
declare function assertForXStatement(node: object | null | undefined, opts?: object | null): asserts node is ForXStatement;
declare function assertFunction(node: object | null | undefined, opts?: object | null): asserts node is Function;
declare function assertFunctionParent(node: object | null | undefined, opts?: object | null): asserts node is FunctionParent;
declare function assertPureish(node: object | null | undefined, opts?: object | null): asserts node is Pureish;
declare function assertDeclaration(node: object | null | undefined, opts?: object | null): asserts node is Declaration;
declare function assertPatternLike(node: object | null | undefined, opts?: object | null): asserts node is PatternLike;
declare function assertLVal(node: object | null | undefined, opts?: object | null): asserts node is LVal;
declare function assertTSEntityName(node: object | null | undefined, opts?: object | null): asserts node is TSEntityName;
declare function assertLiteral(node: object | null | undefined, opts?: object | null): asserts node is Literal;
declare function assertImmutable(node: object | null | undefined, opts?: object | null): asserts node is Immutable;
declare function assertUserWhitespacable(node: object | null | undefined, opts?: object | null): asserts node is UserWhitespacable;
declare function assertMethod(node: object | null | undefined, opts?: object | null): asserts node is Method;
declare function assertObjectMember(node: object | null | undefined, opts?: object | null): asserts node is ObjectMember;
declare function assertProperty(node: object | null | undefined, opts?: object | null): asserts node is Property;
declare function assertUnaryLike(node: object | null | undefined, opts?: object | null): asserts node is UnaryLike;
declare function assertPattern(node: object | null | undefined, opts?: object | null): asserts node is Pattern;
declare function assertClass(node: object | null | undefined, opts?: object | null): asserts node is Class;
declare function assertImportOrExportDeclaration(node: object | null | undefined, opts?: object | null): asserts node is ImportOrExportDeclaration;
declare function assertExportDeclaration(node: object | null | undefined, opts?: object | null): asserts node is ExportDeclaration;
declare function assertModuleSpecifier(node: object | null | undefined, opts?: object | null): asserts node is ModuleSpecifier;
declare function assertAccessor(node: object | null | undefined, opts?: object | null): asserts node is Accessor;
declare function assertPrivate(node: object | null | undefined, opts?: object | null): asserts node is Private;
declare function assertFlow(node: object | null | undefined, opts?: object | null): asserts node is Flow;
declare function assertFlowType(node: object | null | undefined, opts?: object | null): asserts node is FlowType;
declare function assertFlowBaseAnnotation(node: object | null | undefined, opts?: object | null): asserts node is FlowBaseAnnotation;
declare function assertFlowDeclaration(node: object | null | undefined, opts?: object | null): asserts node is FlowDeclaration;
declare function assertFlowPredicate(node: object | null | undefined, opts?: object | null): asserts node is FlowPredicate;
declare function assertEnumBody(node: object | null | undefined, opts?: object | null): asserts node is EnumBody;
declare function assertEnumMember(node: object | null | undefined, opts?: object | null): asserts node is EnumMember;
declare function assertJSX(node: object | null | undefined, opts?: object | null): asserts node is JSX;
declare function assertMiscellaneous(node: object | null | undefined, opts?: object | null): asserts node is Miscellaneous;
declare function assertTypeScript(node: object | null | undefined, opts?: object | null): asserts node is TypeScript;
declare function assertTSTypeElement(node: object | null | undefined, opts?: object | null): asserts node is TSTypeElement;
declare function assertTSType(node: object | null | undefined, opts?: object | null): asserts node is TSType;
declare function assertTSBaseType(node: object | null | undefined, opts?: object | null): asserts node is TSBaseType;
declare function assertNumberLiteral(node: any, opts: any): void;
declare function assertRegexLiteral(node: any, opts: any): void;
declare function assertRestProperty(node: any, opts: any): void;
declare function assertSpreadProperty(node: any, opts: any): void;
declare function assertModuleDeclaration(node: any, opts: any): void;

declare const _default$4: {
    (type: "string"): StringTypeAnnotation;
    (type: "number"): NumberTypeAnnotation;
    (type: "undefined"): VoidTypeAnnotation;
    (type: "boolean"): BooleanTypeAnnotation;
    (type: "function"): GenericTypeAnnotation;
    (type: "object"): GenericTypeAnnotation;
    (type: "symbol"): GenericTypeAnnotation;
    (type: "bigint"): AnyTypeAnnotation;
};
//# sourceMappingURL=createTypeAnnotationBasedOnTypeof.d.ts.map

/**
 * Takes an array of `types` and flattens them, removing duplicates and
 * returns a `UnionTypeAnnotation` node containing them.
 */
declare function createFlowUnionType<T extends FlowType>(types: [T] | Array<T>): T | UnionTypeAnnotation;

/**
 * Takes an array of `types` and flattens them, removing duplicates and
 * returns a `UnionTypeAnnotation` node containing them.
 */
declare function createTSUnionType(typeAnnotations: Array<TSTypeAnnotation | TSType>): TSType;

declare function arrayExpression(elements?: Array<null | Expression | SpreadElement>): ArrayExpression;
declare function assignmentExpression(operator: string, left: LVal | OptionalMemberExpression, right: Expression): AssignmentExpression;
declare function binaryExpression(operator: "+" | "-" | "/" | "%" | "*" | "**" | "&" | "|" | ">>" | ">>>" | "<<" | "^" | "==" | "===" | "!=" | "!==" | "in" | "instanceof" | ">" | "<" | ">=" | "<=" | "|>", left: Expression | PrivateName, right: Expression): BinaryExpression;
declare function interpreterDirective(value: string): InterpreterDirective;
declare function directive(value: DirectiveLiteral): Directive;
declare function directiveLiteral(value: string): DirectiveLiteral;
declare function blockStatement(body: Array<Statement>, directives?: Array<Directive>): BlockStatement;
declare function breakStatement(label?: Identifier | null): BreakStatement;
declare function callExpression(callee: Expression | Super | V8IntrinsicIdentifier, _arguments: Array<Expression | SpreadElement | ArgumentPlaceholder>): CallExpression;
declare function catchClause(param: Identifier | ArrayPattern | ObjectPattern | null | undefined, body: BlockStatement): CatchClause;
declare function conditionalExpression(test: Expression, consequent: Expression, alternate: Expression): ConditionalExpression;
declare function continueStatement(label?: Identifier | null): ContinueStatement;
declare function debuggerStatement(): DebuggerStatement;
declare function doWhileStatement(test: Expression, body: Statement): DoWhileStatement;
declare function emptyStatement(): EmptyStatement;
declare function expressionStatement(expression: Expression): ExpressionStatement;
declare function file(program: Program, comments?: Array<CommentBlock | CommentLine> | null, tokens?: Array<any> | null): File;
declare function forInStatement(left: VariableDeclaration | LVal, right: Expression, body: Statement): ForInStatement;
declare function forStatement(init: VariableDeclaration | Expression | null | undefined, test: Expression | null | undefined, update: Expression | null | undefined, body: Statement): ForStatement;
declare function functionDeclaration(id: Identifier | null | undefined, params: Array<Identifier | Pattern | RestElement>, body: BlockStatement, generator?: boolean, async?: boolean): FunctionDeclaration;
declare function functionExpression(id: Identifier | null | undefined, params: Array<Identifier | Pattern | RestElement>, body: BlockStatement, generator?: boolean, async?: boolean): FunctionExpression;
declare function identifier(name: string): Identifier;
declare function ifStatement(test: Expression, consequent: Statement, alternate?: Statement | null): IfStatement;
declare function labeledStatement(label: Identifier, body: Statement): LabeledStatement;
declare function stringLiteral(value: string): StringLiteral;
declare function numericLiteral(value: number): NumericLiteral;
declare function nullLiteral(): NullLiteral;
declare function booleanLiteral(value: boolean): BooleanLiteral;
declare function regExpLiteral(pattern: string, flags?: string): RegExpLiteral;
declare function logicalExpression(operator: "||" | "&&" | "??", left: Expression, right: Expression): LogicalExpression;
declare function memberExpression(object: Expression | Super, property: Expression | Identifier | PrivateName, computed?: boolean, optional?: boolean | null): MemberExpression;
declare function newExpression(callee: Expression | Super | V8IntrinsicIdentifier, _arguments: Array<Expression | SpreadElement | ArgumentPlaceholder>): NewExpression;
declare function program(body: Array<Statement>, directives?: Array<Directive>, sourceType?: "script" | "module", interpreter?: InterpreterDirective | null): Program;
declare function objectExpression(properties: Array<ObjectMethod | ObjectProperty | SpreadElement>): ObjectExpression;
declare function objectMethod(kind: "method" | "get" | "set" | undefined, key: Expression | Identifier | StringLiteral | NumericLiteral | BigIntLiteral, params: Array<Identifier | Pattern | RestElement>, body: BlockStatement, computed?: boolean, generator?: boolean, async?: boolean): ObjectMethod;
declare function objectProperty(key: Expression | Identifier | StringLiteral | NumericLiteral | BigIntLiteral | DecimalLiteral | PrivateName, value: Expression | PatternLike, computed?: boolean, shorthand?: boolean, decorators?: Array<Decorator> | null): ObjectProperty;
declare function restElement(argument: LVal): RestElement;
declare function returnStatement(argument?: Expression | null): ReturnStatement;
declare function sequenceExpression(expressions: Array<Expression>): SequenceExpression;
declare function parenthesizedExpression(expression: Expression): ParenthesizedExpression;
declare function switchCase(test: Expression | null | undefined, consequent: Array<Statement>): SwitchCase;
declare function switchStatement(discriminant: Expression, cases: Array<SwitchCase>): SwitchStatement;
declare function thisExpression(): ThisExpression;
declare function throwStatement(argument: Expression): ThrowStatement;
declare function tryStatement(block: BlockStatement, handler?: CatchClause | null, finalizer?: BlockStatement | null): TryStatement;
declare function unaryExpression(operator: "void" | "throw" | "delete" | "!" | "+" | "-" | "~" | "typeof", argument: Expression, prefix?: boolean): UnaryExpression;
declare function updateExpression(operator: "++" | "--", argument: Expression, prefix?: boolean): UpdateExpression;
declare function variableDeclaration(kind: "var" | "let" | "const" | "using" | "await using", declarations: Array<VariableDeclarator>): VariableDeclaration;
declare function variableDeclarator(id: LVal, init?: Expression | null): VariableDeclarator;
declare function whileStatement(test: Expression, body: Statement): WhileStatement;
declare function withStatement(object: Expression, body: Statement): WithStatement;
declare function assignmentPattern(left: Identifier | ObjectPattern | ArrayPattern | MemberExpression | TSAsExpression | TSSatisfiesExpression | TSTypeAssertion | TSNonNullExpression, right: Expression): AssignmentPattern;
declare function arrayPattern(elements: Array<null | PatternLike | LVal>): ArrayPattern;
declare function arrowFunctionExpression(params: Array<Identifier | Pattern | RestElement>, body: BlockStatement | Expression, async?: boolean): ArrowFunctionExpression;
declare function classBody(body: Array<ClassMethod | ClassPrivateMethod | ClassProperty | ClassPrivateProperty | ClassAccessorProperty | TSDeclareMethod | TSIndexSignature | StaticBlock>): ClassBody;
declare function classExpression(id: Identifier | null | undefined, superClass: Expression | null | undefined, body: ClassBody, decorators?: Array<Decorator> | null): ClassExpression;
declare function classDeclaration(id: Identifier | null | undefined, superClass: Expression | null | undefined, body: ClassBody, decorators?: Array<Decorator> | null): ClassDeclaration;
declare function exportAllDeclaration(source: StringLiteral): ExportAllDeclaration;
declare function exportDefaultDeclaration(declaration: TSDeclareFunction | FunctionDeclaration | ClassDeclaration | Expression): ExportDefaultDeclaration;
declare function exportNamedDeclaration(declaration?: Declaration | null, specifiers?: Array<ExportSpecifier | ExportDefaultSpecifier | ExportNamespaceSpecifier>, source?: StringLiteral | null): ExportNamedDeclaration;
declare function exportSpecifier(local: Identifier, exported: Identifier | StringLiteral): ExportSpecifier;
declare function forOfStatement(left: VariableDeclaration | LVal, right: Expression, body: Statement, _await?: boolean): ForOfStatement;
declare function importDeclaration(specifiers: Array<ImportSpecifier | ImportDefaultSpecifier | ImportNamespaceSpecifier>, source: StringLiteral): ImportDeclaration;
declare function importDefaultSpecifier(local: Identifier): ImportDefaultSpecifier;
declare function importNamespaceSpecifier(local: Identifier): ImportNamespaceSpecifier;
declare function importSpecifier(local: Identifier, imported: Identifier | StringLiteral): ImportSpecifier;
declare function importExpression(source: Expression, options?: Expression | null): ImportExpression;
declare function metaProperty(meta: Identifier, property: Identifier): MetaProperty;
declare function classMethod(kind: "get" | "set" | "method" | "constructor" | undefined, key: Identifier | StringLiteral | NumericLiteral | BigIntLiteral | Expression, params: Array<Identifier | Pattern | RestElement | TSParameterProperty>, body: BlockStatement, computed?: boolean, _static?: boolean, generator?: boolean, async?: boolean): ClassMethod;
declare function objectPattern(properties: Array<RestElement | ObjectProperty>): ObjectPattern;
declare function spreadElement(argument: Expression): SpreadElement;
declare function _super(): Super;

declare function taggedTemplateExpression(tag: Expression, quasi: TemplateLiteral): TaggedTemplateExpression;
declare function templateElement(value: {
    raw: string;
    cooked?: string;
}, tail?: boolean): TemplateElement;
declare function templateLiteral(quasis: Array<TemplateElement>, expressions: Array<Expression | TSType>): TemplateLiteral;
declare function yieldExpression(argument?: Expression | null, delegate?: boolean): YieldExpression;
declare function awaitExpression(argument: Expression): AwaitExpression;
declare function _import(): Import;

declare function bigIntLiteral(value: string): BigIntLiteral;
declare function exportNamespaceSpecifier(exported: Identifier): ExportNamespaceSpecifier;
declare function optionalMemberExpression(object: Expression, property: Expression | Identifier, computed: boolean | undefined, optional: boolean): OptionalMemberExpression;
declare function optionalCallExpression(callee: Expression, _arguments: Array<Expression | SpreadElement | ArgumentPlaceholder>, optional: boolean): OptionalCallExpression;
declare function classProperty(key: Identifier | StringLiteral | NumericLiteral | BigIntLiteral | Expression, value?: Expression | null, typeAnnotation?: TypeAnnotation | TSTypeAnnotation | Noop | null, decorators?: Array<Decorator> | null, computed?: boolean, _static?: boolean): ClassProperty;
declare function classAccessorProperty(key: Identifier | StringLiteral | NumericLiteral | BigIntLiteral | Expression | PrivateName, value?: Expression | null, typeAnnotation?: TypeAnnotation | TSTypeAnnotation | Noop | null, decorators?: Array<Decorator> | null, computed?: boolean, _static?: boolean): ClassAccessorProperty;
declare function classPrivateProperty(key: PrivateName, value?: Expression | null, decorators?: Array<Decorator> | null, _static?: boolean): ClassPrivateProperty;
declare function classPrivateMethod(kind: "get" | "set" | "method" | undefined, key: PrivateName, params: Array<Identifier | Pattern | RestElement | TSParameterProperty>, body: BlockStatement, _static?: boolean): ClassPrivateMethod;
declare function privateName(id: Identifier): PrivateName;
declare function staticBlock(body: Array<Statement>): StaticBlock;
declare function anyTypeAnnotation(): AnyTypeAnnotation;
declare function arrayTypeAnnotation(elementType: FlowType): ArrayTypeAnnotation;
declare function booleanTypeAnnotation(): BooleanTypeAnnotation;
declare function booleanLiteralTypeAnnotation(value: boolean): BooleanLiteralTypeAnnotation;
declare function nullLiteralTypeAnnotation(): NullLiteralTypeAnnotation;
declare function classImplements(id: Identifier, typeParameters?: TypeParameterInstantiation | null): ClassImplements;
declare function declareClass(id: Identifier, typeParameters: TypeParameterDeclaration | null | undefined, _extends: Array<InterfaceExtends> | null | undefined, body: ObjectTypeAnnotation): DeclareClass;
declare function declareFunction(id: Identifier): DeclareFunction;
declare function declareInterface(id: Identifier, typeParameters: TypeParameterDeclaration | null | undefined, _extends: Array<InterfaceExtends> | null | undefined, body: ObjectTypeAnnotation): DeclareInterface;
declare function declareModule(id: Identifier | StringLiteral, body: BlockStatement, kind?: "CommonJS" | "ES" | null): DeclareModule;
declare function declareModuleExports(typeAnnotation: TypeAnnotation): DeclareModuleExports;
declare function declareTypeAlias(id: Identifier, typeParameters: TypeParameterDeclaration | null | undefined, right: FlowType): DeclareTypeAlias;
declare function declareOpaqueType(id: Identifier, typeParameters?: TypeParameterDeclaration | null, supertype?: FlowType | null): DeclareOpaqueType;
declare function declareVariable(id: Identifier): DeclareVariable;
declare function declareExportDeclaration(declaration?: Flow | null, specifiers?: Array<ExportSpecifier | ExportNamespaceSpecifier> | null, source?: StringLiteral | null): DeclareExportDeclaration;
declare function declareExportAllDeclaration(source: StringLiteral): DeclareExportAllDeclaration;
declare function declaredPredicate(value: Flow): DeclaredPredicate;
declare function existsTypeAnnotation(): ExistsTypeAnnotation;
declare function functionTypeAnnotation(typeParameters: TypeParameterDeclaration | null | undefined, params: Array<FunctionTypeParam>, rest: FunctionTypeParam | null | undefined, returnType: FlowType): FunctionTypeAnnotation;
declare function functionTypeParam(name: Identifier | null | undefined, typeAnnotation: FlowType): FunctionTypeParam;
declare function genericTypeAnnotation(id: Identifier | QualifiedTypeIdentifier, typeParameters?: TypeParameterInstantiation | null): GenericTypeAnnotation;
declare function inferredPredicate(): InferredPredicate;
declare function interfaceExtends(id: Identifier | QualifiedTypeIdentifier, typeParameters?: TypeParameterInstantiation | null): InterfaceExtends;
declare function interfaceDeclaration(id: Identifier, typeParameters: TypeParameterDeclaration | null | undefined, _extends: Array<InterfaceExtends> | null | undefined, body: ObjectTypeAnnotation): InterfaceDeclaration;
declare function interfaceTypeAnnotation(_extends: Array<InterfaceExtends> | null | undefined, body: ObjectTypeAnnotation): InterfaceTypeAnnotation;
declare function intersectionTypeAnnotation(types: Array<FlowType>): IntersectionTypeAnnotation;
declare function mixedTypeAnnotation(): MixedTypeAnnotation;
declare function emptyTypeAnnotation(): EmptyTypeAnnotation;
declare function nullableTypeAnnotation(typeAnnotation: FlowType): NullableTypeAnnotation;
declare function numberLiteralTypeAnnotation(value: number): NumberLiteralTypeAnnotation;
declare function numberTypeAnnotation(): NumberTypeAnnotation;
declare function objectTypeAnnotation(properties: Array<ObjectTypeProperty | ObjectTypeSpreadProperty>, indexers?: Array<ObjectTypeIndexer>, callProperties?: Array<ObjectTypeCallProperty>, internalSlots?: Array<ObjectTypeInternalSlot>, exact?: boolean): ObjectTypeAnnotation;
declare function objectTypeInternalSlot(id: Identifier, value: FlowType, optional: boolean, _static: boolean, method: boolean): ObjectTypeInternalSlot;
declare function objectTypeCallProperty(value: FlowType): ObjectTypeCallProperty;
declare function objectTypeIndexer(id: Identifier | null | undefined, key: FlowType, value: FlowType, variance?: Variance | null): ObjectTypeIndexer;
declare function objectTypeProperty(key: Identifier | StringLiteral, value: FlowType, variance?: Variance | null): ObjectTypeProperty;
declare function objectTypeSpreadProperty(argument: FlowType): ObjectTypeSpreadProperty;
declare function opaqueType(id: Identifier, typeParameters: TypeParameterDeclaration | null | undefined, supertype: FlowType | null | undefined, impltype: FlowType): OpaqueType;
declare function qualifiedTypeIdentifier(id: Identifier, qualification: Identifier | QualifiedTypeIdentifier): QualifiedTypeIdentifier;
declare function stringLiteralTypeAnnotation(value: string): StringLiteralTypeAnnotation;
declare function stringTypeAnnotation(): StringTypeAnnotation;
declare function symbolTypeAnnotation(): SymbolTypeAnnotation;
declare function thisTypeAnnotation(): ThisTypeAnnotation;
declare function tupleTypeAnnotation(types: Array<FlowType>): TupleTypeAnnotation;
declare function typeofTypeAnnotation(argument: FlowType): TypeofTypeAnnotation;
declare function typeAlias(id: Identifier, typeParameters: TypeParameterDeclaration | null | undefined, right: FlowType): TypeAlias;
declare function typeAnnotation(typeAnnotation: FlowType): TypeAnnotation;
declare function typeCastExpression(expression: Expression, typeAnnotation: TypeAnnotation): TypeCastExpression;
declare function typeParameter(bound?: TypeAnnotation | null, _default?: FlowType | null, variance?: Variance | null): TypeParameter;
declare function typeParameterDeclaration(params: Array<TypeParameter>): TypeParameterDeclaration;
declare function typeParameterInstantiation(params: Array<FlowType>): TypeParameterInstantiation;
declare function unionTypeAnnotation(types: Array<FlowType>): UnionTypeAnnotation;
declare function variance(kind: "minus" | "plus"): Variance;
declare function voidTypeAnnotation(): VoidTypeAnnotation;
declare function enumDeclaration(id: Identifier, body: EnumBooleanBody | EnumNumberBody | EnumStringBody | EnumSymbolBody): EnumDeclaration;
declare function enumBooleanBody(members: Array<EnumBooleanMember>): EnumBooleanBody;
declare function enumNumberBody(members: Array<EnumNumberMember>): EnumNumberBody;
declare function enumStringBody(members: Array<EnumStringMember | EnumDefaultedMember>): EnumStringBody;
declare function enumSymbolBody(members: Array<EnumDefaultedMember>): EnumSymbolBody;
declare function enumBooleanMember(id: Identifier): EnumBooleanMember;
declare function enumNumberMember(id: Identifier, init: NumericLiteral): EnumNumberMember;
declare function enumStringMember(id: Identifier, init: StringLiteral): EnumStringMember;
declare function enumDefaultedMember(id: Identifier): EnumDefaultedMember;
declare function indexedAccessType(objectType: FlowType, indexType: FlowType): IndexedAccessType;
declare function optionalIndexedAccessType(objectType: FlowType, indexType: FlowType): OptionalIndexedAccessType;
declare function jsxAttribute(name: JSXIdentifier | JSXNamespacedName, value?: JSXElement | JSXFragment | StringLiteral | JSXExpressionContainer | null): JSXAttribute;

declare function jsxClosingElement(name: JSXIdentifier | JSXMemberExpression | JSXNamespacedName): JSXClosingElement;

declare function jsxElement(openingElement: JSXOpeningElement, closingElement: JSXClosingElement | null | undefined, children: Array<JSXText | JSXExpressionContainer | JSXSpreadChild | JSXElement | JSXFragment>, selfClosing?: boolean | null): JSXElement;

declare function jsxEmptyExpression(): JSXEmptyExpression;

declare function jsxExpressionContainer(expression: Expression | JSXEmptyExpression): JSXExpressionContainer;

declare function jsxSpreadChild(expression: Expression): JSXSpreadChild;

declare function jsxIdentifier(name: string): JSXIdentifier;

declare function jsxMemberExpression(object: JSXMemberExpression | JSXIdentifier, property: JSXIdentifier): JSXMemberExpression;

declare function jsxNamespacedName(namespace: JSXIdentifier, name: JSXIdentifier): JSXNamespacedName;

declare function jsxOpeningElement(name: JSXIdentifier | JSXMemberExpression | JSXNamespacedName, attributes: Array<JSXAttribute | JSXSpreadAttribute>, selfClosing?: boolean): JSXOpeningElement;

declare function jsxSpreadAttribute(argument: Expression): JSXSpreadAttribute;

declare function jsxText(value: string): JSXText;

declare function jsxFragment(openingFragment: JSXOpeningFragment, closingFragment: JSXClosingFragment, children: Array<JSXText | JSXExpressionContainer | JSXSpreadChild | JSXElement | JSXFragment>): JSXFragment;

declare function jsxOpeningFragment(): JSXOpeningFragment;

declare function jsxClosingFragment(): JSXClosingFragment;

declare function noop(): Noop;
declare function placeholder(expectedNode: "Identifier" | "StringLiteral" | "Expression" | "Statement" | "Declaration" | "BlockStatement" | "ClassBody" | "Pattern", name: Identifier): Placeholder;
declare function v8IntrinsicIdentifier(name: string): V8IntrinsicIdentifier;
declare function argumentPlaceholder(): ArgumentPlaceholder;
declare function bindExpression(object: Expression, callee: Expression): BindExpression;
declare function importAttribute(key: Identifier | StringLiteral, value: StringLiteral): ImportAttribute;
declare function decorator(expression: Expression): Decorator;
declare function doExpression(body: BlockStatement, async?: boolean): DoExpression;
declare function exportDefaultSpecifier(exported: Identifier): ExportDefaultSpecifier;
declare function recordExpression(properties: Array<ObjectProperty | SpreadElement>): RecordExpression;
declare function tupleExpression(elements?: Array<Expression | SpreadElement>): TupleExpression;
declare function decimalLiteral(value: string): DecimalLiteral;
declare function moduleExpression(body: Program): ModuleExpression;
declare function topicReference(): TopicReference;
declare function pipelineTopicExpression(expression: Expression): PipelineTopicExpression;
declare function pipelineBareFunction(callee: Expression): PipelineBareFunction;
declare function pipelinePrimaryTopicReference(): PipelinePrimaryTopicReference;
declare function tsParameterProperty(parameter: Identifier | AssignmentPattern): TSParameterProperty;

declare function tsDeclareFunction(id: Identifier | null | undefined, typeParameters: TSTypeParameterDeclaration | Noop | null | undefined, params: Array<Identifier | Pattern | RestElement>, returnType?: TSTypeAnnotation | Noop | null): TSDeclareFunction;

declare function tsDeclareMethod(decorators: Array<Decorator> | null | undefined, key: Identifier | StringLiteral | NumericLiteral | BigIntLiteral | Expression, typeParameters: TSTypeParameterDeclaration | Noop | null | undefined, params: Array<Identifier | Pattern | RestElement | TSParameterProperty>, returnType?: TSTypeAnnotation | Noop | null): TSDeclareMethod;

declare function tsQualifiedName(left: TSEntityName, right: Identifier): TSQualifiedName;

declare function tsCallSignatureDeclaration(typeParameters: TSTypeParameterDeclaration | null | undefined, parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>, typeAnnotation?: TSTypeAnnotation | null): TSCallSignatureDeclaration;

declare function tsConstructSignatureDeclaration(typeParameters: TSTypeParameterDeclaration | null | undefined, parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>, typeAnnotation?: TSTypeAnnotation | null): TSConstructSignatureDeclaration;

declare function tsPropertySignature(key: Expression, typeAnnotation?: TSTypeAnnotation | null): TSPropertySignature;

declare function tsMethodSignature(key: Expression, typeParameters: TSTypeParameterDeclaration | null | undefined, parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>, typeAnnotation?: TSTypeAnnotation | null): TSMethodSignature;

declare function tsIndexSignature(parameters: Array<Identifier>, typeAnnotation?: TSTypeAnnotation | null): TSIndexSignature;

declare function tsAnyKeyword(): TSAnyKeyword;

declare function tsBooleanKeyword(): TSBooleanKeyword;

declare function tsBigIntKeyword(): TSBigIntKeyword;

declare function tsIntrinsicKeyword(): TSIntrinsicKeyword;

declare function tsNeverKeyword(): TSNeverKeyword;

declare function tsNullKeyword(): TSNullKeyword;

declare function tsNumberKeyword(): TSNumberKeyword;

declare function tsObjectKeyword(): TSObjectKeyword;

declare function tsStringKeyword(): TSStringKeyword;

declare function tsSymbolKeyword(): TSSymbolKeyword;

declare function tsUndefinedKeyword(): TSUndefinedKeyword;

declare function tsUnknownKeyword(): TSUnknownKeyword;

declare function tsVoidKeyword(): TSVoidKeyword;

declare function tsThisType(): TSThisType;

declare function tsFunctionType(typeParameters: TSTypeParameterDeclaration | null | undefined, parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>, typeAnnotation?: TSTypeAnnotation | null): TSFunctionType;

declare function tsConstructorType(typeParameters: TSTypeParameterDeclaration | null | undefined, parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>, typeAnnotation?: TSTypeAnnotation | null): TSConstructorType;

declare function tsTypeReference(typeName: TSEntityName, typeParameters?: TSTypeParameterInstantiation | null): TSTypeReference;

declare function tsTypePredicate(parameterName: Identifier | TSThisType, typeAnnotation?: TSTypeAnnotation | null, asserts?: boolean | null): TSTypePredicate;

declare function tsTypeQuery(exprName: TSEntityName | TSImportType, typeParameters?: TSTypeParameterInstantiation | null): TSTypeQuery;

declare function tsTypeLiteral(members: Array<TSTypeElement>): TSTypeLiteral;

declare function tsArrayType(elementType: TSType): TSArrayType;

declare function tsTupleType(elementTypes: Array<TSType | TSNamedTupleMember>): TSTupleType;

declare function tsOptionalType(typeAnnotation: TSType): TSOptionalType;

declare function tsRestType(typeAnnotation: TSType): TSRestType;

declare function tsNamedTupleMember(label: Identifier, elementType: TSType, optional?: boolean): TSNamedTupleMember;

declare function tsUnionType(types: Array<TSType>): TSUnionType;

declare function tsIntersectionType(types: Array<TSType>): TSIntersectionType;

declare function tsConditionalType(checkType: TSType, extendsType: TSType, trueType: TSType, falseType: TSType): TSConditionalType;

declare function tsInferType(typeParameter: TSTypeParameter): TSInferType;

declare function tsParenthesizedType(typeAnnotation: TSType): TSParenthesizedType;

declare function tsTypeOperator(typeAnnotation: TSType): TSTypeOperator;

declare function tsIndexedAccessType(objectType: TSType, indexType: TSType): TSIndexedAccessType;

declare function tsMappedType(typeParameter: TSTypeParameter, typeAnnotation?: TSType | null, nameType?: TSType | null): TSMappedType;

declare function tsLiteralType(literal: NumericLiteral | StringLiteral | BooleanLiteral | BigIntLiteral | TemplateLiteral | UnaryExpression): TSLiteralType;

declare function tsExpressionWithTypeArguments(expression: TSEntityName, typeParameters?: TSTypeParameterInstantiation | null): TSExpressionWithTypeArguments;

declare function tsInterfaceDeclaration(id: Identifier, typeParameters: TSTypeParameterDeclaration | null | undefined, _extends: Array<TSExpressionWithTypeArguments> | null | undefined, body: TSInterfaceBody): TSInterfaceDeclaration;

declare function tsInterfaceBody(body: Array<TSTypeElement>): TSInterfaceBody;

declare function tsTypeAliasDeclaration(id: Identifier, typeParameters: TSTypeParameterDeclaration | null | undefined, typeAnnotation: TSType): TSTypeAliasDeclaration;

declare function tsInstantiationExpression(expression: Expression, typeParameters?: TSTypeParameterInstantiation | null): TSInstantiationExpression;

declare function tsAsExpression(expression: Expression, typeAnnotation: TSType): TSAsExpression;

declare function tsSatisfiesExpression(expression: Expression, typeAnnotation: TSType): TSSatisfiesExpression;

declare function tsTypeAssertion(typeAnnotation: TSType, expression: Expression): TSTypeAssertion;

declare function tsEnumDeclaration(id: Identifier, members: Array<TSEnumMember>): TSEnumDeclaration;

declare function tsEnumMember(id: Identifier | StringLiteral, initializer?: Expression | null): TSEnumMember;

declare function tsModuleDeclaration(id: Identifier | StringLiteral, body: TSModuleBlock | TSModuleDeclaration): TSModuleDeclaration;

declare function tsModuleBlock(body: Array<Statement>): TSModuleBlock;

declare function tsImportType(argument: StringLiteral, qualifier?: TSEntityName | null, typeParameters?: TSTypeParameterInstantiation | null): TSImportType;

declare function tsImportEqualsDeclaration(id: Identifier, moduleReference: TSEntityName | TSExternalModuleReference): TSImportEqualsDeclaration;

declare function tsExternalModuleReference(expression: StringLiteral): TSExternalModuleReference;

declare function tsNonNullExpression(expression: Expression): TSNonNullExpression;

declare function tsExportAssignment(expression: Expression): TSExportAssignment;

declare function tsNamespaceExportDeclaration(id: Identifier): TSNamespaceExportDeclaration;

declare function tsTypeAnnotation(typeAnnotation: TSType): TSTypeAnnotation;

declare function tsTypeParameterInstantiation(params: Array<TSType>): TSTypeParameterInstantiation;

declare function tsTypeParameterDeclaration(params: Array<TSTypeParameter>): TSTypeParameterDeclaration;

declare function tsTypeParameter(constraint: TSType | null | undefined, _default: TSType | null | undefined, name: string): TSTypeParameter;

/** @deprecated */
declare function NumberLiteral$1(value: number): NumericLiteral;

/** @deprecated */
declare function RegexLiteral$1(pattern: string, flags?: string): RegExpLiteral;

/** @deprecated */
declare function RestProperty$1(argument: LVal): RestElement;

/** @deprecated */
declare function SpreadProperty$1(argument: Expression): SpreadElement;

declare function buildUndefinedNode(): UnaryExpression;

/**
 * Create a clone of a `node` including only properties belonging to the node.
 * If the second parameter is `false`, cloneNode performs a shallow clone.
 * If the third parameter is true, the cloned nodes exclude location properties.
 */
declare function cloneNode<T extends Node>(node: T, deep?: boolean, withoutLoc?: boolean): T;

/**
 * Create a shallow clone of a `node`, including only
 * properties belonging to the node.
 * @deprecated Use t.cloneNode instead.
 */
declare function clone<T extends Node>(node: T): T;

/**
 * Create a deep clone of a `node` and all of it's child nodes
 * including only properties belonging to the node.
 * @deprecated Use t.cloneNode instead.
 */
declare function cloneDeep<T extends Node>(node: T): T;

/**
 * Create a deep clone of a `node` and all of it's child nodes
 * including only properties belonging to the node.
 * excluding `_private` and location properties.
 */
declare function cloneDeepWithoutLoc<T extends Node>(node: T): T;

/**
 * Create a shallow clone of a `node` excluding `_private` and location properties.
 */
declare function cloneWithoutLoc<T extends Node>(node: T): T;

/**
 * Add comment of certain type to a node.
 */
declare function addComment<T extends Node>(node: T, type: CommentTypeShorthand, content: string, line?: boolean): T;

/**
 * Add comments of certain type to a node.
 */
declare function addComments<T extends Node>(node: T, type: CommentTypeShorthand, comments: Array<Comment>): T;

declare function inheritInnerComments(child: Node, parent: Node): void;

declare function inheritLeadingComments(child: Node, parent: Node): void;

/**
 * Inherit all unique comments from `parent` node to `child` node.
 */
declare function inheritsComments<T extends Node>(child: T, parent: Node): T;

declare function inheritTrailingComments(child: Node, parent: Node): void;

/**
 * Remove comment properties from a node.
 */
declare function removeComments<T extends Node>(node: T): T;

declare const STANDARDIZED_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const EXPRESSION_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const BINARY_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const SCOPABLE_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const BLOCKPARENT_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const BLOCK_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const STATEMENT_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const TERMINATORLESS_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const COMPLETIONSTATEMENT_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const CONDITIONAL_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const LOOP_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const WHILE_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const EXPRESSIONWRAPPER_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const FOR_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const FORXSTATEMENT_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const FUNCTION_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const FUNCTIONPARENT_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const PUREISH_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const DECLARATION_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const PATTERNLIKE_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const LVAL_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const TSENTITYNAME_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const LITERAL_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const IMMUTABLE_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const USERWHITESPACABLE_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const METHOD_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const OBJECTMEMBER_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const PROPERTY_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const UNARYLIKE_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const PATTERN_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const CLASS_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const IMPORTOREXPORTDECLARATION_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const EXPORTDECLARATION_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const MODULESPECIFIER_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const ACCESSOR_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const PRIVATE_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const FLOW_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const FLOWTYPE_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const FLOWBASEANNOTATION_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const FLOWDECLARATION_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const FLOWPREDICATE_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const ENUMBODY_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const ENUMMEMBER_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const JSX_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const MISCELLANEOUS_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const TYPESCRIPT_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const TSTYPEELEMENT_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const TSTYPE_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
declare const TSBASETYPE_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];
/**
 * @deprecated migrate to IMPORTOREXPORTDECLARATION_TYPES.
 */
declare const MODULEDECLARATION_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayExpression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionExpression" | "AssignmentExpression" | "AssignmentPattern" | "AwaitExpression" | "BigIntLiteral" | "BinaryExpression" | "BindExpression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallExpression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassExpression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalExpression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareExportAllDeclaration" | "DeclareExportDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleExports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoExpression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "ExistsTypeAnnotation" | "ExportAllDeclaration" | "ExportDefaultDeclaration" | "ExportDefaultSpecifier" | "ExportNamedDeclaration" | "ExportNamespaceSpecifier" | "ExportSpecifier" | "ExpressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionExpression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportExpression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "IndexedAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceExtends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyExpression" | "JSXExpressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberExpression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXText" | "LabeledStatement" | "LogicalExpression" | "MemberExpression" | "MetaProperty" | "MixedTypeAnnotation" | "ModuleExpression" | "NewExpression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectExpression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeIndexer" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallExpression" | "OptionalIndexedAccessType" | "OptionalMemberExpression" | "ParenthesizedExpression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicExpression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordExpression" | "RegExpLiteral" | "RegexLiteral" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceExpression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsExpression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSExportAssignment" | "TSExpressionWithTypeArguments" | "TSExternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSIndexSignature" | "TSIndexedAccessType" | "TSInferType" | "TSInstantiationExpression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceExportDeclaration" | "TSNeverKeyword" | "TSNonNullExpression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesExpression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateExpression" | "TemplateElement" | "TemplateLiteral" | "ThisExpression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleExpression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastExpression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryExpression" | "UnionTypeAnnotation" | "UpdateExpression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldExpression" | keyof Aliases)[];

declare const STATEMENT_OR_BLOCK_KEYS: string[];
declare const FLATTENABLE_KEYS: string[];
declare const FOR_INIT_KEYS: string[];
declare const COMMENT_KEYS: readonly ["leadingComments", "trailingComments", "innerComments"];
declare const LOGICAL_OPERATORS: string[];
declare const UPDATE_OPERATORS: string[];
declare const BOOLEAN_NUMBER_BINARY_OPERATORS: string[];
declare const EQUALITY_BINARY_OPERATORS: string[];
declare const COMPARISON_BINARY_OPERATORS: string[];
declare const BOOLEAN_BINARY_OPERATORS: string[];
declare const NUMBER_BINARY_OPERATORS: string[];
declare const BINARY_OPERATORS: string[];
declare const ASSIGNMENT_OPERATORS: string[];
declare const BOOLEAN_UNARY_OPERATORS: string[];
declare const NUMBER_UNARY_OPERATORS: string[];
declare const STRING_UNARY_OPERATORS: string[];
declare const UNARY_OPERATORS: string[];
declare const INHERIT_KEYS: {
    readonly optional: readonly ["typeAnnotation", "typeParameters", "returnType"];
    readonly force: readonly ["start", "loc", "end"];
};
declare const BLOCK_SCOPED_SYMBOL: unique symbol;
declare const NOT_LOCAL_BINDING: unique symbol;

/**
 * Ensure the `key` (defaults to "body") of a `node` is a block.
 * Casting it to a block if it is not.
 *
 * Returns the BlockStatement
 */
declare function ensureBlock(node: Node, key?: string): BlockStatement;

declare function toBindingIdentifierName(name: string): string;

declare function toBlock(node: Statement | Expression, parent?: Node): BlockStatement;

declare function toComputedKey(node: ObjectMember | ObjectProperty | ClassMethod | ClassProperty | ClassAccessorProperty | MemberExpression | OptionalMemberExpression, key?: Expression | PrivateName): PrivateName | Expression;

declare const _default$3: {
    (node: Function): FunctionExpression;
    (node: Class): ClassExpression;
    (node: ExpressionStatement | Expression | Class | Function): Expression;
};
//# sourceMappingURL=toExpression.d.ts.map

declare function toIdentifier(input: string): string;

declare function toKeyAlias(node: Method | Property, key?: Node): string;
declare namespace toKeyAlias {
    var uid: number;
    var increment: () => number;
}
//# sourceMappingURL=toKeyAlias.d.ts.map

declare const _default$2: {
    (node: AssignmentExpression, ignore?: boolean): ExpressionStatement;
    <T extends Statement>(node: T, ignore: false): T;
    <T extends Statement>(node: T, ignore?: boolean): T | false;
    (node: Class, ignore: false): ClassDeclaration;
    (node: Class, ignore?: boolean): ClassDeclaration | false;
    (node: Function, ignore: false): FunctionDeclaration;
    (node: Function, ignore?: boolean): FunctionDeclaration | false;
    (node: Node, ignore: false): Statement;
    (node: Node, ignore?: boolean): Statement | false;
};
//# sourceMappingURL=toStatement.d.ts.map

declare const _default$1: {
    (value: undefined): Identifier;
    (value: boolean): BooleanLiteral;
    (value: null): NullLiteral;
    (value: string): StringLiteral;
    (value: number): NumericLiteral | BinaryExpression | UnaryExpression;
    (value: RegExp): RegExpLiteral;
    (value: ReadonlyArray<unknown>): ArrayExpression;
    (value: object): ObjectExpression;
    (value: unknown): Expression;
};
//# sourceMappingURL=valueToNode.d.ts.map

declare const VISITOR_KEYS: Record<string, string[]>;
declare const ALIAS_KEYS: Partial<Record<NodeTypesWithoutComment, string[]>>;
declare const FLIPPED_ALIAS_KEYS: Record<string, NodeTypesWithoutComment[]>;
declare const NODE_FIELDS: Record<string, FieldDefinitions>;
declare const BUILDER_KEYS: Record<string, string[]>;
declare const DEPRECATED_KEYS: Record<string, NodeTypesWithoutComment>;
declare const NODE_PARENT_VALIDATIONS: Record<string, Validator>;
declare function getType(val: any): "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function" | "array" | "null";
type NodeTypesWithoutComment = Node["type"] | keyof Aliases;
type NodeTypes = NodeTypesWithoutComment | Comment["type"];
type PrimitiveTypes = ReturnType<typeof getType>;
type FieldDefinitions = {
    [x: string]: FieldOptions;
};
type Validator = ({
    type: PrimitiveTypes;
} | {
    each: Validator;
} | {
    chainOf: Validator[];
} | {
    oneOf: any[];
} | {
    oneOfNodeTypes: NodeTypes[];
} | {
    oneOfNodeOrValueTypes: (NodeTypes | PrimitiveTypes)[];
} | {
    shapeOf: {
        [x: string]: FieldOptions;
    };
} | object) & ((node: Node, key: string, val: any) => void);
type FieldOptions = {
    default?: string | number | boolean | [];
    optional?: boolean;
    deprecated?: boolean;
    validate?: Validator;
};

declare const PLACEHOLDERS: readonly ["Identifier", "StringLiteral", "Expression", "Statement", "Declaration", "BlockStatement", "ClassBody", "Pattern"];
declare const PLACEHOLDERS_ALIAS: Record<string, string[]>;
declare const PLACEHOLDERS_FLIPPED_ALIAS: Record<string, string[]>;

declare const DEPRECATED_ALIASES: {
    ModuleDeclaration: string;
};

declare const TYPES: Array<string>;
//# sourceMappingURL=index.d.ts.map

/**
 * Append a node to a member expression.
 */
declare function appendToMemberExpression(member: MemberExpression, append: MemberExpression["property"], computed?: boolean): MemberExpression;

/**
 * Inherit all contextual properties from `parent` node to `child` node.
 */
declare function inherits<T extends Node | null | undefined>(child: T, parent: Node | null | undefined): T;

/**
 * Prepend a node to a member expression.
 */
declare function prependToMemberExpression<T extends Pick<MemberExpression, "object" | "property">>(member: T, prepend: MemberExpression["object"]): T;

type Options = {
    preserveComments?: boolean;
};
/**
 * Remove all of the _* properties from a node along with the additional metadata
 * properties like location data and raw token data.
 */
declare function removeProperties(node: Node, opts?: Options): void;

declare function removePropertiesDeep<T extends Node>(tree: T, opts?: {
    preserveComments: boolean;
} | null): T;

/**
 * Dedupe type annotations.
 */
declare function removeTypeDuplicates(nodesIn: ReadonlyArray<FlowType | false | null | undefined>): FlowType[];

/**
 * For the given node, generate a map from assignment id names to the identifier node.
 * Unlike getBindingIdentifiers, this function does not handle declarations and imports.
 * @param node the assignment expression or forXstatement
 * @returns an object map
 * @see getBindingIdentifiers
 */
declare function getAssignmentIdentifiers(node: Node | Node[]): Record<string, Identifier>;

declare function getBindingIdentifiers(node: Node, duplicates: true, outerOnly?: boolean, newBindingsOnly?: boolean): Record<string, Array<Identifier>>;
declare function getBindingIdentifiers(node: Node, duplicates?: false, outerOnly?: boolean, newBindingsOnly?: boolean): Record<string, Identifier>;
declare function getBindingIdentifiers(node: Node, duplicates?: boolean, outerOnly?: boolean, newBindingsOnly?: boolean): Record<string, Identifier> | Record<string, Array<Identifier>>;
declare namespace getBindingIdentifiers {
    var keys: KeysMap;
}
/**
 * Mapping of types to their identifier keys.
 */
type KeysMap = {
    [N in Node as N["type"]]?: (keyof N)[];
};
//# sourceMappingURL=getBindingIdentifiers.d.ts.map

declare const _default: {
    (node: Node, duplicates: true): Record<string, Array<Identifier>>;
    (node: Node, duplicates?: false): Record<string, Identifier>;
    (node: Node, duplicates?: boolean): Record<string, Identifier> | Record<string, Array<Identifier>>;
};
//# sourceMappingURL=getOuterBindingIdentifiers.d.ts.map

type GetFunctionNameResult = {
    name: string;
    originalNode: Node;
} | null;
declare function getFunctionName(node: ObjectMethod | ClassMethod): GetFunctionNameResult;
declare function getFunctionName(node: Function | Class, parent: Node): GetFunctionNameResult;

type TraversalAncestors = Array<{
    node: Node;
    key: string;
    index?: number;
}>;
type TraversalHandler<T> = (this: undefined, node: Node, parent: TraversalAncestors, state: T) => void;
type TraversalHandlers<T> = {
    enter?: TraversalHandler<T>;
    exit?: TraversalHandler<T>;
};
/**
 * A general AST traversal with both prefix and postfix handlers, and a
 * state object. Exposes ancestry data to each handler so that more complex
 * AST data can be taken into account.
 */
declare function traverse<T>(node: Node, handlers: TraversalHandler<T> | TraversalHandlers<T>, state?: T): void;

/**
 * A prefix AST traversal implementation meant for simple searching
 * and processing.
 */
declare function traverseFast<Options = object>(node: Node | null | undefined, enter: (node: Node, opts?: Options) => void, opts?: Options): void;

declare function shallowEqual<T extends object>(actual: object, expected: T): actual is T;

declare function is<T extends Node["type"]>(type: T, node: Node | null | undefined, opts?: undefined): node is Extract<Node, {
    type: T;
}>;
declare function is<T extends Node["type"], P extends Extract<Node, {
    type: T;
}>>(type: T, n: Node | null | undefined, required: Partial<P>): n is P;
declare function is<P extends Node>(type: string, node: Node | null | undefined, opts: Partial<P>): node is P;
declare function is(type: string, node: Node | null | undefined, opts?: Partial<Node>): node is Node;

/**
 * Check if the input `node` is a binding identifier.
 */
declare function isBinding(node: Node, parent: Node, grandparent?: Node): boolean;

/**
 * Check if the input `node` is block scoped.
 */
declare function isBlockScoped(node: Node): boolean;

/**
 * Check if the input `node` is definitely immutable.
 */
declare function isImmutable(node: Node): boolean;

/**
 * Check if the input `node` is a `let` variable declaration.
 */
declare function isLet(node: Node): boolean;

declare function isNode(node: any): node is Node;

/**
 * Check if two nodes are equivalent
 */
declare function isNodesEquivalent<T extends Partial<Node>>(a: T, b: any): b is T;

/**
 * Test if a `placeholderType` is a `targetType` or if `targetType` is an alias of `placeholderType`.
 */
declare function isPlaceholderType(placeholderType: string, targetType: string): boolean;

/**
 * Check if the input `node` is a reference to a bound variable.
 */
declare function isReferenced(node: Node, parent: Node, grandparent?: Node): boolean;

/**
 * Check if the input `node` is a scope.
 */
declare function isScope(node: Node, parent: Node): boolean;

/**
 * Check if the input `specifier` is a `default` import or export.
 */
declare function isSpecifierDefault(specifier: ModuleSpecifier): boolean;

declare function isType<T extends Node["type"]>(nodeType: string, targetType: T): nodeType is T;
declare function isType(nodeType: string | null | undefined, targetType: string): boolean;

/**
 * Check if the input `name` is a valid identifier name according to the ES3 specification.
 *
 * Additional ES3 reserved words are
 */
declare function isValidES3Identifier(name: string): boolean;

/**
 * Check if the input `name` is a valid identifier name
 * and isn't a reserved word.
 */
declare function isValidIdentifier(name: string, reserved?: boolean): boolean;

/**
 * Check if the input `node` is a variable declaration.
 */
declare function isVar(node: Node): boolean;

/**
 * Determines whether or not the input node `member` matches the
 * input `match`.
 *
 * For example, given the match `React.createClass` it would match the
 * parsed nodes of `React.createClass` and `React["createClass"]`.
 */
declare function matchesPattern(member: Node | null | undefined, match: string | string[], allowPartial?: boolean): boolean;

declare function validate(node: Node | undefined | null, key: string, val: unknown): void;

/**
 * Build a function that when called will return whether or not the
 * input `node` `MemberExpression` matches the input `match`.
 *
 * For example, given the match `React.createClass` it would match the
 * parsed nodes of `React.createClass` and `React["createClass"]`.
 */
declare function buildMatchMemberExpression(match: string, allowPartial?: boolean): (member: Node) => boolean;

type Opts<Obj> = Partial<{
    [Prop in keyof Obj]: Obj[Prop] extends Node ? Node : Obj[Prop] extends Node[] ? Node[] : Obj[Prop];
}>;
declare function isArrayExpression(node: Node | null | undefined, opts?: Opts<ArrayExpression> | null): node is ArrayExpression;
declare function isAssignmentExpression(node: Node | null | undefined, opts?: Opts<AssignmentExpression> | null): node is AssignmentExpression;
declare function isBinaryExpression(node: Node | null | undefined, opts?: Opts<BinaryExpression> | null): node is BinaryExpression;
declare function isInterpreterDirective(node: Node | null | undefined, opts?: Opts<InterpreterDirective> | null): node is InterpreterDirective;
declare function isDirective(node: Node | null | undefined, opts?: Opts<Directive> | null): node is Directive;
declare function isDirectiveLiteral(node: Node | null | undefined, opts?: Opts<DirectiveLiteral> | null): node is DirectiveLiteral;
declare function isBlockStatement(node: Node | null | undefined, opts?: Opts<BlockStatement> | null): node is BlockStatement;
declare function isBreakStatement(node: Node | null | undefined, opts?: Opts<BreakStatement> | null): node is BreakStatement;
declare function isCallExpression(node: Node | null | undefined, opts?: Opts<CallExpression> | null): node is CallExpression;
declare function isCatchClause(node: Node | null | undefined, opts?: Opts<CatchClause> | null): node is CatchClause;
declare function isConditionalExpression(node: Node | null | undefined, opts?: Opts<ConditionalExpression> | null): node is ConditionalExpression;
declare function isContinueStatement(node: Node | null | undefined, opts?: Opts<ContinueStatement> | null): node is ContinueStatement;
declare function isDebuggerStatement(node: Node | null | undefined, opts?: Opts<DebuggerStatement> | null): node is DebuggerStatement;
declare function isDoWhileStatement(node: Node | null | undefined, opts?: Opts<DoWhileStatement> | null): node is DoWhileStatement;
declare function isEmptyStatement(node: Node | null | undefined, opts?: Opts<EmptyStatement> | null): node is EmptyStatement;
declare function isExpressionStatement(node: Node | null | undefined, opts?: Opts<ExpressionStatement> | null): node is ExpressionStatement;
declare function isFile(node: Node | null | undefined, opts?: Opts<File> | null): node is File;
declare function isForInStatement(node: Node | null | undefined, opts?: Opts<ForInStatement> | null): node is ForInStatement;
declare function isForStatement(node: Node | null | undefined, opts?: Opts<ForStatement> | null): node is ForStatement;
declare function isFunctionDeclaration(node: Node | null | undefined, opts?: Opts<FunctionDeclaration> | null): node is FunctionDeclaration;
declare function isFunctionExpression(node: Node | null | undefined, opts?: Opts<FunctionExpression> | null): node is FunctionExpression;
declare function isIdentifier(node: Node | null | undefined, opts?: Opts<Identifier> | null): node is Identifier;
declare function isIfStatement(node: Node | null | undefined, opts?: Opts<IfStatement> | null): node is IfStatement;
declare function isLabeledStatement(node: Node | null | undefined, opts?: Opts<LabeledStatement> | null): node is LabeledStatement;
declare function isStringLiteral(node: Node | null | undefined, opts?: Opts<StringLiteral> | null): node is StringLiteral;
declare function isNumericLiteral(node: Node | null | undefined, opts?: Opts<NumericLiteral> | null): node is NumericLiteral;
declare function isNullLiteral(node: Node | null | undefined, opts?: Opts<NullLiteral> | null): node is NullLiteral;
declare function isBooleanLiteral(node: Node | null | undefined, opts?: Opts<BooleanLiteral> | null): node is BooleanLiteral;
declare function isRegExpLiteral(node: Node | null | undefined, opts?: Opts<RegExpLiteral> | null): node is RegExpLiteral;
declare function isLogicalExpression(node: Node | null | undefined, opts?: Opts<LogicalExpression> | null): node is LogicalExpression;
declare function isMemberExpression(node: Node | null | undefined, opts?: Opts<MemberExpression> | null): node is MemberExpression;
declare function isNewExpression(node: Node | null | undefined, opts?: Opts<NewExpression> | null): node is NewExpression;
declare function isProgram(node: Node | null | undefined, opts?: Opts<Program> | null): node is Program;
declare function isObjectExpression(node: Node | null | undefined, opts?: Opts<ObjectExpression> | null): node is ObjectExpression;
declare function isObjectMethod(node: Node | null | undefined, opts?: Opts<ObjectMethod> | null): node is ObjectMethod;
declare function isObjectProperty(node: Node | null | undefined, opts?: Opts<ObjectProperty> | null): node is ObjectProperty;
declare function isRestElement(node: Node | null | undefined, opts?: Opts<RestElement> | null): node is RestElement;
declare function isReturnStatement(node: Node | null | undefined, opts?: Opts<ReturnStatement> | null): node is ReturnStatement;
declare function isSequenceExpression(node: Node | null | undefined, opts?: Opts<SequenceExpression> | null): node is SequenceExpression;
declare function isParenthesizedExpression(node: Node | null | undefined, opts?: Opts<ParenthesizedExpression> | null): node is ParenthesizedExpression;
declare function isSwitchCase(node: Node | null | undefined, opts?: Opts<SwitchCase> | null): node is SwitchCase;
declare function isSwitchStatement(node: Node | null | undefined, opts?: Opts<SwitchStatement> | null): node is SwitchStatement;
declare function isThisExpression(node: Node | null | undefined, opts?: Opts<ThisExpression> | null): node is ThisExpression;
declare function isThrowStatement(node: Node | null | undefined, opts?: Opts<ThrowStatement> | null): node is ThrowStatement;
declare function isTryStatement(node: Node | null | undefined, opts?: Opts<TryStatement> | null): node is TryStatement;
declare function isUnaryExpression(node: Node | null | undefined, opts?: Opts<UnaryExpression> | null): node is UnaryExpression;
declare function isUpdateExpression(node: Node | null | undefined, opts?: Opts<UpdateExpression> | null): node is UpdateExpression;
declare function isVariableDeclaration(node: Node | null | undefined, opts?: Opts<VariableDeclaration> | null): node is VariableDeclaration;
declare function isVariableDeclarator(node: Node | null | undefined, opts?: Opts<VariableDeclarator> | null): node is VariableDeclarator;
declare function isWhileStatement(node: Node | null | undefined, opts?: Opts<WhileStatement> | null): node is WhileStatement;
declare function isWithStatement(node: Node | null | undefined, opts?: Opts<WithStatement> | null): node is WithStatement;
declare function isAssignmentPattern(node: Node | null | undefined, opts?: Opts<AssignmentPattern> | null): node is AssignmentPattern;
declare function isArrayPattern(node: Node | null | undefined, opts?: Opts<ArrayPattern> | null): node is ArrayPattern;
declare function isArrowFunctionExpression(node: Node | null | undefined, opts?: Opts<ArrowFunctionExpression> | null): node is ArrowFunctionExpression;
declare function isClassBody(node: Node | null | undefined, opts?: Opts<ClassBody> | null): node is ClassBody;
declare function isClassExpression(node: Node | null | undefined, opts?: Opts<ClassExpression> | null): node is ClassExpression;
declare function isClassDeclaration(node: Node | null | undefined, opts?: Opts<ClassDeclaration> | null): node is ClassDeclaration;
declare function isExportAllDeclaration(node: Node | null | undefined, opts?: Opts<ExportAllDeclaration> | null): node is ExportAllDeclaration;
declare function isExportDefaultDeclaration(node: Node | null | undefined, opts?: Opts<ExportDefaultDeclaration> | null): node is ExportDefaultDeclaration;
declare function isExportNamedDeclaration(node: Node | null | undefined, opts?: Opts<ExportNamedDeclaration> | null): node is ExportNamedDeclaration;
declare function isExportSpecifier(node: Node | null | undefined, opts?: Opts<ExportSpecifier> | null): node is ExportSpecifier;
declare function isForOfStatement(node: Node | null | undefined, opts?: Opts<ForOfStatement> | null): node is ForOfStatement;
declare function isImportDeclaration(node: Node | null | undefined, opts?: Opts<ImportDeclaration> | null): node is ImportDeclaration;
declare function isImportDefaultSpecifier(node: Node | null | undefined, opts?: Opts<ImportDefaultSpecifier> | null): node is ImportDefaultSpecifier;
declare function isImportNamespaceSpecifier(node: Node | null | undefined, opts?: Opts<ImportNamespaceSpecifier> | null): node is ImportNamespaceSpecifier;
declare function isImportSpecifier(node: Node | null | undefined, opts?: Opts<ImportSpecifier> | null): node is ImportSpecifier;
declare function isImportExpression(node: Node | null | undefined, opts?: Opts<ImportExpression> | null): node is ImportExpression;
declare function isMetaProperty(node: Node | null | undefined, opts?: Opts<MetaProperty> | null): node is MetaProperty;
declare function isClassMethod(node: Node | null | undefined, opts?: Opts<ClassMethod> | null): node is ClassMethod;
declare function isObjectPattern(node: Node | null | undefined, opts?: Opts<ObjectPattern> | null): node is ObjectPattern;
declare function isSpreadElement(node: Node | null | undefined, opts?: Opts<SpreadElement> | null): node is SpreadElement;
declare function isSuper(node: Node | null | undefined, opts?: Opts<Super> | null): node is Super;
declare function isTaggedTemplateExpression(node: Node | null | undefined, opts?: Opts<TaggedTemplateExpression> | null): node is TaggedTemplateExpression;
declare function isTemplateElement(node: Node | null | undefined, opts?: Opts<TemplateElement> | null): node is TemplateElement;
declare function isTemplateLiteral(node: Node | null | undefined, opts?: Opts<TemplateLiteral> | null): node is TemplateLiteral;
declare function isYieldExpression(node: Node | null | undefined, opts?: Opts<YieldExpression> | null): node is YieldExpression;
declare function isAwaitExpression(node: Node | null | undefined, opts?: Opts<AwaitExpression> | null): node is AwaitExpression;
declare function isImport(node: Node | null | undefined, opts?: Opts<Import> | null): node is Import;
declare function isBigIntLiteral(node: Node | null | undefined, opts?: Opts<BigIntLiteral> | null): node is BigIntLiteral;
declare function isExportNamespaceSpecifier(node: Node | null | undefined, opts?: Opts<ExportNamespaceSpecifier> | null): node is ExportNamespaceSpecifier;
declare function isOptionalMemberExpression(node: Node | null | undefined, opts?: Opts<OptionalMemberExpression> | null): node is OptionalMemberExpression;
declare function isOptionalCallExpression(node: Node | null | undefined, opts?: Opts<OptionalCallExpression> | null): node is OptionalCallExpression;
declare function isClassProperty(node: Node | null | undefined, opts?: Opts<ClassProperty> | null): node is ClassProperty;
declare function isClassAccessorProperty(node: Node | null | undefined, opts?: Opts<ClassAccessorProperty> | null): node is ClassAccessorProperty;
declare function isClassPrivateProperty(node: Node | null | undefined, opts?: Opts<ClassPrivateProperty> | null): node is ClassPrivateProperty;
declare function isClassPrivateMethod(node: Node | null | undefined, opts?: Opts<ClassPrivateMethod> | null): node is ClassPrivateMethod;
declare function isPrivateName(node: Node | null | undefined, opts?: Opts<PrivateName> | null): node is PrivateName;
declare function isStaticBlock(node: Node | null | undefined, opts?: Opts<StaticBlock> | null): node is StaticBlock;
declare function isAnyTypeAnnotation(node: Node | null | undefined, opts?: Opts<AnyTypeAnnotation> | null): node is AnyTypeAnnotation;
declare function isArrayTypeAnnotation(node: Node | null | undefined, opts?: Opts<ArrayTypeAnnotation> | null): node is ArrayTypeAnnotation;
declare function isBooleanTypeAnnotation(node: Node | null | undefined, opts?: Opts<BooleanTypeAnnotation> | null): node is BooleanTypeAnnotation;
declare function isBooleanLiteralTypeAnnotation(node: Node | null | undefined, opts?: Opts<BooleanLiteralTypeAnnotation> | null): node is BooleanLiteralTypeAnnotation;
declare function isNullLiteralTypeAnnotation(node: Node | null | undefined, opts?: Opts<NullLiteralTypeAnnotation> | null): node is NullLiteralTypeAnnotation;
declare function isClassImplements(node: Node | null | undefined, opts?: Opts<ClassImplements> | null): node is ClassImplements;
declare function isDeclareClass(node: Node | null | undefined, opts?: Opts<DeclareClass> | null): node is DeclareClass;
declare function isDeclareFunction(node: Node | null | undefined, opts?: Opts<DeclareFunction> | null): node is DeclareFunction;
declare function isDeclareInterface(node: Node | null | undefined, opts?: Opts<DeclareInterface> | null): node is DeclareInterface;
declare function isDeclareModule(node: Node | null | undefined, opts?: Opts<DeclareModule> | null): node is DeclareModule;
declare function isDeclareModuleExports(node: Node | null | undefined, opts?: Opts<DeclareModuleExports> | null): node is DeclareModuleExports;
declare function isDeclareTypeAlias(node: Node | null | undefined, opts?: Opts<DeclareTypeAlias> | null): node is DeclareTypeAlias;
declare function isDeclareOpaqueType(node: Node | null | undefined, opts?: Opts<DeclareOpaqueType> | null): node is DeclareOpaqueType;
declare function isDeclareVariable(node: Node | null | undefined, opts?: Opts<DeclareVariable> | null): node is DeclareVariable;
declare function isDeclareExportDeclaration(node: Node | null | undefined, opts?: Opts<DeclareExportDeclaration> | null): node is DeclareExportDeclaration;
declare function isDeclareExportAllDeclaration(node: Node | null | undefined, opts?: Opts<DeclareExportAllDeclaration> | null): node is DeclareExportAllDeclaration;
declare function isDeclaredPredicate(node: Node | null | undefined, opts?: Opts<DeclaredPredicate> | null): node is DeclaredPredicate;
declare function isExistsTypeAnnotation(node: Node | null | undefined, opts?: Opts<ExistsTypeAnnotation> | null): node is ExistsTypeAnnotation;
declare function isFunctionTypeAnnotation(node: Node | null | undefined, opts?: Opts<FunctionTypeAnnotation> | null): node is FunctionTypeAnnotation;
declare function isFunctionTypeParam(node: Node | null | undefined, opts?: Opts<FunctionTypeParam> | null): node is FunctionTypeParam;
declare function isGenericTypeAnnotation(node: Node | null | undefined, opts?: Opts<GenericTypeAnnotation> | null): node is GenericTypeAnnotation;
declare function isInferredPredicate(node: Node | null | undefined, opts?: Opts<InferredPredicate> | null): node is InferredPredicate;
declare function isInterfaceExtends(node: Node | null | undefined, opts?: Opts<InterfaceExtends> | null): node is InterfaceExtends;
declare function isInterfaceDeclaration(node: Node | null | undefined, opts?: Opts<InterfaceDeclaration> | null): node is InterfaceDeclaration;
declare function isInterfaceTypeAnnotation(node: Node | null | undefined, opts?: Opts<InterfaceTypeAnnotation> | null): node is InterfaceTypeAnnotation;
declare function isIntersectionTypeAnnotation(node: Node | null | undefined, opts?: Opts<IntersectionTypeAnnotation> | null): node is IntersectionTypeAnnotation;
declare function isMixedTypeAnnotation(node: Node | null | undefined, opts?: Opts<MixedTypeAnnotation> | null): node is MixedTypeAnnotation;
declare function isEmptyTypeAnnotation(node: Node | null | undefined, opts?: Opts<EmptyTypeAnnotation> | null): node is EmptyTypeAnnotation;
declare function isNullableTypeAnnotation(node: Node | null | undefined, opts?: Opts<NullableTypeAnnotation> | null): node is NullableTypeAnnotation;
declare function isNumberLiteralTypeAnnotation(node: Node | null | undefined, opts?: Opts<NumberLiteralTypeAnnotation> | null): node is NumberLiteralTypeAnnotation;
declare function isNumberTypeAnnotation(node: Node | null | undefined, opts?: Opts<NumberTypeAnnotation> | null): node is NumberTypeAnnotation;
declare function isObjectTypeAnnotation(node: Node | null | undefined, opts?: Opts<ObjectTypeAnnotation> | null): node is ObjectTypeAnnotation;
declare function isObjectTypeInternalSlot(node: Node | null | undefined, opts?: Opts<ObjectTypeInternalSlot> | null): node is ObjectTypeInternalSlot;
declare function isObjectTypeCallProperty(node: Node | null | undefined, opts?: Opts<ObjectTypeCallProperty> | null): node is ObjectTypeCallProperty;
declare function isObjectTypeIndexer(node: Node | null | undefined, opts?: Opts<ObjectTypeIndexer> | null): node is ObjectTypeIndexer;
declare function isObjectTypeProperty(node: Node | null | undefined, opts?: Opts<ObjectTypeProperty> | null): node is ObjectTypeProperty;
declare function isObjectTypeSpreadProperty(node: Node | null | undefined, opts?: Opts<ObjectTypeSpreadProperty> | null): node is ObjectTypeSpreadProperty;
declare function isOpaqueType(node: Node | null | undefined, opts?: Opts<OpaqueType> | null): node is OpaqueType;
declare function isQualifiedTypeIdentifier(node: Node | null | undefined, opts?: Opts<QualifiedTypeIdentifier> | null): node is QualifiedTypeIdentifier;
declare function isStringLiteralTypeAnnotation(node: Node | null | undefined, opts?: Opts<StringLiteralTypeAnnotation> | null): node is StringLiteralTypeAnnotation;
declare function isStringTypeAnnotation(node: Node | null | undefined, opts?: Opts<StringTypeAnnotation> | null): node is StringTypeAnnotation;
declare function isSymbolTypeAnnotation(node: Node | null | undefined, opts?: Opts<SymbolTypeAnnotation> | null): node is SymbolTypeAnnotation;
declare function isThisTypeAnnotation(node: Node | null | undefined, opts?: Opts<ThisTypeAnnotation> | null): node is ThisTypeAnnotation;
declare function isTupleTypeAnnotation(node: Node | null | undefined, opts?: Opts<TupleTypeAnnotation> | null): node is TupleTypeAnnotation;
declare function isTypeofTypeAnnotation(node: Node | null | undefined, opts?: Opts<TypeofTypeAnnotation> | null): node is TypeofTypeAnnotation;
declare function isTypeAlias(node: Node | null | undefined, opts?: Opts<TypeAlias> | null): node is TypeAlias;
declare function isTypeAnnotation(node: Node | null | undefined, opts?: Opts<TypeAnnotation> | null): node is TypeAnnotation;
declare function isTypeCastExpression(node: Node | null | undefined, opts?: Opts<TypeCastExpression> | null): node is TypeCastExpression;
declare function isTypeParameter(node: Node | null | undefined, opts?: Opts<TypeParameter> | null): node is TypeParameter;
declare function isTypeParameterDeclaration(node: Node | null | undefined, opts?: Opts<TypeParameterDeclaration> | null): node is TypeParameterDeclaration;
declare function isTypeParameterInstantiation(node: Node | null | undefined, opts?: Opts<TypeParameterInstantiation> | null): node is TypeParameterInstantiation;
declare function isUnionTypeAnnotation(node: Node | null | undefined, opts?: Opts<UnionTypeAnnotation> | null): node is UnionTypeAnnotation;
declare function isVariance(node: Node | null | undefined, opts?: Opts<Variance> | null): node is Variance;
declare function isVoidTypeAnnotation(node: Node | null | undefined, opts?: Opts<VoidTypeAnnotation> | null): node is VoidTypeAnnotation;
declare function isEnumDeclaration(node: Node | null | undefined, opts?: Opts<EnumDeclaration> | null): node is EnumDeclaration;
declare function isEnumBooleanBody(node: Node | null | undefined, opts?: Opts<EnumBooleanBody> | null): node is EnumBooleanBody;
declare function isEnumNumberBody(node: Node | null | undefined, opts?: Opts<EnumNumberBody> | null): node is EnumNumberBody;
declare function isEnumStringBody(node: Node | null | undefined, opts?: Opts<EnumStringBody> | null): node is EnumStringBody;
declare function isEnumSymbolBody(node: Node | null | undefined, opts?: Opts<EnumSymbolBody> | null): node is EnumSymbolBody;
declare function isEnumBooleanMember(node: Node | null | undefined, opts?: Opts<EnumBooleanMember> | null): node is EnumBooleanMember;
declare function isEnumNumberMember(node: Node | null | undefined, opts?: Opts<EnumNumberMember> | null): node is EnumNumberMember;
declare function isEnumStringMember(node: Node | null | undefined, opts?: Opts<EnumStringMember> | null): node is EnumStringMember;
declare function isEnumDefaultedMember(node: Node | null | undefined, opts?: Opts<EnumDefaultedMember> | null): node is EnumDefaultedMember;
declare function isIndexedAccessType(node: Node | null | undefined, opts?: Opts<IndexedAccessType> | null): node is IndexedAccessType;
declare function isOptionalIndexedAccessType(node: Node | null | undefined, opts?: Opts<OptionalIndexedAccessType> | null): node is OptionalIndexedAccessType;
declare function isJSXAttribute(node: Node | null | undefined, opts?: Opts<JSXAttribute> | null): node is JSXAttribute;
declare function isJSXClosingElement(node: Node | null | undefined, opts?: Opts<JSXClosingElement> | null): node is JSXClosingElement;
declare function isJSXElement(node: Node | null | undefined, opts?: Opts<JSXElement> | null): node is JSXElement;
declare function isJSXEmptyExpression(node: Node | null | undefined, opts?: Opts<JSXEmptyExpression> | null): node is JSXEmptyExpression;
declare function isJSXExpressionContainer(node: Node | null | undefined, opts?: Opts<JSXExpressionContainer> | null): node is JSXExpressionContainer;
declare function isJSXSpreadChild(node: Node | null | undefined, opts?: Opts<JSXSpreadChild> | null): node is JSXSpreadChild;
declare function isJSXIdentifier(node: Node | null | undefined, opts?: Opts<JSXIdentifier> | null): node is JSXIdentifier;
declare function isJSXMemberExpression(node: Node | null | undefined, opts?: Opts<JSXMemberExpression> | null): node is JSXMemberExpression;
declare function isJSXNamespacedName(node: Node | null | undefined, opts?: Opts<JSXNamespacedName> | null): node is JSXNamespacedName;
declare function isJSXOpeningElement(node: Node | null | undefined, opts?: Opts<JSXOpeningElement> | null): node is JSXOpeningElement;
declare function isJSXSpreadAttribute(node: Node | null | undefined, opts?: Opts<JSXSpreadAttribute> | null): node is JSXSpreadAttribute;
declare function isJSXText(node: Node | null | undefined, opts?: Opts<JSXText> | null): node is JSXText;
declare function isJSXFragment(node: Node | null | undefined, opts?: Opts<JSXFragment> | null): node is JSXFragment;
declare function isJSXOpeningFragment(node: Node | null | undefined, opts?: Opts<JSXOpeningFragment> | null): node is JSXOpeningFragment;
declare function isJSXClosingFragment(node: Node | null | undefined, opts?: Opts<JSXClosingFragment> | null): node is JSXClosingFragment;
declare function isNoop(node: Node | null | undefined, opts?: Opts<Noop> | null): node is Noop;
declare function isPlaceholder(node: Node | null | undefined, opts?: Opts<Placeholder> | null): node is Placeholder;
declare function isV8IntrinsicIdentifier(node: Node | null | undefined, opts?: Opts<V8IntrinsicIdentifier> | null): node is V8IntrinsicIdentifier;
declare function isArgumentPlaceholder(node: Node | null | undefined, opts?: Opts<ArgumentPlaceholder> | null): node is ArgumentPlaceholder;
declare function isBindExpression(node: Node | null | undefined, opts?: Opts<BindExpression> | null): node is BindExpression;
declare function isImportAttribute(node: Node | null | undefined, opts?: Opts<ImportAttribute> | null): node is ImportAttribute;
declare function isDecorator(node: Node | null | undefined, opts?: Opts<Decorator> | null): node is Decorator;
declare function isDoExpression(node: Node | null | undefined, opts?: Opts<DoExpression> | null): node is DoExpression;
declare function isExportDefaultSpecifier(node: Node | null | undefined, opts?: Opts<ExportDefaultSpecifier> | null): node is ExportDefaultSpecifier;
declare function isRecordExpression(node: Node | null | undefined, opts?: Opts<RecordExpression> | null): node is RecordExpression;
declare function isTupleExpression(node: Node | null | undefined, opts?: Opts<TupleExpression> | null): node is TupleExpression;
declare function isDecimalLiteral(node: Node | null | undefined, opts?: Opts<DecimalLiteral> | null): node is DecimalLiteral;
declare function isModuleExpression(node: Node | null | undefined, opts?: Opts<ModuleExpression> | null): node is ModuleExpression;
declare function isTopicReference(node: Node | null | undefined, opts?: Opts<TopicReference> | null): node is TopicReference;
declare function isPipelineTopicExpression(node: Node | null | undefined, opts?: Opts<PipelineTopicExpression> | null): node is PipelineTopicExpression;
declare function isPipelineBareFunction(node: Node | null | undefined, opts?: Opts<PipelineBareFunction> | null): node is PipelineBareFunction;
declare function isPipelinePrimaryTopicReference(node: Node | null | undefined, opts?: Opts<PipelinePrimaryTopicReference> | null): node is PipelinePrimaryTopicReference;
declare function isTSParameterProperty(node: Node | null | undefined, opts?: Opts<TSParameterProperty> | null): node is TSParameterProperty;
declare function isTSDeclareFunction(node: Node | null | undefined, opts?: Opts<TSDeclareFunction> | null): node is TSDeclareFunction;
declare function isTSDeclareMethod(node: Node | null | undefined, opts?: Opts<TSDeclareMethod> | null): node is TSDeclareMethod;
declare function isTSQualifiedName(node: Node | null | undefined, opts?: Opts<TSQualifiedName> | null): node is TSQualifiedName;
declare function isTSCallSignatureDeclaration(node: Node | null | undefined, opts?: Opts<TSCallSignatureDeclaration> | null): node is TSCallSignatureDeclaration;
declare function isTSConstructSignatureDeclaration(node: Node | null | undefined, opts?: Opts<TSConstructSignatureDeclaration> | null): node is TSConstructSignatureDeclaration;
declare function isTSPropertySignature(node: Node | null | undefined, opts?: Opts<TSPropertySignature> | null): node is TSPropertySignature;
declare function isTSMethodSignature(node: Node | null | undefined, opts?: Opts<TSMethodSignature> | null): node is TSMethodSignature;
declare function isTSIndexSignature(node: Node | null | undefined, opts?: Opts<TSIndexSignature> | null): node is TSIndexSignature;
declare function isTSAnyKeyword(node: Node | null | undefined, opts?: Opts<TSAnyKeyword> | null): node is TSAnyKeyword;
declare function isTSBooleanKeyword(node: Node | null | undefined, opts?: Opts<TSBooleanKeyword> | null): node is TSBooleanKeyword;
declare function isTSBigIntKeyword(node: Node | null | undefined, opts?: Opts<TSBigIntKeyword> | null): node is TSBigIntKeyword;
declare function isTSIntrinsicKeyword(node: Node | null | undefined, opts?: Opts<TSIntrinsicKeyword> | null): node is TSIntrinsicKeyword;
declare function isTSNeverKeyword(node: Node | null | undefined, opts?: Opts<TSNeverKeyword> | null): node is TSNeverKeyword;
declare function isTSNullKeyword(node: Node | null | undefined, opts?: Opts<TSNullKeyword> | null): node is TSNullKeyword;
declare function isTSNumberKeyword(node: Node | null | undefined, opts?: Opts<TSNumberKeyword> | null): node is TSNumberKeyword;
declare function isTSObjectKeyword(node: Node | null | undefined, opts?: Opts<TSObjectKeyword> | null): node is TSObjectKeyword;
declare function isTSStringKeyword(node: Node | null | undefined, opts?: Opts<TSStringKeyword> | null): node is TSStringKeyword;
declare function isTSSymbolKeyword(node: Node | null | undefined, opts?: Opts<TSSymbolKeyword> | null): node is TSSymbolKeyword;
declare function isTSUndefinedKeyword(node: Node | null | undefined, opts?: Opts<TSUndefinedKeyword> | null): node is TSUndefinedKeyword;
declare function isTSUnknownKeyword(node: Node | null | undefined, opts?: Opts<TSUnknownKeyword> | null): node is TSUnknownKeyword;
declare function isTSVoidKeyword(node: Node | null | undefined, opts?: Opts<TSVoidKeyword> | null): node is TSVoidKeyword;
declare function isTSThisType(node: Node | null | undefined, opts?: Opts<TSThisType> | null): node is TSThisType;
declare function isTSFunctionType(node: Node | null | undefined, opts?: Opts<TSFunctionType> | null): node is TSFunctionType;
declare function isTSConstructorType(node: Node | null | undefined, opts?: Opts<TSConstructorType> | null): node is TSConstructorType;
declare function isTSTypeReference(node: Node | null | undefined, opts?: Opts<TSTypeReference> | null): node is TSTypeReference;
declare function isTSTypePredicate(node: Node | null | undefined, opts?: Opts<TSTypePredicate> | null): node is TSTypePredicate;
declare function isTSTypeQuery(node: Node | null | undefined, opts?: Opts<TSTypeQuery> | null): node is TSTypeQuery;
declare function isTSTypeLiteral(node: Node | null | undefined, opts?: Opts<TSTypeLiteral> | null): node is TSTypeLiteral;
declare function isTSArrayType(node: Node | null | undefined, opts?: Opts<TSArrayType> | null): node is TSArrayType;
declare function isTSTupleType(node: Node | null | undefined, opts?: Opts<TSTupleType> | null): node is TSTupleType;
declare function isTSOptionalType(node: Node | null | undefined, opts?: Opts<TSOptionalType> | null): node is TSOptionalType;
declare function isTSRestType(node: Node | null | undefined, opts?: Opts<TSRestType> | null): node is TSRestType;
declare function isTSNamedTupleMember(node: Node | null | undefined, opts?: Opts<TSNamedTupleMember> | null): node is TSNamedTupleMember;
declare function isTSUnionType(node: Node | null | undefined, opts?: Opts<TSUnionType> | null): node is TSUnionType;
declare function isTSIntersectionType(node: Node | null | undefined, opts?: Opts<TSIntersectionType> | null): node is TSIntersectionType;
declare function isTSConditionalType(node: Node | null | undefined, opts?: Opts<TSConditionalType> | null): node is TSConditionalType;
declare function isTSInferType(node: Node | null | undefined, opts?: Opts<TSInferType> | null): node is TSInferType;
declare function isTSParenthesizedType(node: Node | null | undefined, opts?: Opts<TSParenthesizedType> | null): node is TSParenthesizedType;
declare function isTSTypeOperator(node: Node | null | undefined, opts?: Opts<TSTypeOperator> | null): node is TSTypeOperator;
declare function isTSIndexedAccessType(node: Node | null | undefined, opts?: Opts<TSIndexedAccessType> | null): node is TSIndexedAccessType;
declare function isTSMappedType(node: Node | null | undefined, opts?: Opts<TSMappedType> | null): node is TSMappedType;
declare function isTSLiteralType(node: Node | null | undefined, opts?: Opts<TSLiteralType> | null): node is TSLiteralType;
declare function isTSExpressionWithTypeArguments(node: Node | null | undefined, opts?: Opts<TSExpressionWithTypeArguments> | null): node is TSExpressionWithTypeArguments;
declare function isTSInterfaceDeclaration(node: Node | null | undefined, opts?: Opts<TSInterfaceDeclaration> | null): node is TSInterfaceDeclaration;
declare function isTSInterfaceBody(node: Node | null | undefined, opts?: Opts<TSInterfaceBody> | null): node is TSInterfaceBody;
declare function isTSTypeAliasDeclaration(node: Node | null | undefined, opts?: Opts<TSTypeAliasDeclaration> | null): node is TSTypeAliasDeclaration;
declare function isTSInstantiationExpression(node: Node | null | undefined, opts?: Opts<TSInstantiationExpression> | null): node is TSInstantiationExpression;
declare function isTSAsExpression(node: Node | null | undefined, opts?: Opts<TSAsExpression> | null): node is TSAsExpression;
declare function isTSSatisfiesExpression(node: Node | null | undefined, opts?: Opts<TSSatisfiesExpression> | null): node is TSSatisfiesExpression;
declare function isTSTypeAssertion(node: Node | null | undefined, opts?: Opts<TSTypeAssertion> | null): node is TSTypeAssertion;
declare function isTSEnumDeclaration(node: Node | null | undefined, opts?: Opts<TSEnumDeclaration> | null): node is TSEnumDeclaration;
declare function isTSEnumMember(node: Node | null | undefined, opts?: Opts<TSEnumMember> | null): node is TSEnumMember;
declare function isTSModuleDeclaration(node: Node | null | undefined, opts?: Opts<TSModuleDeclaration> | null): node is TSModuleDeclaration;
declare function isTSModuleBlock(node: Node | null | undefined, opts?: Opts<TSModuleBlock> | null): node is TSModuleBlock;
declare function isTSImportType(node: Node | null | undefined, opts?: Opts<TSImportType> | null): node is TSImportType;
declare function isTSImportEqualsDeclaration(node: Node | null | undefined, opts?: Opts<TSImportEqualsDeclaration> | null): node is TSImportEqualsDeclaration;
declare function isTSExternalModuleReference(node: Node | null | undefined, opts?: Opts<TSExternalModuleReference> | null): node is TSExternalModuleReference;
declare function isTSNonNullExpression(node: Node | null | undefined, opts?: Opts<TSNonNullExpression> | null): node is TSNonNullExpression;
declare function isTSExportAssignment(node: Node | null | undefined, opts?: Opts<TSExportAssignment> | null): node is TSExportAssignment;
declare function isTSNamespaceExportDeclaration(node: Node | null | undefined, opts?: Opts<TSNamespaceExportDeclaration> | null): node is TSNamespaceExportDeclaration;
declare function isTSTypeAnnotation(node: Node | null | undefined, opts?: Opts<TSTypeAnnotation> | null): node is TSTypeAnnotation;
declare function isTSTypeParameterInstantiation(node: Node | null | undefined, opts?: Opts<TSTypeParameterInstantiation> | null): node is TSTypeParameterInstantiation;
declare function isTSTypeParameterDeclaration(node: Node | null | undefined, opts?: Opts<TSTypeParameterDeclaration> | null): node is TSTypeParameterDeclaration;
declare function isTSTypeParameter(node: Node | null | undefined, opts?: Opts<TSTypeParameter> | null): node is TSTypeParameter;
declare function isStandardized(node: Node | null | undefined, opts?: Opts<Standardized> | null): node is Standardized;
declare function isExpression(node: Node | null | undefined, opts?: Opts<Expression> | null): node is Expression;
declare function isBinary(node: Node | null | undefined, opts?: Opts<Binary> | null): node is Binary;
declare function isScopable(node: Node | null | undefined, opts?: Opts<Scopable> | null): node is Scopable;
declare function isBlockParent(node: Node | null | undefined, opts?: Opts<BlockParent> | null): node is BlockParent;
declare function isBlock(node: Node | null | undefined, opts?: Opts<Block> | null): node is Block;
declare function isStatement(node: Node | null | undefined, opts?: Opts<Statement> | null): node is Statement;
declare function isTerminatorless(node: Node | null | undefined, opts?: Opts<Terminatorless> | null): node is Terminatorless;
declare function isCompletionStatement(node: Node | null | undefined, opts?: Opts<CompletionStatement> | null): node is CompletionStatement;
declare function isConditional(node: Node | null | undefined, opts?: Opts<Conditional> | null): node is Conditional;
declare function isLoop(node: Node | null | undefined, opts?: Opts<Loop> | null): node is Loop;
declare function isWhile(node: Node | null | undefined, opts?: Opts<While> | null): node is While;
declare function isExpressionWrapper(node: Node | null | undefined, opts?: Opts<ExpressionWrapper> | null): node is ExpressionWrapper;
declare function isFor(node: Node | null | undefined, opts?: Opts<For> | null): node is For;
declare function isForXStatement(node: Node | null | undefined, opts?: Opts<ForXStatement> | null): node is ForXStatement;
declare function isFunction(node: Node | null | undefined, opts?: Opts<Function> | null): node is Function;
declare function isFunctionParent(node: Node | null | undefined, opts?: Opts<FunctionParent> | null): node is FunctionParent;
declare function isPureish(node: Node | null | undefined, opts?: Opts<Pureish> | null): node is Pureish;
declare function isDeclaration(node: Node | null | undefined, opts?: Opts<Declaration> | null): node is Declaration;
declare function isPatternLike(node: Node | null | undefined, opts?: Opts<PatternLike> | null): node is PatternLike;
declare function isLVal(node: Node | null | undefined, opts?: Opts<LVal> | null): node is LVal;
declare function isTSEntityName(node: Node | null | undefined, opts?: Opts<TSEntityName> | null): node is TSEntityName;
declare function isLiteral(node: Node | null | undefined, opts?: Opts<Literal> | null): node is Literal;
declare function isUserWhitespacable(node: Node | null | undefined, opts?: Opts<UserWhitespacable> | null): node is UserWhitespacable;
declare function isMethod(node: Node | null | undefined, opts?: Opts<Method> | null): node is Method;
declare function isObjectMember(node: Node | null | undefined, opts?: Opts<ObjectMember> | null): node is ObjectMember;
declare function isProperty(node: Node | null | undefined, opts?: Opts<Property> | null): node is Property;
declare function isUnaryLike(node: Node | null | undefined, opts?: Opts<UnaryLike> | null): node is UnaryLike;
declare function isPattern(node: Node | null | undefined, opts?: Opts<Pattern> | null): node is Pattern;
declare function isClass(node: Node | null | undefined, opts?: Opts<Class> | null): node is Class;
declare function isImportOrExportDeclaration(node: Node | null | undefined, opts?: Opts<ImportOrExportDeclaration> | null): node is ImportOrExportDeclaration;
declare function isExportDeclaration(node: Node | null | undefined, opts?: Opts<ExportDeclaration> | null): node is ExportDeclaration;
declare function isModuleSpecifier(node: Node | null | undefined, opts?: Opts<ModuleSpecifier> | null): node is ModuleSpecifier;
declare function isAccessor(node: Node | null | undefined, opts?: Opts<Accessor> | null): node is Accessor;
declare function isPrivate(node: Node | null | undefined, opts?: Opts<Private> | null): node is Private;
declare function isFlow(node: Node | null | undefined, opts?: Opts<Flow> | null): node is Flow;
declare function isFlowType(node: Node | null | undefined, opts?: Opts<FlowType> | null): node is FlowType;
declare function isFlowBaseAnnotation(node: Node | null | undefined, opts?: Opts<FlowBaseAnnotation> | null): node is FlowBaseAnnotation;
declare function isFlowDeclaration(node: Node | null | undefined, opts?: Opts<FlowDeclaration> | null): node is FlowDeclaration;
declare function isFlowPredicate(node: Node | null | undefined, opts?: Opts<FlowPredicate> | null): node is FlowPredicate;
declare function isEnumBody(node: Node | null | undefined, opts?: Opts<EnumBody> | null): node is EnumBody;
declare function isEnumMember(node: Node | null | undefined, opts?: Opts<EnumMember> | null): node is EnumMember;
declare function isJSX(node: Node | null | undefined, opts?: Opts<JSX> | null): node is JSX;
declare function isMiscellaneous(node: Node | null | undefined, opts?: Opts<Miscellaneous> | null): node is Miscellaneous;
declare function isTypeScript(node: Node | null | undefined, opts?: Opts<TypeScript> | null): node is TypeScript;
declare function isTSTypeElement(node: Node | null | undefined, opts?: Opts<TSTypeElement> | null): node is TSTypeElement;
declare function isTSType(node: Node | null | undefined, opts?: Opts<TSType> | null): node is TSType;
declare function isTSBaseType(node: Node | null | undefined, opts?: Opts<TSBaseType> | null): node is TSBaseType;
/**
 * @deprecated Use `isNumericLiteral`
 */
declare function isNumberLiteral(node: Node | null | undefined, opts?: Opts<NumberLiteral> | null): boolean;
/**
 * @deprecated Use `isRegExpLiteral`
 */
declare function isRegexLiteral(node: Node | null | undefined, opts?: Opts<RegexLiteral> | null): boolean;
/**
 * @deprecated Use `isRestElement`
 */
declare function isRestProperty(node: Node | null | undefined, opts?: Opts<RestProperty> | null): boolean;
/**
 * @deprecated Use `isSpreadElement`
 */
declare function isSpreadProperty(node: Node | null | undefined, opts?: Opts<SpreadProperty> | null): boolean;
/**
 * @deprecated Use `isImportOrExportDeclaration`
 */
declare function isModuleDeclaration(node: Node | null | undefined, opts?: Opts<ModuleDeclaration> | null): node is ImportOrExportDeclaration;

interface BaseComment {
    value: string;
    start?: number;
    end?: number;
    loc?: SourceLocation;
    ignore?: boolean;
    type: "CommentBlock" | "CommentLine";
}
interface Position {
    line: number;
    column: number;
    index: number;
}
interface CommentBlock extends BaseComment {
    type: "CommentBlock";
}
interface CommentLine extends BaseComment {
    type: "CommentLine";
}
type Comment = CommentBlock | CommentLine;
interface SourceLocation {
    start: Position;
    end: Position;
    filename: string;
    identifierName: string | undefined | null;
}
interface BaseNode {
    type: Node["type"];
    leadingComments?: Comment[] | null;
    innerComments?: Comment[] | null;
    trailingComments?: Comment[] | null;
    start?: number | null;
    end?: number | null;
    loc?: SourceLocation | null;
    range?: [number, number];
    extra?: Record<string, unknown>;
}
type CommentTypeShorthand = "leading" | "inner" | "trailing";
type Node = AnyTypeAnnotation | ArgumentPlaceholder | ArrayExpression | ArrayPattern | ArrayTypeAnnotation | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BigIntLiteral | BinaryExpression | BindExpression | BlockStatement | BooleanLiteral | BooleanLiteralTypeAnnotation | BooleanTypeAnnotation | BreakStatement | CallExpression | CatchClause | ClassAccessorProperty | ClassBody | ClassDeclaration | ClassExpression | ClassImplements | ClassMethod | ClassPrivateMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | ContinueStatement | DebuggerStatement | DecimalLiteral | DeclareClass | DeclareExportAllDeclaration | DeclareExportDeclaration | DeclareFunction | DeclareInterface | DeclareModule | DeclareModuleExports | DeclareOpaqueType | DeclareTypeAlias | DeclareVariable | DeclaredPredicate | Decorator | Directive | DirectiveLiteral | DoExpression | DoWhileStatement | EmptyStatement | EmptyTypeAnnotation | EnumBooleanBody | EnumBooleanMember | EnumDeclaration | EnumDefaultedMember | EnumNumberBody | EnumNumberMember | EnumStringBody | EnumStringMember | EnumSymbolBody | ExistsTypeAnnotation | ExportAllDeclaration | ExportDefaultDeclaration | ExportDefaultSpecifier | ExportNamedDeclaration | ExportNamespaceSpecifier | ExportSpecifier | ExpressionStatement | File | ForInStatement | ForOfStatement | ForStatement | FunctionDeclaration | FunctionExpression | FunctionTypeAnnotation | FunctionTypeParam | GenericTypeAnnotation | Identifier | IfStatement | Import | ImportAttribute | ImportDeclaration | ImportDefaultSpecifier | ImportExpression | ImportNamespaceSpecifier | ImportSpecifier | IndexedAccessType | InferredPredicate | InterfaceDeclaration | InterfaceExtends | InterfaceTypeAnnotation | InterpreterDirective | IntersectionTypeAnnotation | JSXAttribute | JSXClosingElement | JSXClosingFragment | JSXElement | JSXEmptyExpression | JSXExpressionContainer | JSXFragment | JSXIdentifier | JSXMemberExpression | JSXNamespacedName | JSXOpeningElement | JSXOpeningFragment | JSXSpreadAttribute | JSXSpreadChild | JSXText | LabeledStatement | LogicalExpression | MemberExpression | MetaProperty | MixedTypeAnnotation | ModuleExpression | NewExpression | Noop | NullLiteral | NullLiteralTypeAnnotation | NullableTypeAnnotation | NumberLiteral | NumberLiteralTypeAnnotation | NumberTypeAnnotation | NumericLiteral | ObjectExpression | ObjectMethod | ObjectPattern | ObjectProperty | ObjectTypeAnnotation | ObjectTypeCallProperty | ObjectTypeIndexer | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalCallExpression | OptionalIndexedAccessType | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelinePrimaryTopicReference | PipelineTopicExpression | Placeholder | PrivateName | Program | QualifiedTypeIdentifier | RecordExpression | RegExpLiteral | RegexLiteral | RestElement | RestProperty | ReturnStatement | SequenceExpression | SpreadElement | SpreadProperty | StaticBlock | StringLiteral | StringLiteralTypeAnnotation | StringTypeAnnotation | Super | SwitchCase | SwitchStatement | SymbolTypeAnnotation | TSAnyKeyword | TSArrayType | TSAsExpression | TSBigIntKeyword | TSBooleanKeyword | TSCallSignatureDeclaration | TSConditionalType | TSConstructSignatureDeclaration | TSConstructorType | TSDeclareFunction | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSExpressionWithTypeArguments | TSExternalModuleReference | TSFunctionType | TSImportEqualsDeclaration | TSImportType | TSIndexSignature | TSIndexedAccessType | TSInferType | TSInstantiationExpression | TSInterfaceBody | TSInterfaceDeclaration | TSIntersectionType | TSIntrinsicKeyword | TSLiteralType | TSMappedType | TSMethodSignature | TSModuleBlock | TSModuleDeclaration | TSNamedTupleMember | TSNamespaceExportDeclaration | TSNeverKeyword | TSNonNullExpression | TSNullKeyword | TSNumberKeyword | TSObjectKeyword | TSOptionalType | TSParameterProperty | TSParenthesizedType | TSPropertySignature | TSQualifiedName | TSRestType | TSSatisfiesExpression | TSStringKeyword | TSSymbolKeyword | TSThisType | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeLiteral | TSTypeOperator | TSTypeParameter | TSTypeParameterDeclaration | TSTypeParameterInstantiation | TSTypePredicate | TSTypeQuery | TSTypeReference | TSUndefinedKeyword | TSUnionType | TSUnknownKeyword | TSVoidKeyword | TaggedTemplateExpression | TemplateElement | TemplateLiteral | ThisExpression | ThisTypeAnnotation | ThrowStatement | TopicReference | TryStatement | TupleExpression | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeCastExpression | TypeParameter | TypeParameterDeclaration | TypeParameterInstantiation | TypeofTypeAnnotation | UnaryExpression | UnionTypeAnnotation | UpdateExpression | V8IntrinsicIdentifier | VariableDeclaration | VariableDeclarator | Variance | VoidTypeAnnotation | WhileStatement | WithStatement | YieldExpression;
interface ArrayExpression extends BaseNode {
    type: "ArrayExpression";
    elements: Array<null | Expression | SpreadElement>;
}
interface AssignmentExpression extends BaseNode {
    type: "AssignmentExpression";
    operator: string;
    left: LVal | OptionalMemberExpression;
    right: Expression;
}
interface BinaryExpression extends BaseNode {
    type: "BinaryExpression";
    operator: "+" | "-" | "/" | "%" | "*" | "**" | "&" | "|" | ">>" | ">>>" | "<<" | "^" | "==" | "===" | "!=" | "!==" | "in" | "instanceof" | ">" | "<" | ">=" | "<=" | "|>";
    left: Expression | PrivateName;
    right: Expression;
}
interface InterpreterDirective extends BaseNode {
    type: "InterpreterDirective";
    value: string;
}
interface Directive extends BaseNode {
    type: "Directive";
    value: DirectiveLiteral;
}
interface DirectiveLiteral extends BaseNode {
    type: "DirectiveLiteral";
    value: string;
}
interface BlockStatement extends BaseNode {
    type: "BlockStatement";
    body: Array<Statement>;
    directives: Array<Directive>;
}
interface BreakStatement extends BaseNode {
    type: "BreakStatement";
    label?: Identifier | null;
}
interface CallExpression extends BaseNode {
    type: "CallExpression";
    callee: Expression | Super | V8IntrinsicIdentifier;
    arguments: Array<Expression | SpreadElement | ArgumentPlaceholder>;
    optional?: boolean | null;
    typeArguments?: TypeParameterInstantiation | null;
    typeParameters?: TSTypeParameterInstantiation | null;
}
interface CatchClause extends BaseNode {
    type: "CatchClause";
    param?: Identifier | ArrayPattern | ObjectPattern | null;
    body: BlockStatement;
}
interface ConditionalExpression extends BaseNode {
    type: "ConditionalExpression";
    test: Expression;
    consequent: Expression;
    alternate: Expression;
}
interface ContinueStatement extends BaseNode {
    type: "ContinueStatement";
    label?: Identifier | null;
}
interface DebuggerStatement extends BaseNode {
    type: "DebuggerStatement";
}
interface DoWhileStatement extends BaseNode {
    type: "DoWhileStatement";
    test: Expression;
    body: Statement;
}
interface EmptyStatement extends BaseNode {
    type: "EmptyStatement";
}
interface ExpressionStatement extends BaseNode {
    type: "ExpressionStatement";
    expression: Expression;
}
interface File extends BaseNode {
    type: "File";
    program: Program;
    comments?: Array<CommentBlock | CommentLine> | null;
    tokens?: Array<any> | null;
}
interface ForInStatement extends BaseNode {
    type: "ForInStatement";
    left: VariableDeclaration | LVal;
    right: Expression;
    body: Statement;
}
interface ForStatement extends BaseNode {
    type: "ForStatement";
    init?: VariableDeclaration | Expression | null;
    test?: Expression | null;
    update?: Expression | null;
    body: Statement;
}
interface FunctionDeclaration extends BaseNode {
    type: "FunctionDeclaration";
    id?: Identifier | null;
    params: Array<Identifier | Pattern | RestElement>;
    body: BlockStatement;
    generator: boolean;
    async: boolean;
    declare?: boolean | null;
    predicate?: DeclaredPredicate | InferredPredicate | null;
    returnType?: TypeAnnotation | TSTypeAnnotation | Noop | null;
    typeParameters?: TypeParameterDeclaration | TSTypeParameterDeclaration | Noop | null;
}
interface FunctionExpression extends BaseNode {
    type: "FunctionExpression";
    id?: Identifier | null;
    params: Array<Identifier | Pattern | RestElement>;
    body: BlockStatement;
    generator: boolean;
    async: boolean;
    predicate?: DeclaredPredicate | InferredPredicate | null;
    returnType?: TypeAnnotation | TSTypeAnnotation | Noop | null;
    typeParameters?: TypeParameterDeclaration | TSTypeParameterDeclaration | Noop | null;
}
interface Identifier extends BaseNode {
    type: "Identifier";
    name: string;
    decorators?: Array<Decorator> | null;
    optional?: boolean | null;
    typeAnnotation?: TypeAnnotation | TSTypeAnnotation | Noop | null;
}
interface IfStatement extends BaseNode {
    type: "IfStatement";
    test: Expression;
    consequent: Statement;
    alternate?: Statement | null;
}
interface LabeledStatement extends BaseNode {
    type: "LabeledStatement";
    label: Identifier;
    body: Statement;
}
interface StringLiteral extends BaseNode {
    type: "StringLiteral";
    value: string;
}
interface NumericLiteral extends BaseNode {
    type: "NumericLiteral";
    value: number;
}
/**
 * @deprecated Use `NumericLiteral`
 */
interface NumberLiteral extends BaseNode {
    type: "NumberLiteral";
    value: number;
}
interface NullLiteral extends BaseNode {
    type: "NullLiteral";
}
interface BooleanLiteral extends BaseNode {
    type: "BooleanLiteral";
    value: boolean;
}
interface RegExpLiteral extends BaseNode {
    type: "RegExpLiteral";
    pattern: string;
    flags: string;
}
/**
 * @deprecated Use `RegExpLiteral`
 */
interface RegexLiteral extends BaseNode {
    type: "RegexLiteral";
    pattern: string;
    flags: string;
}
interface LogicalExpression extends BaseNode {
    type: "LogicalExpression";
    operator: "||" | "&&" | "??";
    left: Expression;
    right: Expression;
}
interface MemberExpression extends BaseNode {
    type: "MemberExpression";
    object: Expression | Super;
    property: Expression | Identifier | PrivateName;
    computed: boolean;
    optional?: boolean | null;
}
interface NewExpression extends BaseNode {
    type: "NewExpression";
    callee: Expression | Super | V8IntrinsicIdentifier;
    arguments: Array<Expression | SpreadElement | ArgumentPlaceholder>;
    optional?: boolean | null;
    typeArguments?: TypeParameterInstantiation | null;
    typeParameters?: TSTypeParameterInstantiation | null;
}
interface Program extends BaseNode {
    type: "Program";
    body: Array<Statement>;
    directives: Array<Directive>;
    sourceType: "script" | "module";
    interpreter?: InterpreterDirective | null;
}
interface ObjectExpression extends BaseNode {
    type: "ObjectExpression";
    properties: Array<ObjectMethod | ObjectProperty | SpreadElement>;
}
interface ObjectMethod extends BaseNode {
    type: "ObjectMethod";
    kind: "method" | "get" | "set";
    key: Expression | Identifier | StringLiteral | NumericLiteral | BigIntLiteral;
    params: Array<Identifier | Pattern | RestElement>;
    body: BlockStatement;
    computed: boolean;
    generator: boolean;
    async: boolean;
    decorators?: Array<Decorator> | null;
    returnType?: TypeAnnotation | TSTypeAnnotation | Noop | null;
    typeParameters?: TypeParameterDeclaration | TSTypeParameterDeclaration | Noop | null;
}
interface ObjectProperty extends BaseNode {
    type: "ObjectProperty";
    key: Expression | Identifier | StringLiteral | NumericLiteral | BigIntLiteral | DecimalLiteral | PrivateName;
    value: Expression | PatternLike;
    computed: boolean;
    shorthand: boolean;
    decorators?: Array<Decorator> | null;
}
interface RestElement extends BaseNode {
    type: "RestElement";
    argument: LVal;
    decorators?: Array<Decorator> | null;
    optional?: boolean | null;
    typeAnnotation?: TypeAnnotation | TSTypeAnnotation | Noop | null;
}
/**
 * @deprecated Use `RestElement`
 */
interface RestProperty extends BaseNode {
    type: "RestProperty";
    argument: LVal;
    decorators?: Array<Decorator> | null;
    optional?: boolean | null;
    typeAnnotation?: TypeAnnotation | TSTypeAnnotation | Noop | null;
}
interface ReturnStatement extends BaseNode {
    type: "ReturnStatement";
    argument?: Expression | null;
}
interface SequenceExpression extends BaseNode {
    type: "SequenceExpression";
    expressions: Array<Expression>;
}
interface ParenthesizedExpression extends BaseNode {
    type: "ParenthesizedExpression";
    expression: Expression;
}
interface SwitchCase extends BaseNode {
    type: "SwitchCase";
    test?: Expression | null;
    consequent: Array<Statement>;
}
interface SwitchStatement extends BaseNode {
    type: "SwitchStatement";
    discriminant: Expression;
    cases: Array<SwitchCase>;
}
interface ThisExpression extends BaseNode {
    type: "ThisExpression";
}
interface ThrowStatement extends BaseNode {
    type: "ThrowStatement";
    argument: Expression;
}
interface TryStatement extends BaseNode {
    type: "TryStatement";
    block: BlockStatement;
    handler?: CatchClause | null;
    finalizer?: BlockStatement | null;
}
interface UnaryExpression extends BaseNode {
    type: "UnaryExpression";
    operator: "void" | "throw" | "delete" | "!" | "+" | "-" | "~" | "typeof";
    argument: Expression;
    prefix: boolean;
}
interface UpdateExpression extends BaseNode {
    type: "UpdateExpression";
    operator: "++" | "--";
    argument: Expression;
    prefix: boolean;
}
interface VariableDeclaration extends BaseNode {
    type: "VariableDeclaration";
    kind: "var" | "let" | "const" | "using" | "await using";
    declarations: Array<VariableDeclarator>;
    declare?: boolean | null;
}
interface VariableDeclarator extends BaseNode {
    type: "VariableDeclarator";
    id: LVal;
    init?: Expression | null;
    definite?: boolean | null;
}
interface WhileStatement extends BaseNode {
    type: "WhileStatement";
    test: Expression;
    body: Statement;
}
interface WithStatement extends BaseNode {
    type: "WithStatement";
    object: Expression;
    body: Statement;
}
interface AssignmentPattern extends BaseNode {
    type: "AssignmentPattern";
    left: Identifier | ObjectPattern | ArrayPattern | MemberExpression | TSAsExpression | TSSatisfiesExpression | TSTypeAssertion | TSNonNullExpression;
    right: Expression;
    decorators?: Array<Decorator> | null;
    optional?: boolean | null;
    typeAnnotation?: TypeAnnotation | TSTypeAnnotation | Noop | null;
}
interface ArrayPattern extends BaseNode {
    type: "ArrayPattern";
    elements: Array<null | PatternLike | LVal>;
    decorators?: Array<Decorator> | null;
    optional?: boolean | null;
    typeAnnotation?: TypeAnnotation | TSTypeAnnotation | Noop | null;
}
interface ArrowFunctionExpression extends BaseNode {
    type: "ArrowFunctionExpression";
    params: Array<Identifier | Pattern | RestElement>;
    body: BlockStatement | Expression;
    async: boolean;
    expression: boolean;
    generator?: boolean;
    predicate?: DeclaredPredicate | InferredPredicate | null;
    returnType?: TypeAnnotation | TSTypeAnnotation | Noop | null;
    typeParameters?: TypeParameterDeclaration | TSTypeParameterDeclaration | Noop | null;
}
interface ClassBody extends BaseNode {
    type: "ClassBody";
    body: Array<ClassMethod | ClassPrivateMethod | ClassProperty | ClassPrivateProperty | ClassAccessorProperty | TSDeclareMethod | TSIndexSignature | StaticBlock>;
}
interface ClassExpression extends BaseNode {
    type: "ClassExpression";
    id?: Identifier | null;
    superClass?: Expression | null;
    body: ClassBody;
    decorators?: Array<Decorator> | null;
    implements?: Array<TSExpressionWithTypeArguments | ClassImplements> | null;
    mixins?: InterfaceExtends | null;
    superTypeParameters?: TypeParameterInstantiation | TSTypeParameterInstantiation | null;
    typeParameters?: TypeParameterDeclaration | TSTypeParameterDeclaration | Noop | null;
}
interface ClassDeclaration extends BaseNode {
    type: "ClassDeclaration";
    id?: Identifier | null;
    superClass?: Expression | null;
    body: ClassBody;
    decorators?: Array<Decorator> | null;
    abstract?: boolean | null;
    declare?: boolean | null;
    implements?: Array<TSExpressionWithTypeArguments | ClassImplements> | null;
    mixins?: InterfaceExtends | null;
    superTypeParameters?: TypeParameterInstantiation | TSTypeParameterInstantiation | null;
    typeParameters?: TypeParameterDeclaration | TSTypeParameterDeclaration | Noop | null;
}
interface ExportAllDeclaration extends BaseNode {
    type: "ExportAllDeclaration";
    source: StringLiteral;
    /** @deprecated */
    assertions?: Array<ImportAttribute> | null;
    attributes?: Array<ImportAttribute> | null;
    exportKind?: "type" | "value" | null;
}
interface ExportDefaultDeclaration extends BaseNode {
    type: "ExportDefaultDeclaration";
    declaration: TSDeclareFunction | FunctionDeclaration | ClassDeclaration | Expression;
    exportKind?: "value" | null;
}
interface ExportNamedDeclaration extends BaseNode {
    type: "ExportNamedDeclaration";
    declaration?: Declaration | null;
    specifiers: Array<ExportSpecifier | ExportDefaultSpecifier | ExportNamespaceSpecifier>;
    source?: StringLiteral | null;
    /** @deprecated */
    assertions?: Array<ImportAttribute> | null;
    attributes?: Array<ImportAttribute> | null;
    exportKind?: "type" | "value" | null;
}
interface ExportSpecifier extends BaseNode {
    type: "ExportSpecifier";
    local: Identifier;
    exported: Identifier | StringLiteral;
    exportKind?: "type" | "value" | null;
}
interface ForOfStatement extends BaseNode {
    type: "ForOfStatement";
    left: VariableDeclaration | LVal;
    right: Expression;
    body: Statement;
    await: boolean;
}
interface ImportDeclaration extends BaseNode {
    type: "ImportDeclaration";
    specifiers: Array<ImportSpecifier | ImportDefaultSpecifier | ImportNamespaceSpecifier>;
    source: StringLiteral;
    /** @deprecated */
    assertions?: Array<ImportAttribute> | null;
    attributes?: Array<ImportAttribute> | null;
    importKind?: "type" | "typeof" | "value" | null;
    module?: boolean | null;
    phase?: "source" | "defer" | null;
}
interface ImportDefaultSpecifier extends BaseNode {
    type: "ImportDefaultSpecifier";
    local: Identifier;
}
interface ImportNamespaceSpecifier extends BaseNode {
    type: "ImportNamespaceSpecifier";
    local: Identifier;
}
interface ImportSpecifier extends BaseNode {
    type: "ImportSpecifier";
    local: Identifier;
    imported: Identifier | StringLiteral;
    importKind?: "type" | "typeof" | "value" | null;
}
interface ImportExpression extends BaseNode {
    type: "ImportExpression";
    source: Expression;
    options?: Expression | null;
    phase?: "source" | "defer" | null;
}
interface MetaProperty extends BaseNode {
    type: "MetaProperty";
    meta: Identifier;
    property: Identifier;
}
interface ClassMethod extends BaseNode {
    type: "ClassMethod";
    kind: "get" | "set" | "method" | "constructor";
    key: Identifier | StringLiteral | NumericLiteral | BigIntLiteral | Expression;
    params: Array<Identifier | Pattern | RestElement | TSParameterProperty>;
    body: BlockStatement;
    computed: boolean;
    static: boolean;
    generator: boolean;
    async: boolean;
    abstract?: boolean | null;
    access?: "public" | "private" | "protected" | null;
    accessibility?: "public" | "private" | "protected" | null;
    decorators?: Array<Decorator> | null;
    optional?: boolean | null;
    override?: boolean;
    returnType?: TypeAnnotation | TSTypeAnnotation | Noop | null;
    typeParameters?: TypeParameterDeclaration | TSTypeParameterDeclaration | Noop | null;
}
interface ObjectPattern extends BaseNode {
    type: "ObjectPattern";
    properties: Array<RestElement | ObjectProperty>;
    decorators?: Array<Decorator> | null;
    optional?: boolean | null;
    typeAnnotation?: TypeAnnotation | TSTypeAnnotation | Noop | null;
}
interface SpreadElement extends BaseNode {
    type: "SpreadElement";
    argument: Expression;
}
/**
 * @deprecated Use `SpreadElement`
 */
interface SpreadProperty extends BaseNode {
    type: "SpreadProperty";
    argument: Expression;
}
interface Super extends BaseNode {
    type: "Super";
}
interface TaggedTemplateExpression extends BaseNode {
    type: "TaggedTemplateExpression";
    tag: Expression;
    quasi: TemplateLiteral;
    typeParameters?: TypeParameterInstantiation | TSTypeParameterInstantiation | null;
}
interface TemplateElement extends BaseNode {
    type: "TemplateElement";
    value: {
        raw: string;
        cooked?: string;
    };
    tail: boolean;
}
interface TemplateLiteral extends BaseNode {
    type: "TemplateLiteral";
    quasis: Array<TemplateElement>;
    expressions: Array<Expression | TSType>;
}
interface YieldExpression extends BaseNode {
    type: "YieldExpression";
    argument?: Expression | null;
    delegate: boolean;
}
interface AwaitExpression extends BaseNode {
    type: "AwaitExpression";
    argument: Expression;
}
interface Import extends BaseNode {
    type: "Import";
}
interface BigIntLiteral extends BaseNode {
    type: "BigIntLiteral";
    value: string;
}
interface ExportNamespaceSpecifier extends BaseNode {
    type: "ExportNamespaceSpecifier";
    exported: Identifier;
}
interface OptionalMemberExpression extends BaseNode {
    type: "OptionalMemberExpression";
    object: Expression;
    property: Expression | Identifier;
    computed: boolean;
    optional: boolean;
}
interface OptionalCallExpression extends BaseNode {
    type: "OptionalCallExpression";
    callee: Expression;
    arguments: Array<Expression | SpreadElement | ArgumentPlaceholder>;
    optional: boolean;
    typeArguments?: TypeParameterInstantiation | null;
    typeParameters?: TSTypeParameterInstantiation | null;
}
interface ClassProperty extends BaseNode {
    type: "ClassProperty";
    key: Identifier | StringLiteral | NumericLiteral | BigIntLiteral | Expression;
    value?: Expression | null;
    typeAnnotation?: TypeAnnotation | TSTypeAnnotation | Noop | null;
    decorators?: Array<Decorator> | null;
    computed: boolean;
    static: boolean;
    abstract?: boolean | null;
    accessibility?: "public" | "private" | "protected" | null;
    declare?: boolean | null;
    definite?: boolean | null;
    optional?: boolean | null;
    override?: boolean;
    readonly?: boolean | null;
    variance?: Variance | null;
}
interface ClassAccessorProperty extends BaseNode {
    type: "ClassAccessorProperty";
    key: Identifier | StringLiteral | NumericLiteral | BigIntLiteral | Expression | PrivateName;
    value?: Expression | null;
    typeAnnotation?: TypeAnnotation | TSTypeAnnotation | Noop | null;
    decorators?: Array<Decorator> | null;
    computed: boolean;
    static: boolean;
    abstract?: boolean | null;
    accessibility?: "public" | "private" | "protected" | null;
    declare?: boolean | null;
    definite?: boolean | null;
    optional?: boolean | null;
    override?: boolean;
    readonly?: boolean | null;
    variance?: Variance | null;
}
interface ClassPrivateProperty extends BaseNode {
    type: "ClassPrivateProperty";
    key: PrivateName;
    value?: Expression | null;
    decorators?: Array<Decorator> | null;
    static: boolean;
    definite?: boolean | null;
    readonly?: boolean | null;
    typeAnnotation?: TypeAnnotation | TSTypeAnnotation | Noop | null;
    variance?: Variance | null;
}
interface ClassPrivateMethod extends BaseNode {
    type: "ClassPrivateMethod";
    kind: "get" | "set" | "method";
    key: PrivateName;
    params: Array<Identifier | Pattern | RestElement | TSParameterProperty>;
    body: BlockStatement;
    static: boolean;
    abstract?: boolean | null;
    access?: "public" | "private" | "protected" | null;
    accessibility?: "public" | "private" | "protected" | null;
    async?: boolean;
    computed?: boolean;
    decorators?: Array<Decorator> | null;
    generator?: boolean;
    optional?: boolean | null;
    override?: boolean;
    returnType?: TypeAnnotation | TSTypeAnnotation | Noop | null;
    typeParameters?: TypeParameterDeclaration | TSTypeParameterDeclaration | Noop | null;
}
interface PrivateName extends BaseNode {
    type: "PrivateName";
    id: Identifier;
}
interface StaticBlock extends BaseNode {
    type: "StaticBlock";
    body: Array<Statement>;
}
interface AnyTypeAnnotation extends BaseNode {
    type: "AnyTypeAnnotation";
}
interface ArrayTypeAnnotation extends BaseNode {
    type: "ArrayTypeAnnotation";
    elementType: FlowType;
}
interface BooleanTypeAnnotation extends BaseNode {
    type: "BooleanTypeAnnotation";
}
interface BooleanLiteralTypeAnnotation extends BaseNode {
    type: "BooleanLiteralTypeAnnotation";
    value: boolean;
}
interface NullLiteralTypeAnnotation extends BaseNode {
    type: "NullLiteralTypeAnnotation";
}
interface ClassImplements extends BaseNode {
    type: "ClassImplements";
    id: Identifier;
    typeParameters?: TypeParameterInstantiation | null;
}
interface DeclareClass extends BaseNode {
    type: "DeclareClass";
    id: Identifier;
    typeParameters?: TypeParameterDeclaration | null;
    extends?: Array<InterfaceExtends> | null;
    body: ObjectTypeAnnotation;
    implements?: Array<ClassImplements> | null;
    mixins?: Array<InterfaceExtends> | null;
}
interface DeclareFunction extends BaseNode {
    type: "DeclareFunction";
    id: Identifier;
    predicate?: DeclaredPredicate | null;
}
interface DeclareInterface extends BaseNode {
    type: "DeclareInterface";
    id: Identifier;
    typeParameters?: TypeParameterDeclaration | null;
    extends?: Array<InterfaceExtends> | null;
    body: ObjectTypeAnnotation;
}
interface DeclareModule extends BaseNode {
    type: "DeclareModule";
    id: Identifier | StringLiteral;
    body: BlockStatement;
    kind?: "CommonJS" | "ES" | null;
}
interface DeclareModuleExports extends BaseNode {
    type: "DeclareModuleExports";
    typeAnnotation: TypeAnnotation;
}
interface DeclareTypeAlias extends BaseNode {
    type: "DeclareTypeAlias";
    id: Identifier;
    typeParameters?: TypeParameterDeclaration | null;
    right: FlowType;
}
interface DeclareOpaqueType extends BaseNode {
    type: "DeclareOpaqueType";
    id: Identifier;
    typeParameters?: TypeParameterDeclaration | null;
    supertype?: FlowType | null;
    impltype?: FlowType | null;
}
interface DeclareVariable extends BaseNode {
    type: "DeclareVariable";
    id: Identifier;
}
interface DeclareExportDeclaration extends BaseNode {
    type: "DeclareExportDeclaration";
    declaration?: Flow | null;
    specifiers?: Array<ExportSpecifier | ExportNamespaceSpecifier> | null;
    source?: StringLiteral | null;
    default?: boolean | null;
}
interface DeclareExportAllDeclaration extends BaseNode {
    type: "DeclareExportAllDeclaration";
    source: StringLiteral;
    exportKind?: "type" | "value" | null;
}
interface DeclaredPredicate extends BaseNode {
    type: "DeclaredPredicate";
    value: Flow;
}
interface ExistsTypeAnnotation extends BaseNode {
    type: "ExistsTypeAnnotation";
}
interface FunctionTypeAnnotation extends BaseNode {
    type: "FunctionTypeAnnotation";
    typeParameters?: TypeParameterDeclaration | null;
    params: Array<FunctionTypeParam>;
    rest?: FunctionTypeParam | null;
    returnType: FlowType;
    this?: FunctionTypeParam | null;
}
interface FunctionTypeParam extends BaseNode {
    type: "FunctionTypeParam";
    name?: Identifier | null;
    typeAnnotation: FlowType;
    optional?: boolean | null;
}
interface GenericTypeAnnotation extends BaseNode {
    type: "GenericTypeAnnotation";
    id: Identifier | QualifiedTypeIdentifier;
    typeParameters?: TypeParameterInstantiation | null;
}
interface InferredPredicate extends BaseNode {
    type: "InferredPredicate";
}
interface InterfaceExtends extends BaseNode {
    type: "InterfaceExtends";
    id: Identifier | QualifiedTypeIdentifier;
    typeParameters?: TypeParameterInstantiation | null;
}
interface InterfaceDeclaration extends BaseNode {
    type: "InterfaceDeclaration";
    id: Identifier;
    typeParameters?: TypeParameterDeclaration | null;
    extends?: Array<InterfaceExtends> | null;
    body: ObjectTypeAnnotation;
}
interface InterfaceTypeAnnotation extends BaseNode {
    type: "InterfaceTypeAnnotation";
    extends?: Array<InterfaceExtends> | null;
    body: ObjectTypeAnnotation;
}
interface IntersectionTypeAnnotation extends BaseNode {
    type: "IntersectionTypeAnnotation";
    types: Array<FlowType>;
}
interface MixedTypeAnnotation extends BaseNode {
    type: "MixedTypeAnnotation";
}
interface EmptyTypeAnnotation extends BaseNode {
    type: "EmptyTypeAnnotation";
}
interface NullableTypeAnnotation extends BaseNode {
    type: "NullableTypeAnnotation";
    typeAnnotation: FlowType;
}
interface NumberLiteralTypeAnnotation extends BaseNode {
    type: "NumberLiteralTypeAnnotation";
    value: number;
}
interface NumberTypeAnnotation extends BaseNode {
    type: "NumberTypeAnnotation";
}
interface ObjectTypeAnnotation extends BaseNode {
    type: "ObjectTypeAnnotation";
    properties: Array<ObjectTypeProperty | ObjectTypeSpreadProperty>;
    indexers?: Array<ObjectTypeIndexer>;
    callProperties?: Array<ObjectTypeCallProperty>;
    internalSlots?: Array<ObjectTypeInternalSlot>;
    exact: boolean;
    inexact?: boolean | null;
}
interface ObjectTypeInternalSlot extends BaseNode {
    type: "ObjectTypeInternalSlot";
    id: Identifier;
    value: FlowType;
    optional: boolean;
    static: boolean;
    method: boolean;
}
interface ObjectTypeCallProperty extends BaseNode {
    type: "ObjectTypeCallProperty";
    value: FlowType;
    static: boolean;
}
interface ObjectTypeIndexer extends BaseNode {
    type: "ObjectTypeIndexer";
    id?: Identifier | null;
    key: FlowType;
    value: FlowType;
    variance?: Variance | null;
    static: boolean;
}
interface ObjectTypeProperty extends BaseNode {
    type: "ObjectTypeProperty";
    key: Identifier | StringLiteral;
    value: FlowType;
    variance?: Variance | null;
    kind: "init" | "get" | "set";
    method: boolean;
    optional: boolean;
    proto: boolean;
    static: boolean;
}
interface ObjectTypeSpreadProperty extends BaseNode {
    type: "ObjectTypeSpreadProperty";
    argument: FlowType;
}
interface OpaqueType extends BaseNode {
    type: "OpaqueType";
    id: Identifier;
    typeParameters?: TypeParameterDeclaration | null;
    supertype?: FlowType | null;
    impltype: FlowType;
}
interface QualifiedTypeIdentifier extends BaseNode {
    type: "QualifiedTypeIdentifier";
    id: Identifier;
    qualification: Identifier | QualifiedTypeIdentifier;
}
interface StringLiteralTypeAnnotation extends BaseNode {
    type: "StringLiteralTypeAnnotation";
    value: string;
}
interface StringTypeAnnotation extends BaseNode {
    type: "StringTypeAnnotation";
}
interface SymbolTypeAnnotation extends BaseNode {
    type: "SymbolTypeAnnotation";
}
interface ThisTypeAnnotation extends BaseNode {
    type: "ThisTypeAnnotation";
}
interface TupleTypeAnnotation extends BaseNode {
    type: "TupleTypeAnnotation";
    types: Array<FlowType>;
}
interface TypeofTypeAnnotation extends BaseNode {
    type: "TypeofTypeAnnotation";
    argument: FlowType;
}
interface TypeAlias extends BaseNode {
    type: "TypeAlias";
    id: Identifier;
    typeParameters?: TypeParameterDeclaration | null;
    right: FlowType;
}
interface TypeAnnotation extends BaseNode {
    type: "TypeAnnotation";
    typeAnnotation: FlowType;
}
interface TypeCastExpression extends BaseNode {
    type: "TypeCastExpression";
    expression: Expression;
    typeAnnotation: TypeAnnotation;
}
interface TypeParameter extends BaseNode {
    type: "TypeParameter";
    bound?: TypeAnnotation | null;
    default?: FlowType | null;
    variance?: Variance | null;
    name: string;
}
interface TypeParameterDeclaration extends BaseNode {
    type: "TypeParameterDeclaration";
    params: Array<TypeParameter>;
}
interface TypeParameterInstantiation extends BaseNode {
    type: "TypeParameterInstantiation";
    params: Array<FlowType>;
}
interface UnionTypeAnnotation extends BaseNode {
    type: "UnionTypeAnnotation";
    types: Array<FlowType>;
}
interface Variance extends BaseNode {
    type: "Variance";
    kind: "minus" | "plus";
}
interface VoidTypeAnnotation extends BaseNode {
    type: "VoidTypeAnnotation";
}
interface EnumDeclaration extends BaseNode {
    type: "EnumDeclaration";
    id: Identifier;
    body: EnumBooleanBody | EnumNumberBody | EnumStringBody | EnumSymbolBody;
}
interface EnumBooleanBody extends BaseNode {
    type: "EnumBooleanBody";
    members: Array<EnumBooleanMember>;
    explicitType: boolean;
    hasUnknownMembers: boolean;
}
interface EnumNumberBody extends BaseNode {
    type: "EnumNumberBody";
    members: Array<EnumNumberMember>;
    explicitType: boolean;
    hasUnknownMembers: boolean;
}
interface EnumStringBody extends BaseNode {
    type: "EnumStringBody";
    members: Array<EnumStringMember | EnumDefaultedMember>;
    explicitType: boolean;
    hasUnknownMembers: boolean;
}
interface EnumSymbolBody extends BaseNode {
    type: "EnumSymbolBody";
    members: Array<EnumDefaultedMember>;
    hasUnknownMembers: boolean;
}
interface EnumBooleanMember extends BaseNode {
    type: "EnumBooleanMember";
    id: Identifier;
    init: BooleanLiteral;
}
interface EnumNumberMember extends BaseNode {
    type: "EnumNumberMember";
    id: Identifier;
    init: NumericLiteral;
}
interface EnumStringMember extends BaseNode {
    type: "EnumStringMember";
    id: Identifier;
    init: StringLiteral;
}
interface EnumDefaultedMember extends BaseNode {
    type: "EnumDefaultedMember";
    id: Identifier;
}
interface IndexedAccessType extends BaseNode {
    type: "IndexedAccessType";
    objectType: FlowType;
    indexType: FlowType;
}
interface OptionalIndexedAccessType extends BaseNode {
    type: "OptionalIndexedAccessType";
    objectType: FlowType;
    indexType: FlowType;
    optional: boolean;
}
interface JSXAttribute extends BaseNode {
    type: "JSXAttribute";
    name: JSXIdentifier | JSXNamespacedName;
    value?: JSXElement | JSXFragment | StringLiteral | JSXExpressionContainer | null;
}
interface JSXClosingElement extends BaseNode {
    type: "JSXClosingElement";
    name: JSXIdentifier | JSXMemberExpression | JSXNamespacedName;
}
interface JSXElement extends BaseNode {
    type: "JSXElement";
    openingElement: JSXOpeningElement;
    closingElement?: JSXClosingElement | null;
    children: Array<JSXText | JSXExpressionContainer | JSXSpreadChild | JSXElement | JSXFragment>;
    selfClosing?: boolean | null;
}
interface JSXEmptyExpression extends BaseNode {
    type: "JSXEmptyExpression";
}
interface JSXExpressionContainer extends BaseNode {
    type: "JSXExpressionContainer";
    expression: Expression | JSXEmptyExpression;
}
interface JSXSpreadChild extends BaseNode {
    type: "JSXSpreadChild";
    expression: Expression;
}
interface JSXIdentifier extends BaseNode {
    type: "JSXIdentifier";
    name: string;
}
interface JSXMemberExpression extends BaseNode {
    type: "JSXMemberExpression";
    object: JSXMemberExpression | JSXIdentifier;
    property: JSXIdentifier;
}
interface JSXNamespacedName extends BaseNode {
    type: "JSXNamespacedName";
    namespace: JSXIdentifier;
    name: JSXIdentifier;
}
interface JSXOpeningElement extends BaseNode {
    type: "JSXOpeningElement";
    name: JSXIdentifier | JSXMemberExpression | JSXNamespacedName;
    attributes: Array<JSXAttribute | JSXSpreadAttribute>;
    selfClosing: boolean;
    typeParameters?: TypeParameterInstantiation | TSTypeParameterInstantiation | null;
}
interface JSXSpreadAttribute extends BaseNode {
    type: "JSXSpreadAttribute";
    argument: Expression;
}
interface JSXText extends BaseNode {
    type: "JSXText";
    value: string;
}
interface JSXFragment extends BaseNode {
    type: "JSXFragment";
    openingFragment: JSXOpeningFragment;
    closingFragment: JSXClosingFragment;
    children: Array<JSXText | JSXExpressionContainer | JSXSpreadChild | JSXElement | JSXFragment>;
}
interface JSXOpeningFragment extends BaseNode {
    type: "JSXOpeningFragment";
}
interface JSXClosingFragment extends BaseNode {
    type: "JSXClosingFragment";
}
interface Noop extends BaseNode {
    type: "Noop";
}
interface Placeholder extends BaseNode {
    type: "Placeholder";
    expectedNode: "Identifier" | "StringLiteral" | "Expression" | "Statement" | "Declaration" | "BlockStatement" | "ClassBody" | "Pattern";
    name: Identifier;
}
interface V8IntrinsicIdentifier extends BaseNode {
    type: "V8IntrinsicIdentifier";
    name: string;
}
interface ArgumentPlaceholder extends BaseNode {
    type: "ArgumentPlaceholder";
}
interface BindExpression extends BaseNode {
    type: "BindExpression";
    object: Expression;
    callee: Expression;
}
interface ImportAttribute extends BaseNode {
    type: "ImportAttribute";
    key: Identifier | StringLiteral;
    value: StringLiteral;
}
interface Decorator extends BaseNode {
    type: "Decorator";
    expression: Expression;
}
interface DoExpression extends BaseNode {
    type: "DoExpression";
    body: BlockStatement;
    async: boolean;
}
interface ExportDefaultSpecifier extends BaseNode {
    type: "ExportDefaultSpecifier";
    exported: Identifier;
}
interface RecordExpression extends BaseNode {
    type: "RecordExpression";
    properties: Array<ObjectProperty | SpreadElement>;
}
interface TupleExpression extends BaseNode {
    type: "TupleExpression";
    elements: Array<Expression | SpreadElement>;
}
interface DecimalLiteral extends BaseNode {
    type: "DecimalLiteral";
    value: string;
}
interface ModuleExpression extends BaseNode {
    type: "ModuleExpression";
    body: Program;
}
interface TopicReference extends BaseNode {
    type: "TopicReference";
}
interface PipelineTopicExpression extends BaseNode {
    type: "PipelineTopicExpression";
    expression: Expression;
}
interface PipelineBareFunction extends BaseNode {
    type: "PipelineBareFunction";
    callee: Expression;
}
interface PipelinePrimaryTopicReference extends BaseNode {
    type: "PipelinePrimaryTopicReference";
}
interface TSParameterProperty extends BaseNode {
    type: "TSParameterProperty";
    parameter: Identifier | AssignmentPattern;
    accessibility?: "public" | "private" | "protected" | null;
    decorators?: Array<Decorator> | null;
    override?: boolean | null;
    readonly?: boolean | null;
}
interface TSDeclareFunction extends BaseNode {
    type: "TSDeclareFunction";
    id?: Identifier | null;
    typeParameters?: TSTypeParameterDeclaration | Noop | null;
    params: Array<Identifier | Pattern | RestElement>;
    returnType?: TSTypeAnnotation | Noop | null;
    async?: boolean;
    declare?: boolean | null;
    generator?: boolean;
}
interface TSDeclareMethod extends BaseNode {
    type: "TSDeclareMethod";
    decorators?: Array<Decorator> | null;
    key: Identifier | StringLiteral | NumericLiteral | BigIntLiteral | Expression;
    typeParameters?: TSTypeParameterDeclaration | Noop | null;
    params: Array<Identifier | Pattern | RestElement | TSParameterProperty>;
    returnType?: TSTypeAnnotation | Noop | null;
    abstract?: boolean | null;
    access?: "public" | "private" | "protected" | null;
    accessibility?: "public" | "private" | "protected" | null;
    async?: boolean;
    computed?: boolean;
    generator?: boolean;
    kind?: "get" | "set" | "method" | "constructor";
    optional?: boolean | null;
    override?: boolean;
    static?: boolean;
}
interface TSQualifiedName extends BaseNode {
    type: "TSQualifiedName";
    left: TSEntityName;
    right: Identifier;
}
interface TSCallSignatureDeclaration extends BaseNode {
    type: "TSCallSignatureDeclaration";
    typeParameters?: TSTypeParameterDeclaration | null;
    parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>;
    typeAnnotation?: TSTypeAnnotation | null;
}
interface TSConstructSignatureDeclaration extends BaseNode {
    type: "TSConstructSignatureDeclaration";
    typeParameters?: TSTypeParameterDeclaration | null;
    parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>;
    typeAnnotation?: TSTypeAnnotation | null;
}
interface TSPropertySignature extends BaseNode {
    type: "TSPropertySignature";
    key: Expression;
    typeAnnotation?: TSTypeAnnotation | null;
    computed?: boolean;
    kind: "get" | "set";
    optional?: boolean | null;
    readonly?: boolean | null;
}
interface TSMethodSignature extends BaseNode {
    type: "TSMethodSignature";
    key: Expression;
    typeParameters?: TSTypeParameterDeclaration | null;
    parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>;
    typeAnnotation?: TSTypeAnnotation | null;
    computed?: boolean;
    kind: "method" | "get" | "set";
    optional?: boolean | null;
}
interface TSIndexSignature extends BaseNode {
    type: "TSIndexSignature";
    parameters: Array<Identifier>;
    typeAnnotation?: TSTypeAnnotation | null;
    readonly?: boolean | null;
    static?: boolean | null;
}
interface TSAnyKeyword extends BaseNode {
    type: "TSAnyKeyword";
}
interface TSBooleanKeyword extends BaseNode {
    type: "TSBooleanKeyword";
}
interface TSBigIntKeyword extends BaseNode {
    type: "TSBigIntKeyword";
}
interface TSIntrinsicKeyword extends BaseNode {
    type: "TSIntrinsicKeyword";
}
interface TSNeverKeyword extends BaseNode {
    type: "TSNeverKeyword";
}
interface TSNullKeyword extends BaseNode {
    type: "TSNullKeyword";
}
interface TSNumberKeyword extends BaseNode {
    type: "TSNumberKeyword";
}
interface TSObjectKeyword extends BaseNode {
    type: "TSObjectKeyword";
}
interface TSStringKeyword extends BaseNode {
    type: "TSStringKeyword";
}
interface TSSymbolKeyword extends BaseNode {
    type: "TSSymbolKeyword";
}
interface TSUndefinedKeyword extends BaseNode {
    type: "TSUndefinedKeyword";
}
interface TSUnknownKeyword extends BaseNode {
    type: "TSUnknownKeyword";
}
interface TSVoidKeyword extends BaseNode {
    type: "TSVoidKeyword";
}
interface TSThisType extends BaseNode {
    type: "TSThisType";
}
interface TSFunctionType extends BaseNode {
    type: "TSFunctionType";
    typeParameters?: TSTypeParameterDeclaration | null;
    parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>;
    typeAnnotation?: TSTypeAnnotation | null;
}
interface TSConstructorType extends BaseNode {
    type: "TSConstructorType";
    typeParameters?: TSTypeParameterDeclaration | null;
    parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>;
    typeAnnotation?: TSTypeAnnotation | null;
    abstract?: boolean | null;
}
interface TSTypeReference extends BaseNode {
    type: "TSTypeReference";
    typeName: TSEntityName;
    typeParameters?: TSTypeParameterInstantiation | null;
}
interface TSTypePredicate extends BaseNode {
    type: "TSTypePredicate";
    parameterName: Identifier | TSThisType;
    typeAnnotation?: TSTypeAnnotation | null;
    asserts?: boolean | null;
}
interface TSTypeQuery extends BaseNode {
    type: "TSTypeQuery";
    exprName: TSEntityName | TSImportType;
    typeParameters?: TSTypeParameterInstantiation | null;
}
interface TSTypeLiteral extends BaseNode {
    type: "TSTypeLiteral";
    members: Array<TSTypeElement>;
}
interface TSArrayType extends BaseNode {
    type: "TSArrayType";
    elementType: TSType;
}
interface TSTupleType extends BaseNode {
    type: "TSTupleType";
    elementTypes: Array<TSType | TSNamedTupleMember>;
}
interface TSOptionalType extends BaseNode {
    type: "TSOptionalType";
    typeAnnotation: TSType;
}
interface TSRestType extends BaseNode {
    type: "TSRestType";
    typeAnnotation: TSType;
}
interface TSNamedTupleMember extends BaseNode {
    type: "TSNamedTupleMember";
    label: Identifier;
    elementType: TSType;
    optional: boolean;
}
interface TSUnionType extends BaseNode {
    type: "TSUnionType";
    types: Array<TSType>;
}
interface TSIntersectionType extends BaseNode {
    type: "TSIntersectionType";
    types: Array<TSType>;
}
interface TSConditionalType extends BaseNode {
    type: "TSConditionalType";
    checkType: TSType;
    extendsType: TSType;
    trueType: TSType;
    falseType: TSType;
}
interface TSInferType extends BaseNode {
    type: "TSInferType";
    typeParameter: TSTypeParameter;
}
interface TSParenthesizedType extends BaseNode {
    type: "TSParenthesizedType";
    typeAnnotation: TSType;
}
interface TSTypeOperator extends BaseNode {
    type: "TSTypeOperator";
    typeAnnotation: TSType;
    operator: string;
}
interface TSIndexedAccessType extends BaseNode {
    type: "TSIndexedAccessType";
    objectType: TSType;
    indexType: TSType;
}
interface TSMappedType extends BaseNode {
    type: "TSMappedType";
    typeParameter: TSTypeParameter;
    typeAnnotation?: TSType | null;
    nameType?: TSType | null;
    optional?: true | false | "+" | "-" | null;
    readonly?: true | false | "+" | "-" | null;
}
interface TSLiteralType extends BaseNode {
    type: "TSLiteralType";
    literal: NumericLiteral | StringLiteral | BooleanLiteral | BigIntLiteral | TemplateLiteral | UnaryExpression;
}
interface TSExpressionWithTypeArguments extends BaseNode {
    type: "TSExpressionWithTypeArguments";
    expression: TSEntityName;
    typeParameters?: TSTypeParameterInstantiation | null;
}
interface TSInterfaceDeclaration extends BaseNode {
    type: "TSInterfaceDeclaration";
    id: Identifier;
    typeParameters?: TSTypeParameterDeclaration | null;
    extends?: Array<TSExpressionWithTypeArguments> | null;
    body: TSInterfaceBody;
    declare?: boolean | null;
}
interface TSInterfaceBody extends BaseNode {
    type: "TSInterfaceBody";
    body: Array<TSTypeElement>;
}
interface TSTypeAliasDeclaration extends BaseNode {
    type: "TSTypeAliasDeclaration";
    id: Identifier;
    typeParameters?: TSTypeParameterDeclaration | null;
    typeAnnotation: TSType;
    declare?: boolean | null;
}
interface TSInstantiationExpression extends BaseNode {
    type: "TSInstantiationExpression";
    expression: Expression;
    typeParameters?: TSTypeParameterInstantiation | null;
}
interface TSAsExpression extends BaseNode {
    type: "TSAsExpression";
    expression: Expression;
    typeAnnotation: TSType;
}
interface TSSatisfiesExpression extends BaseNode {
    type: "TSSatisfiesExpression";
    expression: Expression;
    typeAnnotation: TSType;
}
interface TSTypeAssertion extends BaseNode {
    type: "TSTypeAssertion";
    typeAnnotation: TSType;
    expression: Expression;
}
interface TSEnumDeclaration extends BaseNode {
    type: "TSEnumDeclaration";
    id: Identifier;
    members: Array<TSEnumMember>;
    const?: boolean | null;
    declare?: boolean | null;
    initializer?: Expression | null;
}
interface TSEnumMember extends BaseNode {
    type: "TSEnumMember";
    id: Identifier | StringLiteral;
    initializer?: Expression | null;
}
interface TSModuleDeclaration extends BaseNode {
    type: "TSModuleDeclaration";
    id: Identifier | StringLiteral;
    body: TSModuleBlock | TSModuleDeclaration;
    declare?: boolean | null;
    global?: boolean | null;
}
interface TSModuleBlock extends BaseNode {
    type: "TSModuleBlock";
    body: Array<Statement>;
}
interface TSImportType extends BaseNode {
    type: "TSImportType";
    argument: StringLiteral;
    qualifier?: TSEntityName | null;
    typeParameters?: TSTypeParameterInstantiation | null;
    options?: Expression | null;
}
interface TSImportEqualsDeclaration extends BaseNode {
    type: "TSImportEqualsDeclaration";
    id: Identifier;
    moduleReference: TSEntityName | TSExternalModuleReference;
    importKind?: "type" | "value" | null;
    isExport: boolean;
}
interface TSExternalModuleReference extends BaseNode {
    type: "TSExternalModuleReference";
    expression: StringLiteral;
}
interface TSNonNullExpression extends BaseNode {
    type: "TSNonNullExpression";
    expression: Expression;
}
interface TSExportAssignment extends BaseNode {
    type: "TSExportAssignment";
    expression: Expression;
}
interface TSNamespaceExportDeclaration extends BaseNode {
    type: "TSNamespaceExportDeclaration";
    id: Identifier;
}
interface TSTypeAnnotation extends BaseNode {
    type: "TSTypeAnnotation";
    typeAnnotation: TSType;
}
interface TSTypeParameterInstantiation extends BaseNode {
    type: "TSTypeParameterInstantiation";
    params: Array<TSType>;
}
interface TSTypeParameterDeclaration extends BaseNode {
    type: "TSTypeParameterDeclaration";
    params: Array<TSTypeParameter>;
}
interface TSTypeParameter extends BaseNode {
    type: "TSTypeParameter";
    constraint?: TSType | null;
    default?: TSType | null;
    name: string;
    const?: boolean | null;
    in?: boolean | null;
    out?: boolean | null;
}
type Standardized = ArrayExpression | AssignmentExpression | BinaryExpression | InterpreterDirective | Directive | DirectiveLiteral | BlockStatement | BreakStatement | CallExpression | CatchClause | ConditionalExpression | ContinueStatement | DebuggerStatement | DoWhileStatement | EmptyStatement | ExpressionStatement | File | ForInStatement | ForStatement | FunctionDeclaration | FunctionExpression | Identifier | IfStatement | LabeledStatement | StringLiteral | NumericLiteral | NullLiteral | BooleanLiteral | RegExpLiteral | LogicalExpression | MemberExpression | NewExpression | Program | ObjectExpression | ObjectMethod | ObjectProperty | RestElement | ReturnStatement | SequenceExpression | ParenthesizedExpression | SwitchCase | SwitchStatement | ThisExpression | ThrowStatement | TryStatement | UnaryExpression | UpdateExpression | VariableDeclaration | VariableDeclarator | WhileStatement | WithStatement | AssignmentPattern | ArrayPattern | ArrowFunctionExpression | ClassBody | ClassExpression | ClassDeclaration | ExportAllDeclaration | ExportDefaultDeclaration | ExportNamedDeclaration | ExportSpecifier | ForOfStatement | ImportDeclaration | ImportDefaultSpecifier | ImportNamespaceSpecifier | ImportSpecifier | ImportExpression | MetaProperty | ClassMethod | ObjectPattern | SpreadElement | Super | TaggedTemplateExpression | TemplateElement | TemplateLiteral | YieldExpression | AwaitExpression | Import | BigIntLiteral | ExportNamespaceSpecifier | OptionalMemberExpression | OptionalCallExpression | ClassProperty | ClassAccessorProperty | ClassPrivateProperty | ClassPrivateMethod | PrivateName | StaticBlock;
type Expression = ArrayExpression | AssignmentExpression | BinaryExpression | CallExpression | ConditionalExpression | FunctionExpression | Identifier | StringLiteral | NumericLiteral | NullLiteral | BooleanLiteral | RegExpLiteral | LogicalExpression | MemberExpression | NewExpression | ObjectExpression | SequenceExpression | ParenthesizedExpression | ThisExpression | UnaryExpression | UpdateExpression | ArrowFunctionExpression | ClassExpression | ImportExpression | MetaProperty | Super | TaggedTemplateExpression | TemplateLiteral | YieldExpression | AwaitExpression | Import | BigIntLiteral | OptionalMemberExpression | OptionalCallExpression | TypeCastExpression | JSXElement | JSXFragment | BindExpression | DoExpression | RecordExpression | TupleExpression | DecimalLiteral | ModuleExpression | TopicReference | PipelineTopicExpression | PipelineBareFunction | PipelinePrimaryTopicReference | TSInstantiationExpression | TSAsExpression | TSSatisfiesExpression | TSTypeAssertion | TSNonNullExpression;
type Binary = BinaryExpression | LogicalExpression;
type Scopable = BlockStatement | CatchClause | DoWhileStatement | ForInStatement | ForStatement | FunctionDeclaration | FunctionExpression | Program | ObjectMethod | SwitchStatement | WhileStatement | ArrowFunctionExpression | ClassExpression | ClassDeclaration | ForOfStatement | ClassMethod | ClassPrivateMethod | StaticBlock | TSModuleBlock;
type BlockParent = BlockStatement | CatchClause | DoWhileStatement | ForInStatement | ForStatement | FunctionDeclaration | FunctionExpression | Program | ObjectMethod | SwitchStatement | WhileStatement | ArrowFunctionExpression | ForOfStatement | ClassMethod | ClassPrivateMethod | StaticBlock | TSModuleBlock;
type Block = BlockStatement | Program | TSModuleBlock;
type Statement = BlockStatement | BreakStatement | ContinueStatement | DebuggerStatement | DoWhileStatement | EmptyStatement | ExpressionStatement | ForInStatement | ForStatement | FunctionDeclaration | IfStatement | LabeledStatement | ReturnStatement | SwitchStatement | ThrowStatement | TryStatement | VariableDeclaration | WhileStatement | WithStatement | ClassDeclaration | ExportAllDeclaration | ExportDefaultDeclaration | ExportNamedDeclaration | ForOfStatement | ImportDeclaration | DeclareClass | DeclareFunction | DeclareInterface | DeclareModule | DeclareModuleExports | DeclareTypeAlias | DeclareOpaqueType | DeclareVariable | DeclareExportDeclaration | DeclareExportAllDeclaration | InterfaceDeclaration | OpaqueType | TypeAlias | EnumDeclaration | TSDeclareFunction | TSInterfaceDeclaration | TSTypeAliasDeclaration | TSEnumDeclaration | TSModuleDeclaration | TSImportEqualsDeclaration | TSExportAssignment | TSNamespaceExportDeclaration;
type Terminatorless = BreakStatement | ContinueStatement | ReturnStatement | ThrowStatement | YieldExpression | AwaitExpression;
type CompletionStatement = BreakStatement | ContinueStatement | ReturnStatement | ThrowStatement;
type Conditional = ConditionalExpression | IfStatement;
type Loop = DoWhileStatement | ForInStatement | ForStatement | WhileStatement | ForOfStatement;
type While = DoWhileStatement | WhileStatement;
type ExpressionWrapper = ExpressionStatement | ParenthesizedExpression | TypeCastExpression;
type For = ForInStatement | ForStatement | ForOfStatement;
type ForXStatement = ForInStatement | ForOfStatement;
type Function = FunctionDeclaration | FunctionExpression | ObjectMethod | ArrowFunctionExpression | ClassMethod | ClassPrivateMethod;
type FunctionParent = FunctionDeclaration | FunctionExpression | ObjectMethod | ArrowFunctionExpression | ClassMethod | ClassPrivateMethod | StaticBlock | TSModuleBlock;
type Pureish = FunctionDeclaration | FunctionExpression | StringLiteral | NumericLiteral | NullLiteral | BooleanLiteral | RegExpLiteral | ArrowFunctionExpression | BigIntLiteral | DecimalLiteral;
type Declaration = FunctionDeclaration | VariableDeclaration | ClassDeclaration | ExportAllDeclaration | ExportDefaultDeclaration | ExportNamedDeclaration | ImportDeclaration | DeclareClass | DeclareFunction | DeclareInterface | DeclareModule | DeclareModuleExports | DeclareTypeAlias | DeclareOpaqueType | DeclareVariable | DeclareExportDeclaration | DeclareExportAllDeclaration | InterfaceDeclaration | OpaqueType | TypeAlias | EnumDeclaration | TSDeclareFunction | TSInterfaceDeclaration | TSTypeAliasDeclaration | TSEnumDeclaration | TSModuleDeclaration;
type PatternLike = Identifier | RestElement | AssignmentPattern | ArrayPattern | ObjectPattern | TSAsExpression | TSSatisfiesExpression | TSTypeAssertion | TSNonNullExpression;
type LVal = Identifier | MemberExpression | RestElement | AssignmentPattern | ArrayPattern | ObjectPattern | TSParameterProperty | TSAsExpression | TSSatisfiesExpression | TSTypeAssertion | TSNonNullExpression;
type TSEntityName = Identifier | TSQualifiedName;
type Literal = StringLiteral | NumericLiteral | NullLiteral | BooleanLiteral | RegExpLiteral | TemplateLiteral | BigIntLiteral | DecimalLiteral;
type Immutable = StringLiteral | NumericLiteral | NullLiteral | BooleanLiteral | BigIntLiteral | JSXAttribute | JSXClosingElement | JSXElement | JSXExpressionContainer | JSXSpreadChild | JSXOpeningElement | JSXText | JSXFragment | JSXOpeningFragment | JSXClosingFragment | DecimalLiteral;
type UserWhitespacable = ObjectMethod | ObjectProperty | ObjectTypeInternalSlot | ObjectTypeCallProperty | ObjectTypeIndexer | ObjectTypeProperty | ObjectTypeSpreadProperty;
type Method = ObjectMethod | ClassMethod | ClassPrivateMethod;
type ObjectMember = ObjectMethod | ObjectProperty;
type Property = ObjectProperty | ClassProperty | ClassAccessorProperty | ClassPrivateProperty;
type UnaryLike = UnaryExpression | SpreadElement;
type Pattern = AssignmentPattern | ArrayPattern | ObjectPattern;
type Class = ClassExpression | ClassDeclaration;
type ImportOrExportDeclaration = ExportAllDeclaration | ExportDefaultDeclaration | ExportNamedDeclaration | ImportDeclaration;
type ExportDeclaration = ExportAllDeclaration | ExportDefaultDeclaration | ExportNamedDeclaration;
type ModuleSpecifier = ExportSpecifier | ImportDefaultSpecifier | ImportNamespaceSpecifier | ImportSpecifier | ExportNamespaceSpecifier | ExportDefaultSpecifier;
type Accessor = ClassAccessorProperty;
type Private = ClassPrivateProperty | ClassPrivateMethod | PrivateName;
type Flow = AnyTypeAnnotation | ArrayTypeAnnotation | BooleanTypeAnnotation | BooleanLiteralTypeAnnotation | NullLiteralTypeAnnotation | ClassImplements | DeclareClass | DeclareFunction | DeclareInterface | DeclareModule | DeclareModuleExports | DeclareTypeAlias | DeclareOpaqueType | DeclareVariable | DeclareExportDeclaration | DeclareExportAllDeclaration | DeclaredPredicate | ExistsTypeAnnotation | FunctionTypeAnnotation | FunctionTypeParam | GenericTypeAnnotation | InferredPredicate | InterfaceExtends | InterfaceDeclaration | InterfaceTypeAnnotation | IntersectionTypeAnnotation | MixedTypeAnnotation | EmptyTypeAnnotation | NullableTypeAnnotation | NumberLiteralTypeAnnotation | NumberTypeAnnotation | ObjectTypeAnnotation | ObjectTypeInternalSlot | ObjectTypeCallProperty | ObjectTypeIndexer | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | QualifiedTypeIdentifier | StringLiteralTypeAnnotation | StringTypeAnnotation | SymbolTypeAnnotation | ThisTypeAnnotation | TupleTypeAnnotation | TypeofTypeAnnotation | TypeAlias | TypeAnnotation | TypeCastExpression | TypeParameter | TypeParameterDeclaration | TypeParameterInstantiation | UnionTypeAnnotation | Variance | VoidTypeAnnotation | EnumDeclaration | EnumBooleanBody | EnumNumberBody | EnumStringBody | EnumSymbolBody | EnumBooleanMember | EnumNumberMember | EnumStringMember | EnumDefaultedMember | IndexedAccessType | OptionalIndexedAccessType;
type FlowType = AnyTypeAnnotation | ArrayTypeAnnotation | BooleanTypeAnnotation | BooleanLiteralTypeAnnotation | NullLiteralTypeAnnotation | ExistsTypeAnnotation | FunctionTypeAnnotation | GenericTypeAnnotation | InterfaceTypeAnnotation | IntersectionTypeAnnotation | MixedTypeAnnotation | EmptyTypeAnnotation | NullableTypeAnnotation | NumberLiteralTypeAnnotation | NumberTypeAnnotation | ObjectTypeAnnotation | StringLiteralTypeAnnotation | StringTypeAnnotation | SymbolTypeAnnotation | ThisTypeAnnotation | TupleTypeAnnotation | TypeofTypeAnnotation | UnionTypeAnnotation | VoidTypeAnnotation | IndexedAccessType | OptionalIndexedAccessType;
type FlowBaseAnnotation = AnyTypeAnnotation | BooleanTypeAnnotation | NullLiteralTypeAnnotation | MixedTypeAnnotation | EmptyTypeAnnotation | NumberTypeAnnotation | StringTypeAnnotation | SymbolTypeAnnotation | ThisTypeAnnotation | VoidTypeAnnotation;
type FlowDeclaration = DeclareClass | DeclareFunction | DeclareInterface | DeclareModule | DeclareModuleExports | DeclareTypeAlias | DeclareOpaqueType | DeclareVariable | DeclareExportDeclaration | DeclareExportAllDeclaration | InterfaceDeclaration | OpaqueType | TypeAlias;
type FlowPredicate = DeclaredPredicate | InferredPredicate;
type EnumBody = EnumBooleanBody | EnumNumberBody | EnumStringBody | EnumSymbolBody;
type EnumMember = EnumBooleanMember | EnumNumberMember | EnumStringMember | EnumDefaultedMember;
type JSX = JSXAttribute | JSXClosingElement | JSXElement | JSXEmptyExpression | JSXExpressionContainer | JSXSpreadChild | JSXIdentifier | JSXMemberExpression | JSXNamespacedName | JSXOpeningElement | JSXSpreadAttribute | JSXText | JSXFragment | JSXOpeningFragment | JSXClosingFragment;
type Miscellaneous = Noop | Placeholder | V8IntrinsicIdentifier;
type TypeScript = TSParameterProperty | TSDeclareFunction | TSDeclareMethod | TSQualifiedName | TSCallSignatureDeclaration | TSConstructSignatureDeclaration | TSPropertySignature | TSMethodSignature | TSIndexSignature | TSAnyKeyword | TSBooleanKeyword | TSBigIntKeyword | TSIntrinsicKeyword | TSNeverKeyword | TSNullKeyword | TSNumberKeyword | TSObjectKeyword | TSStringKeyword | TSSymbolKeyword | TSUndefinedKeyword | TSUnknownKeyword | TSVoidKeyword | TSThisType | TSFunctionType | TSConstructorType | TSTypeReference | TSTypePredicate | TSTypeQuery | TSTypeLiteral | TSArrayType | TSTupleType | TSOptionalType | TSRestType | TSNamedTupleMember | TSUnionType | TSIntersectionType | TSConditionalType | TSInferType | TSParenthesizedType | TSTypeOperator | TSIndexedAccessType | TSMappedType | TSLiteralType | TSExpressionWithTypeArguments | TSInterfaceDeclaration | TSInterfaceBody | TSTypeAliasDeclaration | TSInstantiationExpression | TSAsExpression | TSSatisfiesExpression | TSTypeAssertion | TSEnumDeclaration | TSEnumMember | TSModuleDeclaration | TSModuleBlock | TSImportType | TSImportEqualsDeclaration | TSExternalModuleReference | TSNonNullExpression | TSExportAssignment | TSNamespaceExportDeclaration | TSTypeAnnotation | TSTypeParameterInstantiation | TSTypeParameterDeclaration | TSTypeParameter;
type TSTypeElement = TSCallSignatureDeclaration | TSConstructSignatureDeclaration | TSPropertySignature | TSMethodSignature | TSIndexSignature;
type TSType = TSAnyKeyword | TSBooleanKeyword | TSBigIntKeyword | TSIntrinsicKeyword | TSNeverKeyword | TSNullKeyword | TSNumberKeyword | TSObjectKeyword | TSStringKeyword | TSSymbolKeyword | TSUndefinedKeyword | TSUnknownKeyword | TSVoidKeyword | TSThisType | TSFunctionType | TSConstructorType | TSTypeReference | TSTypePredicate | TSTypeQuery | TSTypeLiteral | TSArrayType | TSTupleType | TSOptionalType | TSRestType | TSUnionType | TSIntersectionType | TSConditionalType | TSInferType | TSParenthesizedType | TSTypeOperator | TSIndexedAccessType | TSMappedType | TSLiteralType | TSExpressionWithTypeArguments | TSImportType;
type TSBaseType = TSAnyKeyword | TSBooleanKeyword | TSBigIntKeyword | TSIntrinsicKeyword | TSNeverKeyword | TSNullKeyword | TSNumberKeyword | TSObjectKeyword | TSStringKeyword | TSSymbolKeyword | TSUndefinedKeyword | TSUnknownKeyword | TSVoidKeyword | TSThisType | TSLiteralType;
type ModuleDeclaration = ExportAllDeclaration | ExportDefaultDeclaration | ExportNamedDeclaration | ImportDeclaration;
interface Aliases {
    Standardized: Standardized;
    Expression: Expression;
    Binary: Binary;
    Scopable: Scopable;
    BlockParent: BlockParent;
    Block: Block;
    Statement: Statement;
    Terminatorless: Terminatorless;
    CompletionStatement: CompletionStatement;
    Conditional: Conditional;
    Loop: Loop;
    While: While;
    ExpressionWrapper: ExpressionWrapper;
    For: For;
    ForXStatement: ForXStatement;
    Function: Function;
    FunctionParent: FunctionParent;
    Pureish: Pureish;
    Declaration: Declaration;
    PatternLike: PatternLike;
    LVal: LVal;
    TSEntityName: TSEntityName;
    Literal: Literal;
    Immutable: Immutable;
    UserWhitespacable: UserWhitespacable;
    Method: Method;
    ObjectMember: ObjectMember;
    Property: Property;
    UnaryLike: UnaryLike;
    Pattern: Pattern;
    Class: Class;
    ImportOrExportDeclaration: ImportOrExportDeclaration;
    ExportDeclaration: ExportDeclaration;
    ModuleSpecifier: ModuleSpecifier;
    Accessor: Accessor;
    Private: Private;
    Flow: Flow;
    FlowType: FlowType;
    FlowBaseAnnotation: FlowBaseAnnotation;
    FlowDeclaration: FlowDeclaration;
    FlowPredicate: FlowPredicate;
    EnumBody: EnumBody;
    EnumMember: EnumMember;
    JSX: JSX;
    Miscellaneous: Miscellaneous;
    TypeScript: TypeScript;
    TSTypeElement: TSTypeElement;
    TSType: TSType;
    TSBaseType: TSBaseType;
    ModuleDeclaration: ModuleDeclaration;
}
type DeprecatedAliases = NumberLiteral | RegexLiteral | RestProperty | SpreadProperty;
interface ParentMaps {
    AnyTypeAnnotation: ArrayTypeAnnotation | DeclareExportDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | IndexedAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeIndexer | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalIndexedAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    ArgumentPlaceholder: CallExpression | NewExpression | OptionalCallExpression;
    ArrayExpression: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    ArrayPattern: ArrayPattern | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | CatchClause | ClassMethod | ClassPrivateMethod | ForInStatement | ForOfStatement | FunctionDeclaration | FunctionExpression | ObjectMethod | ObjectProperty | RestElement | TSCallSignatureDeclaration | TSConstructSignatureDeclaration | TSConstructorType | TSDeclareFunction | TSDeclareMethod | TSFunctionType | TSMethodSignature | VariableDeclarator;
    ArrayTypeAnnotation: ArrayTypeAnnotation | DeclareExportDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | IndexedAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeIndexer | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalIndexedAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    ArrowFunctionExpression: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    AssignmentExpression: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    AssignmentPattern: ArrayPattern | ArrowFunctionExpression | AssignmentExpression | ClassMethod | ClassPrivateMethod | ForInStatement | ForOfStatement | FunctionDeclaration | FunctionExpression | ObjectMethod | ObjectProperty | RestElement | TSDeclareFunction | TSDeclareMethod | TSParameterProperty | VariableDeclarator;
    AwaitExpression: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    BigIntLiteral: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSLiteralType | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    BinaryExpression: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    BindExpression: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    BlockStatement: ArrowFunctionExpression | BlockStatement | CatchClause | ClassMethod | ClassPrivateMethod | DeclareModule | DoExpression | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | FunctionDeclaration | FunctionExpression | IfStatement | LabeledStatement | ObjectMethod | Program | StaticBlock | SwitchCase | TSModuleBlock | TryStatement | WhileStatement | WithStatement;
    BooleanLiteral: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | EnumBooleanMember | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSLiteralType | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    BooleanLiteralTypeAnnotation: ArrayTypeAnnotation | DeclareExportDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | IndexedAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeIndexer | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalIndexedAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    BooleanTypeAnnotation: ArrayTypeAnnotation | DeclareExportDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | IndexedAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeIndexer | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalIndexedAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    BreakStatement: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    CallExpression: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    CatchClause: TryStatement;
    ClassAccessorProperty: ClassBody;
    ClassBody: ClassDeclaration | ClassExpression;
    ClassDeclaration: BlockStatement | DoWhileStatement | ExportDefaultDeclaration | ExportNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    ClassExpression: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    ClassImplements: ClassDeclaration | ClassExpression | DeclareClass | DeclareExportDeclaration | DeclaredPredicate;
    ClassMethod: ClassBody;
    ClassPrivateMethod: ClassBody;
    ClassPrivateProperty: ClassBody;
    ClassProperty: ClassBody;
    CommentBlock: File;
    CommentLine: File;
    ConditionalExpression: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    ContinueStatement: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    DebuggerStatement: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    DecimalLiteral: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    DeclareClass: BlockStatement | DeclareExportDeclaration | DeclaredPredicate | DoWhileStatement | ExportNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    DeclareExportAllDeclaration: BlockStatement | DeclareExportDeclaration | DeclaredPredicate | DoWhileStatement | ExportNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    DeclareExportDeclaration: BlockStatement | DeclareExportDeclaration | DeclaredPredicate | DoWhileStatement | ExportNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    DeclareFunction: BlockStatement | DeclareExportDeclaration | DeclaredPredicate | DoWhileStatement | ExportNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    DeclareInterface: BlockStatement | DeclareExportDeclaration | DeclaredPredicate | DoWhileStatement | ExportNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    DeclareModule: BlockStatement | DeclareExportDeclaration | DeclaredPredicate | DoWhileStatement | ExportNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    DeclareModuleExports: BlockStatement | DeclareExportDeclaration | DeclaredPredicate | DoWhileStatement | ExportNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    DeclareOpaqueType: BlockStatement | DeclareExportDeclaration | DeclaredPredicate | DoWhileStatement | ExportNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    DeclareTypeAlias: BlockStatement | DeclareExportDeclaration | DeclaredPredicate | DoWhileStatement | ExportNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    DeclareVariable: BlockStatement | DeclareExportDeclaration | DeclaredPredicate | DoWhileStatement | ExportNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    DeclaredPredicate: ArrowFunctionExpression | DeclareExportDeclaration | DeclareFunction | DeclaredPredicate | FunctionDeclaration | FunctionExpression;
    Decorator: ArrayPattern | AssignmentPattern | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateMethod | ClassPrivateProperty | ClassProperty | Identifier | ObjectMethod | ObjectPattern | ObjectProperty | RestElement | TSDeclareMethod | TSParameterProperty;
    Directive: BlockStatement | Program;
    DirectiveLiteral: Directive;
    DoExpression: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    DoWhileStatement: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    EmptyStatement: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    EmptyTypeAnnotation: ArrayTypeAnnotation | DeclareExportDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | IndexedAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeIndexer | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalIndexedAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    EnumBooleanBody: DeclareExportDeclaration | DeclaredPredicate | EnumDeclaration;
    EnumBooleanMember: DeclareExportDeclaration | DeclaredPredicate | EnumBooleanBody;
    EnumDeclaration: BlockStatement | DeclareExportDeclaration | DeclaredPredicate | DoWhileStatement | ExportNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    EnumDefaultedMember: DeclareExportDeclaration | DeclaredPredicate | EnumStringBody | EnumSymbolBody;
    EnumNumberBody: DeclareExportDeclaration | DeclaredPredicate | EnumDeclaration;
    EnumNumberMember: DeclareExportDeclaration | DeclaredPredicate | EnumNumberBody;
    EnumStringBody: DeclareExportDeclaration | DeclaredPredicate | EnumDeclaration;
    EnumStringMember: DeclareExportDeclaration | DeclaredPredicate | EnumStringBody;
    EnumSymbolBody: DeclareExportDeclaration | DeclaredPredicate | EnumDeclaration;
    ExistsTypeAnnotation: ArrayTypeAnnotation | DeclareExportDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | IndexedAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeIndexer | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalIndexedAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    ExportAllDeclaration: BlockStatement | DoWhileStatement | ExportNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    ExportDefaultDeclaration: BlockStatement | DoWhileStatement | ExportNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    ExportDefaultSpecifier: ExportNamedDeclaration;
    ExportNamedDeclaration: BlockStatement | DoWhileStatement | ExportNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    ExportNamespaceSpecifier: DeclareExportDeclaration | ExportNamedDeclaration;
    ExportSpecifier: DeclareExportDeclaration | ExportNamedDeclaration;
    ExpressionStatement: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    File: null;
    ForInStatement: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    ForOfStatement: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    ForStatement: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    FunctionDeclaration: BlockStatement | DoWhileStatement | ExportDefaultDeclaration | ExportNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    FunctionExpression: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    FunctionTypeAnnotation: ArrayTypeAnnotation | DeclareExportDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | IndexedAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeIndexer | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalIndexedAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    FunctionTypeParam: DeclareExportDeclaration | DeclaredPredicate | FunctionTypeAnnotation;
    GenericTypeAnnotation: ArrayTypeAnnotation | DeclareExportDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | IndexedAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeIndexer | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalIndexedAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    Identifier: ArrayExpression | ArrayPattern | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | BreakStatement | CallExpression | CatchClause | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassImplements | ClassMethod | ClassPrivateMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | ContinueStatement | DeclareClass | DeclareFunction | DeclareInterface | DeclareModule | DeclareOpaqueType | DeclareTypeAlias | DeclareVariable | Decorator | DoWhileStatement | EnumBooleanMember | EnumDeclaration | EnumDefaultedMember | EnumNumberMember | EnumStringMember | ExportDefaultDeclaration | ExportDefaultSpecifier | ExportNamespaceSpecifier | ExportSpecifier | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | FunctionDeclaration | FunctionExpression | FunctionTypeParam | GenericTypeAnnotation | IfStatement | ImportAttribute | ImportDefaultSpecifier | ImportExpression | ImportNamespaceSpecifier | ImportSpecifier | InterfaceDeclaration | InterfaceExtends | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LabeledStatement | LogicalExpression | MemberExpression | MetaProperty | NewExpression | ObjectMethod | ObjectProperty | ObjectTypeIndexer | ObjectTypeInternalSlot | ObjectTypeProperty | OpaqueType | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | Placeholder | PrivateName | QualifiedTypeIdentifier | RestElement | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSCallSignatureDeclaration | TSConstructSignatureDeclaration | TSConstructorType | TSDeclareFunction | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSExpressionWithTypeArguments | TSFunctionType | TSImportEqualsDeclaration | TSImportType | TSIndexSignature | TSInstantiationExpression | TSInterfaceDeclaration | TSMethodSignature | TSModuleDeclaration | TSNamedTupleMember | TSNamespaceExportDeclaration | TSNonNullExpression | TSParameterProperty | TSPropertySignature | TSQualifiedName | TSSatisfiesExpression | TSTypeAliasDeclaration | TSTypeAssertion | TSTypePredicate | TSTypeQuery | TSTypeReference | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeAlias | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    IfStatement: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    Import: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    ImportAttribute: ExportAllDeclaration | ExportNamedDeclaration | ImportDeclaration;
    ImportDeclaration: BlockStatement | DoWhileStatement | ExportNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    ImportDefaultSpecifier: ImportDeclaration;
    ImportExpression: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    ImportNamespaceSpecifier: ImportDeclaration;
    ImportSpecifier: ImportDeclaration;
    IndexedAccessType: ArrayTypeAnnotation | DeclareExportDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | IndexedAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeIndexer | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalIndexedAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    InferredPredicate: ArrowFunctionExpression | DeclareExportDeclaration | DeclaredPredicate | FunctionDeclaration | FunctionExpression;
    InterfaceDeclaration: BlockStatement | DeclareExportDeclaration | DeclaredPredicate | DoWhileStatement | ExportNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    InterfaceExtends: ClassDeclaration | ClassExpression | DeclareClass | DeclareExportDeclaration | DeclareInterface | DeclaredPredicate | InterfaceDeclaration | InterfaceTypeAnnotation;
    InterfaceTypeAnnotation: ArrayTypeAnnotation | DeclareExportDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | IndexedAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeIndexer | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalIndexedAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    InterpreterDirective: Program;
    IntersectionTypeAnnotation: ArrayTypeAnnotation | DeclareExportDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | IndexedAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeIndexer | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalIndexedAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    JSXAttribute: JSXOpeningElement;
    JSXClosingElement: JSXElement;
    JSXClosingFragment: JSXFragment;
    JSXElement: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXAttribute | JSXElement | JSXExpressionContainer | JSXFragment | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    JSXEmptyExpression: JSXExpressionContainer;
    JSXExpressionContainer: JSXAttribute | JSXElement | JSXFragment;
    JSXFragment: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXAttribute | JSXElement | JSXExpressionContainer | JSXFragment | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    JSXIdentifier: JSXAttribute | JSXClosingElement | JSXMemberExpression | JSXNamespacedName | JSXOpeningElement;
    JSXMemberExpression: JSXClosingElement | JSXMemberExpression | JSXOpeningElement;
    JSXNamespacedName: JSXAttribute | JSXClosingElement | JSXOpeningElement;
    JSXOpeningElement: JSXElement;
    JSXOpeningFragment: JSXFragment;
    JSXSpreadAttribute: JSXOpeningElement;
    JSXSpreadChild: JSXElement | JSXFragment;
    JSXText: JSXElement | JSXFragment;
    LabeledStatement: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    LogicalExpression: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    MemberExpression: ArrayExpression | ArrayPattern | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | RestElement | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    MetaProperty: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    MixedTypeAnnotation: ArrayTypeAnnotation | DeclareExportDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | IndexedAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeIndexer | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalIndexedAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    ModuleExpression: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    NewExpression: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    Noop: ArrayPattern | ArrowFunctionExpression | AssignmentPattern | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateMethod | ClassPrivateProperty | ClassProperty | FunctionDeclaration | FunctionExpression | Identifier | ObjectMethod | ObjectPattern | RestElement | TSDeclareFunction | TSDeclareMethod;
    NullLiteral: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    NullLiteralTypeAnnotation: ArrayTypeAnnotation | DeclareExportDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | IndexedAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeIndexer | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalIndexedAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    NullableTypeAnnotation: ArrayTypeAnnotation | DeclareExportDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | IndexedAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeIndexer | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalIndexedAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    NumberLiteral: null;
    NumberLiteralTypeAnnotation: ArrayTypeAnnotation | DeclareExportDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | IndexedAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeIndexer | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalIndexedAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    NumberTypeAnnotation: ArrayTypeAnnotation | DeclareExportDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | IndexedAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeIndexer | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalIndexedAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    NumericLiteral: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | EnumNumberMember | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSLiteralType | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    ObjectExpression: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    ObjectMethod: ObjectExpression;
    ObjectPattern: ArrayPattern | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | CatchClause | ClassMethod | ClassPrivateMethod | ForInStatement | ForOfStatement | FunctionDeclaration | FunctionExpression | ObjectMethod | ObjectProperty | RestElement | TSCallSignatureDeclaration | TSConstructSignatureDeclaration | TSConstructorType | TSDeclareFunction | TSDeclareMethod | TSFunctionType | TSMethodSignature | VariableDeclarator;
    ObjectProperty: ObjectExpression | ObjectPattern | RecordExpression;
    ObjectTypeAnnotation: ArrayTypeAnnotation | DeclareClass | DeclareExportDeclaration | DeclareInterface | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | IndexedAccessType | InterfaceDeclaration | InterfaceTypeAnnotation | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeIndexer | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalIndexedAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    ObjectTypeCallProperty: DeclareExportDeclaration | DeclaredPredicate | ObjectTypeAnnotation;
    ObjectTypeIndexer: DeclareExportDeclaration | DeclaredPredicate | ObjectTypeAnnotation;
    ObjectTypeInternalSlot: DeclareExportDeclaration | DeclaredPredicate | ObjectTypeAnnotation;
    ObjectTypeProperty: DeclareExportDeclaration | DeclaredPredicate | ObjectTypeAnnotation;
    ObjectTypeSpreadProperty: DeclareExportDeclaration | DeclaredPredicate | ObjectTypeAnnotation;
    OpaqueType: BlockStatement | DeclareExportDeclaration | DeclaredPredicate | DoWhileStatement | ExportNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    OptionalCallExpression: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    OptionalIndexedAccessType: ArrayTypeAnnotation | DeclareExportDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | IndexedAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeIndexer | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalIndexedAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    OptionalMemberExpression: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    ParenthesizedExpression: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    PipelineBareFunction: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    PipelinePrimaryTopicReference: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    PipelineTopicExpression: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    Placeholder: Node;
    PrivateName: BinaryExpression | ClassAccessorProperty | ClassPrivateMethod | ClassPrivateProperty | MemberExpression | ObjectProperty;
    Program: File | ModuleExpression;
    QualifiedTypeIdentifier: DeclareExportDeclaration | DeclaredPredicate | GenericTypeAnnotation | InterfaceExtends | QualifiedTypeIdentifier;
    RecordExpression: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    RegExpLiteral: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    RegexLiteral: null;
    RestElement: ArrayPattern | ArrowFunctionExpression | AssignmentExpression | ClassMethod | ClassPrivateMethod | ForInStatement | ForOfStatement | FunctionDeclaration | FunctionExpression | ObjectMethod | ObjectPattern | ObjectProperty | RestElement | TSCallSignatureDeclaration | TSConstructSignatureDeclaration | TSConstructorType | TSDeclareFunction | TSDeclareMethod | TSFunctionType | TSMethodSignature | VariableDeclarator;
    RestProperty: null;
    ReturnStatement: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    SequenceExpression: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    SpreadElement: ArrayExpression | CallExpression | NewExpression | ObjectExpression | OptionalCallExpression | RecordExpression | TupleExpression;
    SpreadProperty: null;
    StaticBlock: ClassBody;
    StringLiteral: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | DeclareExportAllDeclaration | DeclareExportDeclaration | DeclareModule | Decorator | DoWhileStatement | EnumStringMember | ExportAllDeclaration | ExportDefaultDeclaration | ExportNamedDeclaration | ExportSpecifier | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportAttribute | ImportDeclaration | ImportExpression | ImportSpecifier | JSXAttribute | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | ObjectTypeProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSExternalModuleReference | TSImportType | TSInstantiationExpression | TSLiteralType | TSMethodSignature | TSModuleDeclaration | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    StringLiteralTypeAnnotation: ArrayTypeAnnotation | DeclareExportDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | IndexedAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeIndexer | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalIndexedAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    StringTypeAnnotation: ArrayTypeAnnotation | DeclareExportDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | IndexedAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeIndexer | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalIndexedAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    Super: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    SwitchCase: SwitchStatement;
    SwitchStatement: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    SymbolTypeAnnotation: ArrayTypeAnnotation | DeclareExportDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | IndexedAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeIndexer | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalIndexedAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    TSAnyKeyword: TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSArrayType: TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSAsExpression: ArrayExpression | ArrayPattern | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | RestElement | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    TSBigIntKeyword: TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSBooleanKeyword: TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSCallSignatureDeclaration: TSInterfaceBody | TSTypeLiteral;
    TSConditionalType: TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSConstructSignatureDeclaration: TSInterfaceBody | TSTypeLiteral;
    TSConstructorType: TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSDeclareFunction: BlockStatement | DoWhileStatement | ExportDefaultDeclaration | ExportNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    TSDeclareMethod: ClassBody;
    TSEnumDeclaration: BlockStatement | DoWhileStatement | ExportNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    TSEnumMember: TSEnumDeclaration;
    TSExportAssignment: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    TSExpressionWithTypeArguments: ClassDeclaration | ClassExpression | TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSInterfaceDeclaration | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSExternalModuleReference: TSImportEqualsDeclaration;
    TSFunctionType: TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSImportEqualsDeclaration: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    TSImportType: TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSTypeQuery | TSUnionType | TemplateLiteral;
    TSIndexSignature: ClassBody | TSInterfaceBody | TSTypeLiteral;
    TSIndexedAccessType: TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSInferType: TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSInstantiationExpression: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    TSInterfaceBody: TSInterfaceDeclaration;
    TSInterfaceDeclaration: BlockStatement | DoWhileStatement | ExportNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    TSIntersectionType: TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSIntrinsicKeyword: TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSLiteralType: TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSMappedType: TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSMethodSignature: TSInterfaceBody | TSTypeLiteral;
    TSModuleBlock: TSModuleDeclaration;
    TSModuleDeclaration: BlockStatement | DoWhileStatement | ExportNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | TSModuleDeclaration | WhileStatement | WithStatement;
    TSNamedTupleMember: TSTupleType;
    TSNamespaceExportDeclaration: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    TSNeverKeyword: TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSNonNullExpression: ArrayExpression | ArrayPattern | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | RestElement | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    TSNullKeyword: TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSNumberKeyword: TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSObjectKeyword: TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSOptionalType: TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSParameterProperty: ArrayPattern | AssignmentExpression | ClassMethod | ClassPrivateMethod | ForInStatement | ForOfStatement | RestElement | TSDeclareMethod | VariableDeclarator;
    TSParenthesizedType: TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSPropertySignature: TSInterfaceBody | TSTypeLiteral;
    TSQualifiedName: TSExpressionWithTypeArguments | TSImportEqualsDeclaration | TSImportType | TSQualifiedName | TSTypeQuery | TSTypeReference;
    TSRestType: TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSSatisfiesExpression: ArrayExpression | ArrayPattern | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | RestElement | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    TSStringKeyword: TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSSymbolKeyword: TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSThisType: TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSTypePredicate | TSUnionType | TemplateLiteral;
    TSTupleType: TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSTypeAliasDeclaration: BlockStatement | DoWhileStatement | ExportNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    TSTypeAnnotation: ArrayPattern | ArrowFunctionExpression | AssignmentPattern | ClassAccessorProperty | ClassMethod | ClassPrivateMethod | ClassPrivateProperty | ClassProperty | FunctionDeclaration | FunctionExpression | Identifier | ObjectMethod | ObjectPattern | RestElement | TSCallSignatureDeclaration | TSConstructSignatureDeclaration | TSConstructorType | TSDeclareFunction | TSDeclareMethod | TSFunctionType | TSIndexSignature | TSMethodSignature | TSPropertySignature | TSTypePredicate;
    TSTypeAssertion: ArrayExpression | ArrayPattern | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | RestElement | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    TSTypeLiteral: TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSTypeOperator: TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSTypeParameter: TSInferType | TSMappedType | TSTypeParameterDeclaration;
    TSTypeParameterDeclaration: ArrowFunctionExpression | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateMethod | FunctionDeclaration | FunctionExpression | ObjectMethod | TSCallSignatureDeclaration | TSConstructSignatureDeclaration | TSConstructorType | TSDeclareFunction | TSDeclareMethod | TSFunctionType | TSInterfaceDeclaration | TSMethodSignature | TSTypeAliasDeclaration;
    TSTypeParameterInstantiation: CallExpression | ClassDeclaration | ClassExpression | JSXOpeningElement | NewExpression | OptionalCallExpression | TSExpressionWithTypeArguments | TSImportType | TSInstantiationExpression | TSTypeQuery | TSTypeReference | TaggedTemplateExpression;
    TSTypePredicate: TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSTypeQuery: TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSTypeReference: TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSUndefinedKeyword: TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSUnionType: TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSUnknownKeyword: TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSVoidKeyword: TSArrayType | TSAsExpression | TSConditionalType | TSIndexedAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesExpression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TaggedTemplateExpression: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    TemplateElement: TemplateLiteral;
    TemplateLiteral: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSLiteralType | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    ThisExpression: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    ThisTypeAnnotation: ArrayTypeAnnotation | DeclareExportDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | IndexedAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeIndexer | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalIndexedAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    ThrowStatement: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    TopicReference: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    TryStatement: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    TupleExpression: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    TupleTypeAnnotation: ArrayTypeAnnotation | DeclareExportDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | IndexedAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeIndexer | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalIndexedAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    TypeAlias: BlockStatement | DeclareExportDeclaration | DeclaredPredicate | DoWhileStatement | ExportNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    TypeAnnotation: ArrayPattern | ArrowFunctionExpression | AssignmentPattern | ClassAccessorProperty | ClassMethod | ClassPrivateMethod | ClassPrivateProperty | ClassProperty | DeclareExportDeclaration | DeclareModuleExports | DeclaredPredicate | FunctionDeclaration | FunctionExpression | Identifier | ObjectMethod | ObjectPattern | RestElement | TypeCastExpression | TypeParameter;
    TypeCastExpression: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | DeclareExportDeclaration | DeclaredPredicate | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    TypeParameter: DeclareExportDeclaration | DeclaredPredicate | TypeParameterDeclaration;
    TypeParameterDeclaration: ArrowFunctionExpression | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateMethod | DeclareClass | DeclareExportDeclaration | DeclareInterface | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionDeclaration | FunctionExpression | FunctionTypeAnnotation | InterfaceDeclaration | ObjectMethod | OpaqueType | TypeAlias;
    TypeParameterInstantiation: CallExpression | ClassDeclaration | ClassExpression | ClassImplements | DeclareExportDeclaration | DeclaredPredicate | GenericTypeAnnotation | InterfaceExtends | JSXOpeningElement | NewExpression | OptionalCallExpression | TaggedTemplateExpression;
    TypeofTypeAnnotation: ArrayTypeAnnotation | DeclareExportDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | IndexedAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeIndexer | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalIndexedAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    UnaryExpression: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSLiteralType | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    UnionTypeAnnotation: ArrayTypeAnnotation | DeclareExportDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | IndexedAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeIndexer | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalIndexedAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    UpdateExpression: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
    V8IntrinsicIdentifier: CallExpression | NewExpression;
    VariableDeclaration: BlockStatement | DoWhileStatement | ExportNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    VariableDeclarator: VariableDeclaration;
    Variance: ClassAccessorProperty | ClassPrivateProperty | ClassProperty | DeclareExportDeclaration | DeclaredPredicate | ObjectTypeIndexer | ObjectTypeProperty | TypeParameter;
    VoidTypeAnnotation: ArrayTypeAnnotation | DeclareExportDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | IndexedAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeIndexer | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalIndexedAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    WhileStatement: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    WithStatement: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    YieldExpression: ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AssignmentPattern | AwaitExpression | BinaryExpression | BindExpression | CallExpression | ClassAccessorProperty | ClassDeclaration | ClassExpression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalExpression | Decorator | DoWhileStatement | ExportDefaultDeclaration | ExpressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportExpression | JSXExpressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalExpression | MemberExpression | NewExpression | ObjectMethod | ObjectProperty | OptionalCallExpression | OptionalMemberExpression | ParenthesizedExpression | PipelineBareFunction | PipelineTopicExpression | ReturnStatement | SequenceExpression | SpreadElement | SwitchCase | SwitchStatement | TSAsExpression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSExportAssignment | TSImportType | TSInstantiationExpression | TSMethodSignature | TSNonNullExpression | TSPropertySignature | TSSatisfiesExpression | TSTypeAssertion | TaggedTemplateExpression | TemplateLiteral | ThrowStatement | TupleExpression | TypeCastExpression | UnaryExpression | UpdateExpression | VariableDeclarator | WhileStatement | WithStatement | YieldExpression;
}

declare function deprecationWarning(oldName: string, newName: string, prefix?: string): void;

declare const react: {
    isReactComponent: (member: Node) => boolean;
    isCompatTag: typeof isCompatTag;
    buildChildren: typeof buildChildren;
};

export { ACCESSOR_TYPES, ALIAS_KEYS, ASSIGNMENT_OPERATORS, Accessor, Aliases, AnyTypeAnnotation, ArgumentPlaceholder, ArrayExpression, ArrayPattern, ArrayTypeAnnotation, ArrowFunctionExpression, AssignmentExpression, AssignmentPattern, AwaitExpression, BINARY_OPERATORS, BINARY_TYPES, BLOCKPARENT_TYPES, BLOCK_SCOPED_SYMBOL, BLOCK_TYPES, BOOLEAN_BINARY_OPERATORS, BOOLEAN_NUMBER_BINARY_OPERATORS, BOOLEAN_UNARY_OPERATORS, BUILDER_KEYS, BigIntLiteral, Binary, BinaryExpression, BindExpression, Block, BlockParent, BlockStatement, BooleanLiteral, BooleanLiteralTypeAnnotation, BooleanTypeAnnotation, BreakStatement, CLASS_TYPES, COMMENT_KEYS, COMPARISON_BINARY_OPERATORS, COMPLETIONSTATEMENT_TYPES, CONDITIONAL_TYPES, CallExpression, CatchClause, Class, ClassAccessorProperty, ClassBody, ClassDeclaration, ClassExpression, ClassImplements, ClassMethod, ClassPrivateMethod, ClassPrivateProperty, ClassProperty, Comment, CommentBlock, CommentLine, CommentTypeShorthand, CompletionStatement, Conditional, ConditionalExpression, ContinueStatement, DECLARATION_TYPES, DEPRECATED_ALIASES, DEPRECATED_KEYS, DebuggerStatement, DecimalLiteral, Declaration, DeclareClass, DeclareExportAllDeclaration, DeclareExportDeclaration, DeclareFunction, DeclareInterface, DeclareModule, DeclareModuleExports, DeclareOpaqueType, DeclareTypeAlias, DeclareVariable, DeclaredPredicate, Decorator, DeprecatedAliases, Directive, DirectiveLiteral, DoExpression, DoWhileStatement, ENUMBODY_TYPES, ENUMMEMBER_TYPES, EQUALITY_BINARY_OPERATORS, EXPORTDECLARATION_TYPES, EXPRESSIONWRAPPER_TYPES, EXPRESSION_TYPES, EmptyStatement, EmptyTypeAnnotation, EnumBody, EnumBooleanBody, EnumBooleanMember, EnumDeclaration, EnumDefaultedMember, EnumMember, EnumNumberBody, EnumNumberMember, EnumStringBody, EnumStringMember, EnumSymbolBody, ExistsTypeAnnotation, ExportAllDeclaration, ExportDeclaration, ExportDefaultDeclaration, ExportDefaultSpecifier, ExportNamedDeclaration, ExportNamespaceSpecifier, ExportSpecifier, Expression, ExpressionStatement, ExpressionWrapper, FLATTENABLE_KEYS, FLIPPED_ALIAS_KEYS, FLOWBASEANNOTATION_TYPES, FLOWDECLARATION_TYPES, FLOWPREDICATE_TYPES, FLOWTYPE_TYPES, FLOW_TYPES, FORXSTATEMENT_TYPES, FOR_INIT_KEYS, FOR_TYPES, FUNCTIONPARENT_TYPES, FUNCTION_TYPES, FieldOptions, File, Flow, FlowBaseAnnotation, FlowDeclaration, FlowPredicate, FlowType, For, ForInStatement, ForOfStatement, ForStatement, ForXStatement, Function, FunctionDeclaration, FunctionExpression, FunctionParent, FunctionTypeAnnotation, FunctionTypeParam, GenericTypeAnnotation, IMMUTABLE_TYPES, IMPORTOREXPORTDECLARATION_TYPES, INHERIT_KEYS, Identifier, IfStatement, Immutable, Import, ImportAttribute, ImportDeclaration, ImportDefaultSpecifier, ImportExpression, ImportNamespaceSpecifier, ImportOrExportDeclaration, ImportSpecifier, IndexedAccessType, InferredPredicate, InterfaceDeclaration, InterfaceExtends, InterfaceTypeAnnotation, InterpreterDirective, IntersectionTypeAnnotation, JSX, JSXAttribute, JSXClosingElement, JSXClosingFragment, JSXElement, JSXEmptyExpression, JSXExpressionContainer, JSXFragment, JSXIdentifier, JSXMemberExpression, JSXNamespacedName, JSXOpeningElement, JSXOpeningFragment, JSXSpreadAttribute, JSXSpreadChild, JSXText, JSX_TYPES, LITERAL_TYPES, LOGICAL_OPERATORS, LOOP_TYPES, LVAL_TYPES, LVal, LabeledStatement, Literal, LogicalExpression, Loop, METHOD_TYPES, MISCELLANEOUS_TYPES, MODULEDECLARATION_TYPES, MODULESPECIFIER_TYPES, MemberExpression, MetaProperty, Method, Miscellaneous, MixedTypeAnnotation, ModuleDeclaration, ModuleExpression, ModuleSpecifier, NODE_FIELDS, NODE_PARENT_VALIDATIONS, NOT_LOCAL_BINDING, NUMBER_BINARY_OPERATORS, NUMBER_UNARY_OPERATORS, NewExpression, Node, Noop, NullLiteral, NullLiteralTypeAnnotation, NullableTypeAnnotation, NumberLiteral, NumberLiteralTypeAnnotation, NumberTypeAnnotation, NumericLiteral, OBJECTMEMBER_TYPES, ObjectExpression, ObjectMember, ObjectMethod, ObjectPattern, ObjectProperty, ObjectTypeAnnotation, ObjectTypeCallProperty, ObjectTypeIndexer, ObjectTypeInternalSlot, ObjectTypeProperty, ObjectTypeSpreadProperty, OpaqueType, OptionalCallExpression, OptionalIndexedAccessType, OptionalMemberExpression, PATTERNLIKE_TYPES, PATTERN_TYPES, PLACEHOLDERS, PLACEHOLDERS_ALIAS, PLACEHOLDERS_FLIPPED_ALIAS, PRIVATE_TYPES, PROPERTY_TYPES, PUREISH_TYPES, ParentMaps, ParenthesizedExpression, Pattern, PatternLike, PipelineBareFunction, PipelinePrimaryTopicReference, PipelineTopicExpression, Placeholder, Private, PrivateName, Program, Property, Pureish, QualifiedTypeIdentifier, RecordExpression, RegExpLiteral, RegexLiteral, Options as RemovePropertiesOptions, RestElement, RestProperty, ReturnStatement, SCOPABLE_TYPES, STANDARDIZED_TYPES, STATEMENT_OR_BLOCK_KEYS, STATEMENT_TYPES, STRING_UNARY_OPERATORS, Scopable, SequenceExpression, SourceLocation, SpreadElement, SpreadProperty, Standardized, Statement, StaticBlock, StringLiteral, StringLiteralTypeAnnotation, StringTypeAnnotation, Super, SwitchCase, SwitchStatement, SymbolTypeAnnotation, TERMINATORLESS_TYPES, TSAnyKeyword, TSArrayType, TSAsExpression, TSBASETYPE_TYPES, TSBaseType, TSBigIntKeyword, TSBooleanKeyword, TSCallSignatureDeclaration, TSConditionalType, TSConstructSignatureDeclaration, TSConstructorType, TSDeclareFunction, TSDeclareMethod, TSENTITYNAME_TYPES, TSEntityName, TSEnumDeclaration, TSEnumMember, TSExportAssignment, TSExpressionWithTypeArguments, TSExternalModuleReference, TSFunctionType, TSImportEqualsDeclaration, TSImportType, TSIndexSignature, TSIndexedAccessType, TSInferType, TSInstantiationExpression, TSInterfaceBody, TSInterfaceDeclaration, TSIntersectionType, TSIntrinsicKeyword, TSLiteralType, TSMappedType, TSMethodSignature, TSModuleBlock, TSModuleDeclaration, TSNamedTupleMember, TSNamespaceExportDeclaration, TSNeverKeyword, TSNonNullExpression, TSNullKeyword, TSNumberKeyword, TSObjectKeyword, TSOptionalType, TSParameterProperty, TSParenthesizedType, TSPropertySignature, TSQualifiedName, TSRestType, TSSatisfiesExpression, TSStringKeyword, TSSymbolKeyword, TSTYPEELEMENT_TYPES, TSTYPE_TYPES, TSThisType, TSTupleType, TSType, TSTypeAliasDeclaration, TSTypeAnnotation, TSTypeAssertion, TSTypeElement, TSTypeLiteral, TSTypeOperator, TSTypeParameter, TSTypeParameterDeclaration, TSTypeParameterInstantiation, TSTypePredicate, TSTypeQuery, TSTypeReference, TSUndefinedKeyword, TSUnionType, TSUnknownKeyword, TSVoidKeyword, TYPES, TYPESCRIPT_TYPES, TaggedTemplateExpression, TemplateElement, TemplateLiteral, Terminatorless, ThisExpression, ThisTypeAnnotation, ThrowStatement, TopicReference, TraversalAncestors, TraversalHandler, TraversalHandlers, TryStatement, TupleExpression, TupleTypeAnnotation, TypeAlias, TypeAnnotation, TypeCastExpression, TypeParameter, TypeParameterDeclaration, TypeParameterInstantiation, TypeScript, TypeofTypeAnnotation, UNARYLIKE_TYPES, UNARY_OPERATORS, UPDATE_OPERATORS, USERWHITESPACABLE_TYPES, UnaryExpression, UnaryLike, UnionTypeAnnotation, UpdateExpression, UserWhitespacable, V8IntrinsicIdentifier, VISITOR_KEYS, VariableDeclaration, VariableDeclarator, Variance, VoidTypeAnnotation, WHILE_TYPES, While, WhileStatement, WithStatement, YieldExpression, deprecationWarning as __internal__deprecationWarning, addComment, addComments, anyTypeAnnotation, appendToMemberExpression, argumentPlaceholder, arrayExpression, arrayPattern, arrayTypeAnnotation, arrowFunctionExpression, assertAccessor, assertAnyTypeAnnotation, assertArgumentPlaceholder, assertArrayExpression, assertArrayPattern, assertArrayTypeAnnotation, assertArrowFunctionExpression, assertAssignmentExpression, assertAssignmentPattern, assertAwaitExpression, assertBigIntLiteral, assertBinary, assertBinaryExpression, assertBindExpression, assertBlock, assertBlockParent, assertBlockStatement, assertBooleanLiteral, assertBooleanLiteralTypeAnnotation, assertBooleanTypeAnnotation, assertBreakStatement, assertCallExpression, assertCatchClause, assertClass, assertClassAccessorProperty, assertClassBody, assertClassDeclaration, assertClassExpression, assertClassImplements, assertClassMethod, assertClassPrivateMethod, assertClassPrivateProperty, assertClassProperty, assertCompletionStatement, assertConditional, assertConditionalExpression, assertContinueStatement, assertDebuggerStatement, assertDecimalLiteral, assertDeclaration, assertDeclareClass, assertDeclareExportAllDeclaration, assertDeclareExportDeclaration, assertDeclareFunction, assertDeclareInterface, assertDeclareModule, assertDeclareModuleExports, assertDeclareOpaqueType, assertDeclareTypeAlias, assertDeclareVariable, assertDeclaredPredicate, assertDecorator, assertDirective, assertDirectiveLiteral, assertDoExpression, assertDoWhileStatement, assertEmptyStatement, assertEmptyTypeAnnotation, assertEnumBody, assertEnumBooleanBody, assertEnumBooleanMember, assertEnumDeclaration, assertEnumDefaultedMember, assertEnumMember, assertEnumNumberBody, assertEnumNumberMember, assertEnumStringBody, assertEnumStringMember, assertEnumSymbolBody, assertExistsTypeAnnotation, assertExportAllDeclaration, assertExportDeclaration, assertExportDefaultDeclaration, assertExportDefaultSpecifier, assertExportNamedDeclaration, assertExportNamespaceSpecifier, assertExportSpecifier, assertExpression, assertExpressionStatement, assertExpressionWrapper, assertFile, assertFlow, assertFlowBaseAnnotation, assertFlowDeclaration, assertFlowPredicate, assertFlowType, assertFor, assertForInStatement, assertForOfStatement, assertForStatement, assertForXStatement, assertFunction, assertFunctionDeclaration, assertFunctionExpression, assertFunctionParent, assertFunctionTypeAnnotation, assertFunctionTypeParam, assertGenericTypeAnnotation, assertIdentifier, assertIfStatement, assertImmutable, assertImport, assertImportAttribute, assertImportDeclaration, assertImportDefaultSpecifier, assertImportExpression, assertImportNamespaceSpecifier, assertImportOrExportDeclaration, assertImportSpecifier, assertIndexedAccessType, assertInferredPredicate, assertInterfaceDeclaration, assertInterfaceExtends, assertInterfaceTypeAnnotation, assertInterpreterDirective, assertIntersectionTypeAnnotation, assertJSX, assertJSXAttribute, assertJSXClosingElement, assertJSXClosingFragment, assertJSXElement, assertJSXEmptyExpression, assertJSXExpressionContainer, assertJSXFragment, assertJSXIdentifier, assertJSXMemberExpression, assertJSXNamespacedName, assertJSXOpeningElement, assertJSXOpeningFragment, assertJSXSpreadAttribute, assertJSXSpreadChild, assertJSXText, assertLVal, assertLabeledStatement, assertLiteral, assertLogicalExpression, assertLoop, assertMemberExpression, assertMetaProperty, assertMethod, assertMiscellaneous, assertMixedTypeAnnotation, assertModuleDeclaration, assertModuleExpression, assertModuleSpecifier, assertNewExpression, assertNode, assertNoop, assertNullLiteral, assertNullLiteralTypeAnnotation, assertNullableTypeAnnotation, assertNumberLiteral, assertNumberLiteralTypeAnnotation, assertNumberTypeAnnotation, assertNumericLiteral, assertObjectExpression, assertObjectMember, assertObjectMethod, assertObjectPattern, assertObjectProperty, assertObjectTypeAnnotation, assertObjectTypeCallProperty, assertObjectTypeIndexer, assertObjectTypeInternalSlot, assertObjectTypeProperty, assertObjectTypeSpreadProperty, assertOpaqueType, assertOptionalCallExpression, assertOptionalIndexedAccessType, assertOptionalMemberExpression, assertParenthesizedExpression, assertPattern, assertPatternLike, assertPipelineBareFunction, assertPipelinePrimaryTopicReference, assertPipelineTopicExpression, assertPlaceholder, assertPrivate, assertPrivateName, assertProgram, assertProperty, assertPureish, assertQualifiedTypeIdentifier, assertRecordExpression, assertRegExpLiteral, assertRegexLiteral, assertRestElement, assertRestProperty, assertReturnStatement, assertScopable, assertSequenceExpression, assertSpreadElement, assertSpreadProperty, assertStandardized, assertStatement, assertStaticBlock, assertStringLiteral, assertStringLiteralTypeAnnotation, assertStringTypeAnnotation, assertSuper, assertSwitchCase, assertSwitchStatement, assertSymbolTypeAnnotation, assertTSAnyKeyword, assertTSArrayType, assertTSAsExpression, assertTSBaseType, assertTSBigIntKeyword, assertTSBooleanKeyword, assertTSCallSignatureDeclaration, assertTSConditionalType, assertTSConstructSignatureDeclaration, assertTSConstructorType, assertTSDeclareFunction, assertTSDeclareMethod, assertTSEntityName, assertTSEnumDeclaration, assertTSEnumMember, assertTSExportAssignment, assertTSExpressionWithTypeArguments, assertTSExternalModuleReference, assertTSFunctionType, assertTSImportEqualsDeclaration, assertTSImportType, assertTSIndexSignature, assertTSIndexedAccessType, assertTSInferType, assertTSInstantiationExpression, assertTSInterfaceBody, assertTSInterfaceDeclaration, assertTSIntersectionType, assertTSIntrinsicKeyword, assertTSLiteralType, assertTSMappedType, assertTSMethodSignature, assertTSModuleBlock, assertTSModuleDeclaration, assertTSNamedTupleMember, assertTSNamespaceExportDeclaration, assertTSNeverKeyword, assertTSNonNullExpression, assertTSNullKeyword, assertTSNumberKeyword, assertTSObjectKeyword, assertTSOptionalType, assertTSParameterProperty, assertTSParenthesizedType, assertTSPropertySignature, assertTSQualifiedName, assertTSRestType, assertTSSatisfiesExpression, assertTSStringKeyword, assertTSSymbolKeyword, assertTSThisType, assertTSTupleType, assertTSType, assertTSTypeAliasDeclaration, assertTSTypeAnnotation, assertTSTypeAssertion, assertTSTypeElement, assertTSTypeLiteral, assertTSTypeOperator, assertTSTypeParameter, assertTSTypeParameterDeclaration, assertTSTypeParameterInstantiation, assertTSTypePredicate, assertTSTypeQuery, assertTSTypeReference, assertTSUndefinedKeyword, assertTSUnionType, assertTSUnknownKeyword, assertTSVoidKeyword, assertTaggedTemplateExpression, assertTemplateElement, assertTemplateLiteral, assertTerminatorless, assertThisExpression, assertThisTypeAnnotation, assertThrowStatement, assertTopicReference, assertTryStatement, assertTupleExpression, assertTupleTypeAnnotation, assertTypeAlias, assertTypeAnnotation, assertTypeCastExpression, assertTypeParameter, assertTypeParameterDeclaration, assertTypeParameterInstantiation, assertTypeScript, assertTypeofTypeAnnotation, assertUnaryExpression, assertUnaryLike, assertUnionTypeAnnotation, assertUpdateExpression, assertUserWhitespacable, assertV8IntrinsicIdentifier, assertVariableDeclaration, assertVariableDeclarator, assertVariance, assertVoidTypeAnnotation, assertWhile, assertWhileStatement, assertWithStatement, assertYieldExpression, assignmentExpression, assignmentPattern, awaitExpression, bigIntLiteral, binaryExpression, bindExpression, blockStatement, booleanLiteral, booleanLiteralTypeAnnotation, booleanTypeAnnotation, breakStatement, buildMatchMemberExpression, buildUndefinedNode, callExpression, catchClause, classAccessorProperty, classBody, classDeclaration, classExpression, classImplements, classMethod, classPrivateMethod, classPrivateProperty, classProperty, clone, cloneDeep, cloneDeepWithoutLoc, cloneNode, cloneWithoutLoc, conditionalExpression, continueStatement, createFlowUnionType, createTSUnionType, _default$4 as createTypeAnnotationBasedOnTypeof, createFlowUnionType as createUnionTypeAnnotation, debuggerStatement, decimalLiteral, declareClass, declareExportAllDeclaration, declareExportDeclaration, declareFunction, declareInterface, declareModule, declareModuleExports, declareOpaqueType, declareTypeAlias, declareVariable, declaredPredicate, decorator, directive, directiveLiteral, doExpression, doWhileStatement, emptyStatement, emptyTypeAnnotation, ensureBlock, enumBooleanBody, enumBooleanMember, enumDeclaration, enumDefaultedMember, enumNumberBody, enumNumberMember, enumStringBody, enumStringMember, enumSymbolBody, existsTypeAnnotation, exportAllDeclaration, exportDefaultDeclaration, exportDefaultSpecifier, exportNamedDeclaration, exportNamespaceSpecifier, exportSpecifier, expressionStatement, file, forInStatement, forOfStatement, forStatement, functionDeclaration, functionExpression, functionTypeAnnotation, functionTypeParam, genericTypeAnnotation, getAssignmentIdentifiers, getBindingIdentifiers, getFunctionName, _default as getOuterBindingIdentifiers, identifier, ifStatement, _import as import, importAttribute, importDeclaration, importDefaultSpecifier, importExpression, importNamespaceSpecifier, importSpecifier, indexedAccessType, inferredPredicate, inheritInnerComments, inheritLeadingComments, inheritTrailingComments, inherits, inheritsComments, interfaceDeclaration, interfaceExtends, interfaceTypeAnnotation, interpreterDirective, intersectionTypeAnnotation, is, isAccessor, isAnyTypeAnnotation, isArgumentPlaceholder, isArrayExpression, isArrayPattern, isArrayTypeAnnotation, isArrowFunctionExpression, isAssignmentExpression, isAssignmentPattern, isAwaitExpression, isBigIntLiteral, isBinary, isBinaryExpression, isBindExpression, isBinding, isBlock, isBlockParent, isBlockScoped, isBlockStatement, isBooleanLiteral, isBooleanLiteralTypeAnnotation, isBooleanTypeAnnotation, isBreakStatement, isCallExpression, isCatchClause, isClass, isClassAccessorProperty, isClassBody, isClassDeclaration, isClassExpression, isClassImplements, isClassMethod, isClassPrivateMethod, isClassPrivateProperty, isClassProperty, isCompletionStatement, isConditional, isConditionalExpression, isContinueStatement, isDebuggerStatement, isDecimalLiteral, isDeclaration, isDeclareClass, isDeclareExportAllDeclaration, isDeclareExportDeclaration, isDeclareFunction, isDeclareInterface, isDeclareModule, isDeclareModuleExports, isDeclareOpaqueType, isDeclareTypeAlias, isDeclareVariable, isDeclaredPredicate, isDecorator, isDirective, isDirectiveLiteral, isDoExpression, isDoWhileStatement, isEmptyStatement, isEmptyTypeAnnotation, isEnumBody, isEnumBooleanBody, isEnumBooleanMember, isEnumDeclaration, isEnumDefaultedMember, isEnumMember, isEnumNumberBody, isEnumNumberMember, isEnumStringBody, isEnumStringMember, isEnumSymbolBody, isExistsTypeAnnotation, isExportAllDeclaration, isExportDeclaration, isExportDefaultDeclaration, isExportDefaultSpecifier, isExportNamedDeclaration, isExportNamespaceSpecifier, isExportSpecifier, isExpression, isExpressionStatement, isExpressionWrapper, isFile, isFlow, isFlowBaseAnnotation, isFlowDeclaration, isFlowPredicate, isFlowType, isFor, isForInStatement, isForOfStatement, isForStatement, isForXStatement, isFunction, isFunctionDeclaration, isFunctionExpression, isFunctionParent, isFunctionTypeAnnotation, isFunctionTypeParam, isGenericTypeAnnotation, isIdentifier, isIfStatement, isImmutable, isImport, isImportAttribute, isImportDeclaration, isImportDefaultSpecifier, isImportExpression, isImportNamespaceSpecifier, isImportOrExportDeclaration, isImportSpecifier, isIndexedAccessType, isInferredPredicate, isInterfaceDeclaration, isInterfaceExtends, isInterfaceTypeAnnotation, isInterpreterDirective, isIntersectionTypeAnnotation, isJSX, isJSXAttribute, isJSXClosingElement, isJSXClosingFragment, isJSXElement, isJSXEmptyExpression, isJSXExpressionContainer, isJSXFragment, isJSXIdentifier, isJSXMemberExpression, isJSXNamespacedName, isJSXOpeningElement, isJSXOpeningFragment, isJSXSpreadAttribute, isJSXSpreadChild, isJSXText, isLVal, isLabeledStatement, isLet, isLiteral, isLogicalExpression, isLoop, isMemberExpression, isMetaProperty, isMethod, isMiscellaneous, isMixedTypeAnnotation, isModuleDeclaration, isModuleExpression, isModuleSpecifier, isNewExpression, isNode, isNodesEquivalent, isNoop, isNullLiteral, isNullLiteralTypeAnnotation, isNullableTypeAnnotation, isNumberLiteral, isNumberLiteralTypeAnnotation, isNumberTypeAnnotation, isNumericLiteral, isObjectExpression, isObjectMember, isObjectMethod, isObjectPattern, isObjectProperty, isObjectTypeAnnotation, isObjectTypeCallProperty, isObjectTypeIndexer, isObjectTypeInternalSlot, isObjectTypeProperty, isObjectTypeSpreadProperty, isOpaqueType, isOptionalCallExpression, isOptionalIndexedAccessType, isOptionalMemberExpression, isParenthesizedExpression, isPattern, isPatternLike, isPipelineBareFunction, isPipelinePrimaryTopicReference, isPipelineTopicExpression, isPlaceholder, isPlaceholderType, isPrivate, isPrivateName, isProgram, isProperty, isPureish, isQualifiedTypeIdentifier, isRecordExpression, isReferenced, isRegExpLiteral, isRegexLiteral, isRestElement, isRestProperty, isReturnStatement, isScopable, isScope, isSequenceExpression, isSpecifierDefault, isSpreadElement, isSpreadProperty, isStandardized, isStatement, isStaticBlock, isStringLiteral, isStringLiteralTypeAnnotation, isStringTypeAnnotation, isSuper, isSwitchCase, isSwitchStatement, isSymbolTypeAnnotation, isTSAnyKeyword, isTSArrayType, isTSAsExpression, isTSBaseType, isTSBigIntKeyword, isTSBooleanKeyword, isTSCallSignatureDeclaration, isTSConditionalType, isTSConstructSignatureDeclaration, isTSConstructorType, isTSDeclareFunction, isTSDeclareMethod, isTSEntityName, isTSEnumDeclaration, isTSEnumMember, isTSExportAssignment, isTSExpressionWithTypeArguments, isTSExternalModuleReference, isTSFunctionType, isTSImportEqualsDeclaration, isTSImportType, isTSIndexSignature, isTSIndexedAccessType, isTSInferType, isTSInstantiationExpression, isTSInterfaceBody, isTSInterfaceDeclaration, isTSIntersectionType, isTSIntrinsicKeyword, isTSLiteralType, isTSMappedType, isTSMethodSignature, isTSModuleBlock, isTSModuleDeclaration, isTSNamedTupleMember, isTSNamespaceExportDeclaration, isTSNeverKeyword, isTSNonNullExpression, isTSNullKeyword, isTSNumberKeyword, isTSObjectKeyword, isTSOptionalType, isTSParameterProperty, isTSParenthesizedType, isTSPropertySignature, isTSQualifiedName, isTSRestType, isTSSatisfiesExpression, isTSStringKeyword, isTSSymbolKeyword, isTSThisType, isTSTupleType, isTSType, isTSTypeAliasDeclaration, isTSTypeAnnotation, isTSTypeAssertion, isTSTypeElement, isTSTypeLiteral, isTSTypeOperator, isTSTypeParameter, isTSTypeParameterDeclaration, isTSTypeParameterInstantiation, isTSTypePredicate, isTSTypeQuery, isTSTypeReference, isTSUndefinedKeyword, isTSUnionType, isTSUnknownKeyword, isTSVoidKeyword, isTaggedTemplateExpression, isTemplateElement, isTemplateLiteral, isTerminatorless, isThisExpression, isThisTypeAnnotation, isThrowStatement, isTopicReference, isTryStatement, isTupleExpression, isTupleTypeAnnotation, isType, isTypeAlias, isTypeAnnotation, isTypeCastExpression, isTypeParameter, isTypeParameterDeclaration, isTypeParameterInstantiation, isTypeScript, isTypeofTypeAnnotation, isUnaryExpression, isUnaryLike, isUnionTypeAnnotation, isUpdateExpression, isUserWhitespacable, isV8IntrinsicIdentifier, isValidES3Identifier, isValidIdentifier, isVar, isVariableDeclaration, isVariableDeclarator, isVariance, isVoidTypeAnnotation, isWhile, isWhileStatement, isWithStatement, isYieldExpression, jsxAttribute as jSXAttribute, jsxClosingElement as jSXClosingElement, jsxClosingFragment as jSXClosingFragment, jsxElement as jSXElement, jsxEmptyExpression as jSXEmptyExpression, jsxExpressionContainer as jSXExpressionContainer, jsxFragment as jSXFragment, jsxIdentifier as jSXIdentifier, jsxMemberExpression as jSXMemberExpression, jsxNamespacedName as jSXNamespacedName, jsxOpeningElement as jSXOpeningElement, jsxOpeningFragment as jSXOpeningFragment, jsxSpreadAttribute as jSXSpreadAttribute, jsxSpreadChild as jSXSpreadChild, jsxText as jSXText, jsxAttribute, jsxClosingElement, jsxClosingFragment, jsxElement, jsxEmptyExpression, jsxExpressionContainer, jsxFragment, jsxIdentifier, jsxMemberExpression, jsxNamespacedName, jsxOpeningElement, jsxOpeningFragment, jsxSpreadAttribute, jsxSpreadChild, jsxText, labeledStatement, logicalExpression, matchesPattern, memberExpression, metaProperty, mixedTypeAnnotation, moduleExpression, newExpression, noop, nullLiteral, nullLiteralTypeAnnotation, nullableTypeAnnotation, NumberLiteral$1 as numberLiteral, numberLiteralTypeAnnotation, numberTypeAnnotation, numericLiteral, objectExpression, objectMethod, objectPattern, objectProperty, objectTypeAnnotation, objectTypeCallProperty, objectTypeIndexer, objectTypeInternalSlot, objectTypeProperty, objectTypeSpreadProperty, opaqueType, optionalCallExpression, optionalIndexedAccessType, optionalMemberExpression, parenthesizedExpression, pipelineBareFunction, pipelinePrimaryTopicReference, pipelineTopicExpression, placeholder, prependToMemberExpression, privateName, program, qualifiedTypeIdentifier, react, recordExpression, regExpLiteral, RegexLiteral$1 as regexLiteral, removeComments, removeProperties, removePropertiesDeep, removeTypeDuplicates, restElement, RestProperty$1 as restProperty, returnStatement, sequenceExpression, shallowEqual, spreadElement, SpreadProperty$1 as spreadProperty, staticBlock, stringLiteral, stringLiteralTypeAnnotation, stringTypeAnnotation, _super as super, switchCase, switchStatement, symbolTypeAnnotation, tsAnyKeyword as tSAnyKeyword, tsArrayType as tSArrayType, tsAsExpression as tSAsExpression, tsBigIntKeyword as tSBigIntKeyword, tsBooleanKeyword as tSBooleanKeyword, tsCallSignatureDeclaration as tSCallSignatureDeclaration, tsConditionalType as tSConditionalType, tsConstructSignatureDeclaration as tSConstructSignatureDeclaration, tsConstructorType as tSConstructorType, tsDeclareFunction as tSDeclareFunction, tsDeclareMethod as tSDeclareMethod, tsEnumDeclaration as tSEnumDeclaration, tsEnumMember as tSEnumMember, tsExportAssignment as tSExportAssignment, tsExpressionWithTypeArguments as tSExpressionWithTypeArguments, tsExternalModuleReference as tSExternalModuleReference, tsFunctionType as tSFunctionType, tsImportEqualsDeclaration as tSImportEqualsDeclaration, tsImportType as tSImportType, tsIndexSignature as tSIndexSignature, tsIndexedAccessType as tSIndexedAccessType, tsInferType as tSInferType, tsInstantiationExpression as tSInstantiationExpression, tsInterfaceBody as tSInterfaceBody, tsInterfaceDeclaration as tSInterfaceDeclaration, tsIntersectionType as tSIntersectionType, tsIntrinsicKeyword as tSIntrinsicKeyword, tsLiteralType as tSLiteralType, tsMappedType as tSMappedType, tsMethodSignature as tSMethodSignature, tsModuleBlock as tSModuleBlock, tsModuleDeclaration as tSModuleDeclaration, tsNamedTupleMember as tSNamedTupleMember, tsNamespaceExportDeclaration as tSNamespaceExportDeclaration, tsNeverKeyword as tSNeverKeyword, tsNonNullExpression as tSNonNullExpression, tsNullKeyword as tSNullKeyword, tsNumberKeyword as tSNumberKeyword, tsObjectKeyword as tSObjectKeyword, tsOptionalType as tSOptionalType, tsParameterProperty as tSParameterProperty, tsParenthesizedType as tSParenthesizedType, tsPropertySignature as tSPropertySignature, tsQualifiedName as tSQualifiedName, tsRestType as tSRestType, tsSatisfiesExpression as tSSatisfiesExpression, tsStringKeyword as tSStringKeyword, tsSymbolKeyword as tSSymbolKeyword, tsThisType as tSThisType, tsTupleType as tSTupleType, tsTypeAliasDeclaration as tSTypeAliasDeclaration, tsTypeAnnotation as tSTypeAnnotation, tsTypeAssertion as tSTypeAssertion, tsTypeLiteral as tSTypeLiteral, tsTypeOperator as tSTypeOperator, tsTypeParameter as tSTypeParameter, tsTypeParameterDeclaration as tSTypeParameterDeclaration, tsTypeParameterInstantiation as tSTypeParameterInstantiation, tsTypePredicate as tSTypePredicate, tsTypeQuery as tSTypeQuery, tsTypeReference as tSTypeReference, tsUndefinedKeyword as tSUndefinedKeyword, tsUnionType as tSUnionType, tsUnknownKeyword as tSUnknownKeyword, tsVoidKeyword as tSVoidKeyword, taggedTemplateExpression, templateElement, templateLiteral, thisExpression, thisTypeAnnotation, throwStatement, toBindingIdentifierName, toBlock, toComputedKey, _default$3 as toExpression, toIdentifier, toKeyAlias, _default$2 as toStatement, topicReference, traverse, traverseFast, tryStatement, tsAnyKeyword, tsArrayType, tsAsExpression, tsBigIntKeyword, tsBooleanKeyword, tsCallSignatureDeclaration, tsConditionalType, tsConstructSignatureDeclaration, tsConstructorType, tsDeclareFunction, tsDeclareMethod, tsEnumDeclaration, tsEnumMember, tsExportAssignment, tsExpressionWithTypeArguments, tsExternalModuleReference, tsFunctionType, tsImportEqualsDeclaration, tsImportType, tsIndexSignature, tsIndexedAccessType, tsInferType, tsInstantiationExpression, tsInterfaceBody, tsInterfaceDeclaration, tsIntersectionType, tsIntrinsicKeyword, tsLiteralType, tsMappedType, tsMethodSignature, tsModuleBlock, tsModuleDeclaration, tsNamedTupleMember, tsNamespaceExportDeclaration, tsNeverKeyword, tsNonNullExpression, tsNullKeyword, tsNumberKeyword, tsObjectKeyword, tsOptionalType, tsParameterProperty, tsParenthesizedType, tsPropertySignature, tsQualifiedName, tsRestType, tsSatisfiesExpression, tsStringKeyword, tsSymbolKeyword, tsThisType, tsTupleType, tsTypeAliasDeclaration, tsTypeAnnotation, tsTypeAssertion, tsTypeLiteral, tsTypeOperator, tsTypeParameter, tsTypeParameterDeclaration, tsTypeParameterInstantiation, tsTypePredicate, tsTypeQuery, tsTypeReference, tsUndefinedKeyword, tsUnionType, tsUnknownKeyword, tsVoidKeyword, tupleExpression, tupleTypeAnnotation, typeAlias, typeAnnotation, typeCastExpression, typeParameter, typeParameterDeclaration, typeParameterInstantiation, typeofTypeAnnotation, unaryExpression, unionTypeAnnotation, updateExpression, v8IntrinsicIdentifier, validate, _default$1 as valueToNode, variableDeclaration, variableDeclarator, variance, voidTypeAnnotation, whileStatement, withStatement, yieldExpression };
export * from "./declarations/src/index";
export { default } from "./declarations/src/index";
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1vdGlvbi1jYWNoZS5janMuZC50cyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4vZGVjbGFyYXRpb25zL3NyYy9pbmRleC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIn0=
export { default as _default } from "./declarations/src/index.js"
import type { EmotionCache } from '@emotion/utils';
import { StylisPlugin } from "./types.js";
export interface Options {
    nonce?: string;
    stylisPlugins?: Array<StylisPlugin>;
    key: string;
    container?: Node;
    speedy?: boolean;
    /** @deprecate use `insertionPoint` instead */
    prepend?: boolean;
    insertionPoint?: HTMLElement;
}
declare let createCache: (options: Options) => EmotionCache;
export default createCache;
export type { EmotionCache };
export type { StylisElement, StylisPlugin, StylisPluginCallback } from "./types.js";
export interface StylisElement {
    type: string;
    value: string;
    props: Array<string> | string;
    root: StylisElement | null;
    parent: StylisElement | null;
    children: Array<StylisElement> | string;
    line: number;
    column: number;
    length: number;
    return: string;
}
export type StylisPluginCallback = (element: StylisElement, index: number, children: Array<StylisElement>, callback: StylisPluginCallback) => string | void;
export type StylisPlugin = (element: StylisElement, index: number, children: Array<StylisElement>, callback: StylisPluginCallback) => string | void;
import { StyleSheet } from '@emotion/sheet'
import type { EmotionCache, SerializedStyles } from '@emotion/utils'
import {
  serialize,
  compile,
  middleware,
  rulesheet,
  stringify,
  COMMENT
} from 'stylis'
import type { Element as StylisElement } from 'stylis'
import weakMemoize from '@emotion/weak-memoize'
import memoize from '@emotion/memoize'
import isDevelopment from '#is-development'
import isBrowser from '#is-browser'
import {
  compat,
  removeLabel,
  createUnsafeSelectorsAlarm,
  incorrectImportAlarm
} from './stylis-plugins'
import { prefixer } from './prefixer'
import { StylisPlugin } from './types'

export interface Options {
  nonce?: string
  stylisPlugins?: Array<StylisPlugin>
  key: string
  container?: Node
  speedy?: boolean
  /** @deprecate use `insertionPoint` instead */
  prepend?: boolean
  insertionPoint?: HTMLElement
}

let getServerStylisCache = isBrowser
  ? undefined
  : weakMemoize(() => memoize<Record<string, string>>(() => ({})))

const defaultStylisPlugins = [prefixer]

let getSourceMap: ((styles: string) => string | undefined) | undefined
if (isDevelopment) {
  let sourceMapPattern =
    /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g
  getSourceMap = styles => {
    let matches = styles.match(sourceMapPattern)
    if (!matches) return
    return matches[matches.length - 1]
  }
}

let createCache = (options: Options): EmotionCache => {
  let key = options.key

  if (isDevelopment && !key) {
    throw new Error(
      "You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\n" +
        `If multiple caches share the same key they might "fight" for each other's style elements.`
    )
  }

  if (isBrowser && key === 'css') {
    const ssrStyles = document.querySelectorAll(
      `style[data-emotion]:not([data-s])`
    )

    // get SSRed styles out of the way of React's hydration
    // document.head is a safe place to move them to(though note document.head is not necessarily the last place they will be)
    // note this very very intentionally targets all style elements regardless of the key to ensure
    // that creating a cache works inside of render of a React component
    Array.prototype.forEach.call(ssrStyles, (node: HTMLStyleElement) => {
      // we want to only move elements which have a space in the data-emotion attribute value
      // because that indicates that it is an Emotion 11 server-side rendered style elements
      // while we will already ignore Emotion 11 client-side inserted styles because of the :not([data-s]) part in the selector
      // Emotion 10 client-side inserted styles did not have data-s (but importantly did not have a space in their data-emotion attributes)
      // so checking for the space ensures that loading Emotion 11 after Emotion 10 has inserted some styles
      // will not result in the Emotion 10 styles being destroyed
      const dataEmotionAttribute = node.getAttribute('data-emotion')!
      if (dataEmotionAttribute.indexOf(' ') === -1) {
        return
      }

      document.head.appendChild(node)
      node.setAttribute('data-s', '')
    })
  }

  const stylisPlugins = options.stylisPlugins || defaultStylisPlugins

  if (isDevelopment) {
    if (/[^a-z-]/.test(key)) {
      throw new Error(
        `Emotion key must only contain lower case alphabetical characters and - but "${key}" was passed`
      )
    }
  }
  let inserted: EmotionCache['inserted'] = {}
  let container: Node
  const nodesToHydrate: HTMLStyleElement[] = []
  if (isBrowser) {
    container = options.container || document.head

    Array.prototype.forEach.call(
      // this means we will ignore elements which don't have a space in them which
      // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
      document.querySelectorAll(`style[data-emotion^="${key} "]`),
      (node: HTMLStyleElement) => {
        const attrib = node.getAttribute(`data-emotion`)!.split(' ')
        for (let i = 1; i < attrib.length; i++) {
          inserted[attrib[i]] = true
        }
        nodesToHydrate.push(node)
      }
    )
  }

  let insert: (
    selector: string,
    serialized: SerializedStyles,
    sheet: StyleSheet,
    shouldCache: boolean
  ) => string | void
  const omnipresentPlugins = [compat, removeLabel]

  if (isDevelopment) {
    omnipresentPlugins.push(
      createUnsafeSelectorsAlarm({
        get compat() {
          return cache.compat
        }
      }),
      incorrectImportAlarm
    )
  }

  if (!getServerStylisCache) {
    let currentSheet: Pick<StyleSheet, 'insert'>

    const finalizingPlugins = [
      stringify,
      isDevelopment
        ? (element: StylisElement) => {
            if (!element.root) {
              if (element.return) {
                currentSheet.insert(element.return)
              } else if (element.value && element.type !== COMMENT) {
                // insert empty rule in non-production environments
                // so @emotion/jest can grab `key` from the (JS)DOM for caches without any rules inserted yet
                currentSheet.insert(`${element.value}{}`)
              }
            }
          }
        : rulesheet(rule => {
            currentSheet.insert(rule)
          })
    ]

    const serializer = middleware(
      omnipresentPlugins.concat(stylisPlugins, finalizingPlugins)
    )
    const stylis = (styles: string) => serialize(compile(styles), serializer)

    insert = (selector, serialized, sheet, shouldCache) => {
      currentSheet = sheet

      if (getSourceMap) {
        let sourceMap = getSourceMap(serialized.styles)
        if (sourceMap) {
          currentSheet = {
            insert: rule => {
              sheet.insert(rule + sourceMap)
            }
          }
        }
      }

      stylis(selector ? `${selector}{${serialized.styles}}` : serialized.styles)

      if (shouldCache) {
        cache.inserted[serialized.name] = true
      }
    }
  } else {
    const finalizingPlugins = [stringify]
    const serializer = middleware(
      omnipresentPlugins.concat(stylisPlugins, finalizingPlugins)
    )
    const stylis = (styles: string) => serialize(compile(styles), serializer)

    let serverStylisCache = getServerStylisCache(stylisPlugins)(key)
    let getRules = (selector: string, serialized: SerializedStyles): string => {
      let name = serialized.name
      if (serverStylisCache[name] === undefined) {
        serverStylisCache[name] = stylis(
          selector ? `${selector}{${serialized.styles}}` : serialized.styles
        )
      }
      return serverStylisCache[name]
    }
    insert = (selector, serialized, sheet, shouldCache) => {
      let name = serialized.name
      let rules = getRules(selector, serialized)
      if (cache.compat === undefined) {
        // in regular mode, we don't set the styles on the inserted cache
        // since we don't need to and that would be wasting memory
        // we return them so that they are rendered in a style tag
        if (shouldCache) {
          cache.inserted[name] = true
        }
        if (getSourceMap) {
          let sourceMap = getSourceMap(serialized.styles)
          if (sourceMap) {
            return rules + sourceMap
          }
        }
        return rules
      } else {
        // in compat mode, we put the styles on the inserted cache so
        // that emotion-server can pull out the styles
        // except when we don't want to cache it which was in Global but now
        // is nowhere but we don't want to do a major right now
        // and just in case we're going to leave the case here
        // it's also not affecting client side bundle size
        // so it's really not a big deal

        if (shouldCache) {
          cache.inserted[name] = rules
        } else {
          return rules
        }
      }
    }
  }

  const cache: EmotionCache = {
    key,
    sheet: new StyleSheet({
      key,
      container: container!,
      nonce: options.nonce,
      speedy: options.speedy,
      prepend: options.prepend,
      insertionPoint: options.insertionPoint
    }),
    nonce: options.nonce,
    inserted,
    registered: {},
    insert
  }

  cache.sheet.hydrate(nodesToHydrate)

  return cache
}

export default createCache
export type { EmotionCache }
export type { StylisElement, StylisPlugin, StylisPluginCallback } from './types'
/* eslint-disable no-fallthrough */
/* eslint-disable eqeqeq */
import {
  charat,
  combine,
  copy,
  DECLARATION,
  hash,
  indexof,
  KEYFRAMES,
  match,
  MOZ,
  MS,
  replace,
  RULESET,
  serialize,
  strlen,
  WEBKIT,
  Element,
  Middleware
} from 'stylis'

// this is a copy of stylis@4.0.13 prefixer, the latter version introduced grid prefixing which we don't want

function prefix(value: string, length: number): string {
  switch (hash(value, length)) {
    // color-adjust
    case 5103:
      return WEBKIT + 'print-' + value + value
    // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)
    case 5737:
    case 4201:
    case 3177:
    case 3433:
    case 1641:
    case 4457:
    case 2921:
    // text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break
    case 5572:
    case 6356:
    case 5844:
    case 3191:
    case 6645:
    case 3005:
    // mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,
    case 6391:
    case 5879:
    case 5623:
    case 6135:
    case 4599:
    case 4855:
    // background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)
    case 4215:
    case 6389:
    case 5109:
    case 5365:
    case 5621:
    case 3829:
      return WEBKIT + value + value
    // appearance, user-select, transform, hyphens, text-size-adjust
    case 5349:
    case 4246:
    case 4810:
    case 6968:
    case 2756:
      return WEBKIT + value + MOZ + value + MS + value + value
    // flex, flex-direction
    case 6828:
    case 4268:
      return WEBKIT + value + MS + value + value
    // order
    case 6165:
      return WEBKIT + value + MS + 'flex-' + value + value
    // align-items
    case 5187:
      return (
        WEBKIT +
        value +
        replace(
          value,
          /(\w+).+(:[^]+)/,
          WEBKIT + 'box-$1$2' + MS + 'flex-$1$2'
        ) +
        value
      )
    // align-self
    case 5443:
      return (
        WEBKIT +
        value +
        MS +
        'flex-item-' +
        replace(value, /flex-|-self/, '') +
        value
      )
    // align-content
    case 4675:
      return (
        WEBKIT +
        value +
        MS +
        'flex-line-pack' +
        replace(value, /align-content|flex-|-self/, '') +
        value
      )
    // flex-shrink
    case 5548:
      return WEBKIT + value + MS + replace(value, 'shrink', 'negative') + value
    // flex-basis
    case 5292:
      return (
        WEBKIT + value + MS + replace(value, 'basis', 'preferred-size') + value
      )
    // flex-grow
    case 6060:
      return (
        WEBKIT +
        'box-' +
        replace(value, '-grow', '') +
        WEBKIT +
        value +
        MS +
        replace(value, 'grow', 'positive') +
        value
      )
    // transition
    case 4554:
      return (
        WEBKIT +
        replace(value, /([^-])(transform)/g, '$1' + WEBKIT + '$2') +
        value
      )
    // cursor
    case 6187:
      return (
        replace(
          replace(
            replace(value, /(zoom-|grab)/, WEBKIT + '$1'),
            /(image-set)/,
            WEBKIT + '$1'
          ),
          value,
          ''
        ) + value
      )
    // background, background-image
    case 5495:
    case 3959:
      return replace(value, /(image-set\([^]*)/, WEBKIT + '$1' + '$`$1')
    // justify-content
    case 4968:
      return (
        replace(
          replace(
            value,
            /(.+:)(flex-)?(.*)/,
            WEBKIT + 'box-pack:$3' + MS + 'flex-pack:$3'
          ),
          /s.+-b[^;]+/,
          'justify'
        ) +
        WEBKIT +
        value +
        value
      )
    // (margin|padding)-inline-(start|end)
    case 4095:
    case 3583:
    case 4068:
    case 2532:
      return replace(value, /(.+)-inline(.+)/, WEBKIT + '$1$2') + value
    // (min|max)?(width|height|inline-size|block-size)
    case 8116:
    case 7059:
    case 5753:
    case 5535:
    case 5445:
    case 5701:
    case 4933:
    case 4677:
    case 5533:
    case 5789:
    case 5021:
    case 4765:
      // stretch, max-content, min-content, fill-available
      if (strlen(value) - 1 - length > 6)
        switch (charat(value, length + 1)) {
          // (m)ax-content, (m)in-content
          case 109:
            // -
            if (charat(value, length + 4) !== 45) break
          // (f)ill-available, (f)it-content
          case 102:
            return (
              replace(
                value,
                /(.+:)(.+)-([^]+)/,
                '$1' +
                  WEBKIT +
                  '$2-$3' +
                  '$1' +
                  MOZ +
                  (charat(value, length + 3) == 108 ? '$3' : '$2-$3')
              ) + value
            )
          // (s)tretch
          case 115:
            return ~indexof(value, 'stretch')
              ? prefix(replace(value, 'stretch', 'fill-available'), length) +
                  value
              : value
        }
      break
    // position: sticky
    case 4949:
      // (s)ticky?
      if (charat(value, length + 1) !== 115) break
    // display: (flex|inline-flex)
    case 6444:
      switch (
        charat(value, strlen(value) - 3 - (~indexof(value, '!important') && 10))
      ) {
        // stic(k)y
        case 107:
          return replace(value, ':', ':' + WEBKIT) + value
        // (inline-)?fl(e)x
        case 101:
          return (
            replace(
              value,
              /(.+:)([^;!]+)(;|!.+)?/,
              '$1' +
                WEBKIT +
                (charat(value, 14) === 45 ? 'inline-' : '') +
                'box$3' +
                '$1' +
                WEBKIT +
                '$2$3' +
                '$1' +
                MS +
                '$2box$3'
            ) + value
          )
      }
      break
    // writing-mode
    case 5936:
      switch (charat(value, length + 11)) {
        // vertical-l(r)
        case 114:
          return (
            WEBKIT +
            value +
            MS +
            replace(value, /[svh]\w+-[tblr]{2}/, 'tb') +
            value
          )
        // vertical-r(l)
        case 108:
          return (
            WEBKIT +
            value +
            MS +
            replace(value, /[svh]\w+-[tblr]{2}/, 'tb-rl') +
            value
          )
        // horizontal(-)tb
        case 45:
          return (
            WEBKIT +
            value +
            MS +
            replace(value, /[svh]\w+-[tblr]{2}/, 'lr') +
            value
          )
      }

      return WEBKIT + value + MS + value + value
  }

  return value
}

export let prefixer = (
  element: Element,
  index: number,
  children: Element[],
  callback: Middleware
) => {
  if (element.length > -1)
    if (!element.return)
      switch (element.type) {
        case DECLARATION:
          element.return = prefix(element.value, element.length)
          break
        case KEYFRAMES:
          return serialize(
            [
              copy(element, {
                value: replace(element.value, '@', '@' + WEBKIT)
              })
            ],
            callback
          )
        case RULESET:
          if (element.length)
            return combine(element.props as string[], function (value) {
              switch (match(value, /(::plac\w+|:read-\w+)/)) {
                // :read-(only|write)
                case ':read-only':
                case ':read-write':
                  return serialize(
                    [
                      copy(element, {
                        props: [replace(value, /:(read-\w+)/, ':' + MOZ + '$1')]
                      })
                    ],
                    callback
                  )
                // :placeholder
                case '::placeholder':
                  return serialize(
                    [
                      copy(element, {
                        props: [
                          replace(
                            value,
                            /:(plac\w+)/,
                            ':' + WEBKIT + 'input-$1'
                          )
                        ]
                      }),
                      copy(element, {
                        props: [replace(value, /:(plac\w+)/, ':' + MOZ + '$1')]
                      }),
                      copy(element, {
                        props: [replace(value, /:(plac\w+)/, MS + 'input-$1')]
                      })
                    ],
                    callback
                  )
              }

              return ''
            })
      }
}
import { EmotionCache } from '@emotion/utils'
import {
  alloc,
  dealloc,
  delimit,
  Element,
  from,
  Middleware,
  next,
  peek,
  position,
  slice,
  token
} from 'stylis'

// based on https://github.com/thysultan/stylis.js/blob/e6843c373ebcbbfade25ebcc23f540ed8508da0a/src/Tokenizer.js#L239-L244
const identifierWithPointTracking = (
  begin: number,
  points: number[],
  index: number
) => {
  let previous = 0
  let character = 0

  while (true) {
    previous = character
    character = peek()

    // &\f
    if (previous === 38 && character === 12) {
      points[index] = 1
    }

    if (token(character)) {
      break
    }

    next()
  }

  return slice(begin, position)
}

const toRules = (parsed: string[], points: number[]) => {
  // pretend we've started with a comma
  let index = -1
  let character = 44

  do {
    switch (token(character)) {
      case 0:
        // &\f
        if (character === 38 && peek() === 12) {
          // this is not 100% correct, we don't account for literal sequences here - like for example quoted strings
          // stylis inserts \f after & to know when & where it should replace this sequence with the context selector
          // and when it should just concatenate the outer and inner selectors
          // it's very unlikely for this sequence to actually appear in a different context, so we just leverage this fact here
          points[index] = 1
        }
        parsed[index] += identifierWithPointTracking(
          position - 1,
          points,
          index
        )
        break
      case 2:
        parsed[index] += delimit(character)
        break
      case 4:
        // comma
        if (character === 44) {
          // colon
          parsed[++index] = peek() === 58 ? '&\f' : ''
          points[index] = parsed[index].length
          break
        }
      // fallthrough
      default:
        parsed[index] += from(character)
    }
  } while ((character = next()))

  return parsed
}

const getRules = (value: string, points: number[]) =>
  dealloc(toRules(alloc(value) as string[], points))

// WeakSet would be more appropriate, but only WeakMap is supported in IE11
const fixedElements = /* #__PURE__ */ new WeakMap()

export let compat: Middleware = element => {
  if (
    element.type !== 'rule' ||
    !element.parent ||
    // positive .length indicates that this rule contains pseudo
    // negative .length indicates that this rule has been already prefixed
    element.length < 1
  ) {
    return
  }

  let value = element.value
  let parent: Element | null = element.parent
  let isImplicitRule =
    element.column === parent.column && element.line === parent.line

  while (parent.type !== 'rule') {
    parent = parent.parent
    if (!parent) return
  }

  // short-circuit for the simplest case
  if (
    element.props.length === 1 &&
    value.charCodeAt(0) !== 58 /* colon */ &&
    !fixedElements.get(parent)
  ) {
    return
  }

  // if this is an implicitly inserted rule (the one eagerly inserted at the each new nested level)
  // then the props has already been manipulated beforehand as they that array is shared between it and its "rule parent"
  if (isImplicitRule) {
    return
  }

  fixedElements.set(element, true)

  const points: number[] = []
  const rules = getRules(value, points)
  const parentRules = parent.props

  for (let i = 0, k = 0; i < rules.length; i++) {
    for (let j = 0; j < parentRules.length; j++, k++) {
      ;(element.props as string[])[k] = points[i]
        ? rules[i].replace(/&\f/g, parentRules[j])
        : `${parentRules[j]} ${rules[i]}`
    }
  }
}

export let removeLabel: Middleware = element => {
  if (element.type === 'decl') {
    const value = element.value
    if (
      // charcode for l
      value.charCodeAt(0) === 108 &&
      // charcode for b
      value.charCodeAt(2) === 98
    ) {
      // this ignores label
      element.return = ''
      element.value = ''
    }
  }
}

const ignoreFlag =
  'emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason'

const isIgnoringComment = (element: Element) =>
  element.type === 'comm' &&
  (element.children as string).indexOf(ignoreFlag) > -1

export let createUnsafeSelectorsAlarm =
  (cache: Pick<EmotionCache, 'compat'>): Middleware =>
  (element, index, children) => {
    if (element.type !== 'rule' || cache.compat) return

    const unsafePseudoClasses = element.value.match(
      /(:first|:nth|:nth-last)-child/g
    )

    if (unsafePseudoClasses) {
      const isNested = !!element.parent
      // in nested rules comments become children of the "auto-inserted" rule and that's always the `element.parent`
      //
      // considering this input:
      // .a {
      //   .b /* comm */ {}
      //   color: hotpink;
      // }
      // we get output corresponding to this:
      // .a {
      //   & {
      //     /* comm */
      //     color: hotpink;
      //   }
      //   .b {}
      // }
      const commentContainer = isNested
        ? element.parent!.children
        : // global rule at the root level
          children

      for (let i = commentContainer.length - 1; i >= 0; i--) {
        const node = commentContainer[i] as Element

        if (node.line < element.line) {
          break
        }

        // it is quite weird but comments are *usually* put at `column: element.column - 1`
        // so we seek *from the end* for the node that is earlier than the rule's `element` and check that
        // this will also match inputs like this:
        // .a {
        //   /* comm */
        //   .b {}
        // }
        //
        // but that is fine
        //
        // it would be the easiest to change the placement of the comment to be the first child of the rule:
        // .a {
        //   .b { /* comm */ }
        // }
        // with such inputs we wouldn't have to search for the comment at all
        // TODO: consider changing this comment placement in the next major version
        if (node.column < element.column) {
          if (isIgnoringComment(node)) {
            return
          }
          break
        }
      }

      unsafePseudoClasses.forEach(unsafePseudoClass => {
        console.error(
          `The pseudo class "${unsafePseudoClass}" is potentially unsafe when doing server-side rendering. Try changing it to "${
            unsafePseudoClass.split('-child')[0]
          }-of-type".`
        )
      })
    }
  }

let isImportRule = (element: Element) =>
  element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64

const isPrependedWithRegularRules = (index: number, children: Element[]) => {
  for (let i = index - 1; i >= 0; i--) {
    if (!isImportRule(children[i])) {
      return true
    }
  }
  return false
}

// use this to remove incorrect elements from further processing
// so they don't get handed to the `sheet` (or anything else)
// as that could potentially lead to additional logs which in turn could be overhelming to the user
const nullifyElement = (element: Element) => {
  element.type = ''
  element.value = ''
  element.return = ''
  element.children = ''
  element.props = ''
}

export let incorrectImportAlarm: Middleware = (element, index, children) => {
  if (!isImportRule(element)) {
    return
  }

  if (element.parent) {
    console.error(
      "`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles."
    )
    nullifyElement(element)
  } else if (isPrependedWithRegularRules(index, children)) {
    console.error(
      "`@import` rules can't be after other rules. Please put your `@import` rules before your other rules."
    )
    nullifyElement(element)
  }
}
export interface StylisElement {
  type: string
  value: string
  props: Array<string> | string
  root: StylisElement | null
  parent: StylisElement | null
  children: Array<StylisElement> | string
  line: number
  column: number
  length: number
  return: string
}
export type StylisPluginCallback = (
  element: StylisElement,
  index: number,
  children: Array<StylisElement>,
  callback: StylisPluginCallback
) => string | void

export type StylisPlugin = (
  element: StylisElement,
  index: number,
  children: Array<StylisElement>,
  callback: StylisPluginCallback
) => string | void
export default false
export default typeof document !== 'undefined'
export default true
export * from "./declarations/src/index";
export { default } from "./declarations/src/index";
//# sourceMappingURL=emotion-hash.cjs.d.ts.map
export { default as _default } from "./declarations/src/index.js"
export default function murmur2(str: string): string;
/* eslint-disable */
// Inspired by https://github.com/garycourt/murmurhash-js
// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86

export default function murmur2(str: string): string {
  // 'm' and 'r' are mixing constants generated offline.
  // They're not really 'magic', they just happen to work well.

  // const m = 0x5bd1e995;
  // const r = 24;

  // Initialize the hash

  var h = 0

  // Mix 4 bytes at a time into the hash

  var k,
    i = 0,
    len = str.length
  for (; len >= 4; ++i, len -= 4) {
    k =
      (str.charCodeAt(i) & 0xff) |
      ((str.charCodeAt(++i) & 0xff) << 8) |
      ((str.charCodeAt(++i) & 0xff) << 16) |
      ((str.charCodeAt(++i) & 0xff) << 24)

    k =
      /* Math.imul(k, m): */
      (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0xe995) << 16)
    k ^= /* k >>> r: */ k >>> 24

    h =
      /* Math.imul(k, m): */
      ((k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0xe995) << 16)) ^
      /* Math.imul(h, m): */
      ((h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0xe995) << 16))
  }

  // Handle the last few bytes of the input array

  switch (len) {
    case 3:
      h ^= (str.charCodeAt(i + 2) & 0xff) << 16
    case 2:
      h ^= (str.charCodeAt(i + 1) & 0xff) << 8
    case 1:
      h ^= str.charCodeAt(i) & 0xff
      h =
        /* Math.imul(h, m): */
        (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0xe995) << 16)
  }

  // Do a few final mixes of the hash to ensure the last few
  // bytes are well-incorporated.

  h ^= h >>> 13
  h =
    /* Math.imul(h, m): */
    (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0xe995) << 16)

  return ((h ^ (h >>> 15)) >>> 0).toString(36)
}
export * from "./declarations/src/index";
export { default } from "./declarations/src/index";
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1vdGlvbi1pcy1wcm9wLXZhbGlkLmNqcy5kLnRzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi9kZWNsYXJhdGlvbnMvc3JjL2luZGV4LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEifQ==
export { default as _default } from "./declarations/src/index.js"
declare const isPropValid: (arg: string) => boolean;
export default isPropValid;
import memoize from '@emotion/memoize'

declare const codegen: { require: (path: string) => any }

// eslint-disable-next-line no-undef
const reactPropsRegex: RegExp = codegen.require('./props')

// https://esbench.com/bench/5bfee68a4cd7e6009ef61d23
const isPropValid = /* #__PURE__ */ memoize(
  prop =>
    reactPropsRegex.test(prop) ||
    (prop.charCodeAt(0) === 111 /* o */ &&
      prop.charCodeAt(1) === 110 /* n */ &&
      prop.charCodeAt(2) < 91) /* Z+1 */
)

export default isPropValid
export * from "./declarations/src/index";
export { default } from "./declarations/src/index";
//# sourceMappingURL=emotion-memoize.cjs.d.ts.map
export { default as _default } from "./declarations/src/index.js"
export default function memoize<V>(fn: (arg: string) => V): (arg: string) => V;
export default function memoize<V>(fn: (arg: string) => V): (arg: string) => V {
  const cache: Record<string, V> = Object.create(null)

  return (arg: string) => {
    if (cache[arg] === undefined) cache[arg] = fn(arg)
    return cache[arg]
  }
}
export * from '@emotion/react'
export * from "./declarations/src/index";
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1vdGlvbi1yZWFjdC5janMuZC50cyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4vZGVjbGFyYXRpb25zL3NyYy9pbmRleC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIn0=
import * as React from 'react';
import { CSSInterpolation } from '@emotion/serialize';
import { Theme } from "./theming.js";
export interface ArrayClassNamesArg extends Array<ClassNamesArg> {
}
export type ClassNamesArg = undefined | null | string | boolean | {
    [className: string]: boolean | null | undefined;
} | ArrayClassNamesArg;
export interface ClassNamesContent {
    css(template: TemplateStringsArray, ...args: Array<CSSInterpolation>): string;
    css(...args: Array<CSSInterpolation>): string;
    cx(...args: Array<ClassNamesArg>): string;
    theme: Theme;
}
export interface ClassNamesProps {
    children(content: ClassNamesContent): React.ReactNode;
}
export declare const ClassNames: React.FC<ClassNamesProps & React.RefAttributes<any>> | React.ForwardRefExoticComponent<ClassNamesProps & React.RefAttributes<any>>;
import * as React from 'react';
import { EmotionCache } from '@emotion/cache';
export declare let CacheProvider: React.Provider<EmotionCache | null>;
export declare let __unsafe_useEmotionCache: () => EmotionCache | null;
declare let withEmotionCache: <Props, RefType = any>(func: (props: React.PropsWithoutRef<Props>, context: EmotionCache, ref?: React.ForwardedRef<RefType>) => React.ReactNode) => React.FC<React.PropsWithoutRef<Props> & React.RefAttributes<RefType>> | React.ForwardRefExoticComponent<React.PropsWithoutRef<Props> & React.RefAttributes<RefType>>;
export { withEmotionCache };
import type { SerializedStyles } from '@emotion/utils';
import type { CSSInterpolation } from '@emotion/serialize';
declare function css(template: TemplateStringsArray, ...args: CSSInterpolation[]): SerializedStyles;
declare function css(...args: CSSInterpolation[]): SerializedStyles;
export default css;
import * as React from 'react';
import { Theme } from "./theming.js";
import { Interpolation } from '@emotion/serialize';
export interface GlobalProps {
    styles: Interpolation<Theme>;
}
export declare let Global: React.FC<GlobalProps & React.RefAttributes<any>> | React.ForwardRefExoticComponent<GlobalProps & React.RefAttributes<any>>;
export type { EmotionCache } from '@emotion/cache';
export type { ArrayInterpolation, ComponentSelector, CSSObject, FunctionInterpolation, Interpolation, Keyframes, SerializedStyles } from '@emotion/serialize';
export { withEmotionCache, CacheProvider, __unsafe_useEmotionCache } from "./context.js";
export { jsx } from "./jsx.js";
export { jsx as createElement } from "./jsx.js";
export { Global } from "./global.js";
export type { GlobalProps } from "./global.js";
export { keyframes } from "./keyframes.js";
export { ClassNames } from "./class-names.js";
export type { ClassNamesArg, ClassNamesContent, ClassNamesProps, ArrayClassNamesArg } from "./class-names.js";
export { ThemeContext, useTheme, ThemeProvider, withTheme } from "./theming.js";
export type { Theme, ThemeProviderProps, WithTheme } from "./theming.js";
export { default as css } from "./css.js";
export type { DistributiveOmit, PropsOf } from "./types.js";
import * as ReactJSXRuntimeDev from 'react/jsx-dev-runtime';
export type { EmotionJSX as JSX } from "./jsx-namespace.js";
export declare const Fragment: import("react").ExoticComponent<{
    children?: import("react").ReactNode;
}>;
export declare const jsxDEV: typeof ReactJSXRuntimeDev.jsxDEV;
import 'react';
import { Interpolation } from '@emotion/serialize';
import { Theme } from "./theming.js";
type IsPreReact19 = 2 extends Parameters<React.FunctionComponent<any>>['length'] ? true : false;
type WithConditionalCSSProp<P> = 'className' extends keyof P ? string extends P['className' & keyof P] ? {
    css?: Interpolation<Theme>;
} : {} : {};
/** @ts-ignore */
type ReactJSXElement = true extends IsPreReact19 ? JSX.Element : React.JSX.Element;
/** @ts-ignore */
type ReactJSXElementClass = true extends IsPreReact19 ? JSX.ElementClass : React.JSX.ElementClass;
/** @ts-ignore */
type ReactJSXElementAttributesProperty = true extends IsPreReact19 ? JSX.ElementAttributesProperty : React.JSX.ElementAttributesProperty;
/** @ts-ignore */
type ReactJSXElementChildrenAttribute = true extends IsPreReact19 ? JSX.ElementChildrenAttribute : React.JSX.ElementChildrenAttribute;
/** @ts-ignore */
type ReactJSXLibraryManagedAttributes<C, P> = true extends IsPreReact19 ? JSX.LibraryManagedAttributes<C, P> : React.JSX.LibraryManagedAttributes<C, P>;
/** @ts-ignore */
type ReactJSXIntrinsicAttributes = true extends IsPreReact19 ? JSX.IntrinsicAttributes : React.JSX.IntrinsicAttributes;
/** @ts-ignore */
type ReactJSXIntrinsicClassAttributes<T> = true extends IsPreReact19 ? JSX.IntrinsicClassAttributes<T> : React.JSX.IntrinsicClassAttributes<T>;
/** @ts-ignore */
type ReactJSXIntrinsicElements = true extends IsPreReact19 ? JSX.IntrinsicElements : React.JSX.IntrinsicElements;
/** @ts-ignore */
type ReactJSXElementType = true extends IsPreReact19 ? string | React.JSXElementConstructor<any> : React.JSX.ElementType;
export declare namespace ReactJSX {
    type ElementType = ReactJSXElementType;
    interface Element extends ReactJSXElement {
    }
    interface ElementClass extends ReactJSXElementClass {
    }
    interface ElementAttributesProperty extends ReactJSXElementAttributesProperty {
    }
    interface ElementChildrenAttribute extends ReactJSXElementChildrenAttribute {
    }
    type LibraryManagedAttributes<C, P> = ReactJSXLibraryManagedAttributes<C, P>;
    interface IntrinsicAttributes extends ReactJSXIntrinsicAttributes {
    }
    interface IntrinsicClassAttributes<T> extends ReactJSXIntrinsicClassAttributes<T> {
    }
    type IntrinsicElements = ReactJSXIntrinsicElements;
}
export declare namespace EmotionJSX {
    type ElementType = ReactJSXElementType;
    interface Element extends ReactJSXElement {
    }
    interface ElementClass extends ReactJSXElementClass {
    }
    interface ElementAttributesProperty extends ReactJSXElementAttributesProperty {
    }
    interface ElementChildrenAttribute extends ReactJSXElementChildrenAttribute {
    }
    type LibraryManagedAttributes<C, P> = P extends unknown ? WithConditionalCSSProp<P> & ReactJSXLibraryManagedAttributes<C, P> : never;
    interface IntrinsicAttributes extends ReactJSXIntrinsicAttributes {
    }
    interface IntrinsicClassAttributes<T> extends ReactJSXIntrinsicClassAttributes<T> {
    }
    type IntrinsicElements = {
        [K in keyof ReactJSXIntrinsicElements]: ReactJSXIntrinsicElements[K] & {
            css?: Interpolation<Theme>;
        };
    };
}
export {};
import * as ReactJSXRuntime from 'react/jsx-runtime';
export type { EmotionJSX as JSX } from "./jsx-namespace.js";
export declare const Fragment: import("react").ExoticComponent<{
    children?: import("react").ReactNode;
}>;
export declare const jsx: typeof ReactJSXRuntime.jsx;
export declare const jsxs: typeof ReactJSXRuntime.jsxs;
import * as React from 'react';
import { EmotionJSX } from "./jsx-namespace.js";
export declare const jsx: typeof React.createElement;
export declare namespace jsx {
    namespace JSX {
        type ElementType = EmotionJSX.ElementType;
        interface Element extends EmotionJSX.Element {
        }
        interface ElementClass extends EmotionJSX.ElementClass {
        }
        interface ElementAttributesProperty extends EmotionJSX.ElementAttributesProperty {
        }
        interface ElementChildrenAttribute extends EmotionJSX.ElementChildrenAttribute {
        }
        type LibraryManagedAttributes<C, P> = EmotionJSX.LibraryManagedAttributes<C, P>;
        interface IntrinsicAttributes extends EmotionJSX.IntrinsicAttributes {
        }
        interface IntrinsicClassAttributes<T> extends EmotionJSX.IntrinsicClassAttributes<T> {
        }
        type IntrinsicElements = EmotionJSX.IntrinsicElements;
    }
}
import { CSSInterpolation } from '@emotion/serialize';
type Keyframes = {
    name: string;
    styles: string;
    anim: 1;
    toString: () => string;
} & string;
export declare function keyframes(template: TemplateStringsArray, ...args: CSSInterpolation[]): Keyframes;
export declare function keyframes(...args: CSSInterpolation[]): Keyframes;
export {};
import * as React from 'react';
import { DistributiveOmit, PropsOf } from "./types.js";
export interface Theme {
}
export interface ThemeProviderProps {
    theme: Partial<Theme> | ((outerTheme: Theme) => Theme);
    children: React.ReactNode;
}
export interface ThemeProvider {
    (props: ThemeProviderProps): React.ReactElement;
}
export type WithTheme<P, T> = P extends {
    theme: infer Theme;
} ? P & {
    theme: Exclude<Theme, undefined>;
} : P & {
    theme: T;
};
export declare const ThemeContext: React.Context<Theme>;
export declare const useTheme: () => Theme;
export interface ThemeProviderProps {
    theme: Partial<Theme> | ((outerTheme: Theme) => Theme);
    children: React.ReactNode;
}
export declare const ThemeProvider: (props: ThemeProviderProps) => React.JSX.Element;
export declare function withTheme<C extends React.ComponentType<React.ComponentProps<C>>>(Component: C): React.ForwardRefExoticComponent<DistributiveOmit<PropsOf<C>, 'theme'> & {
    theme?: Theme;
}>;
import { ReactJSX } from "./jsx-namespace.js";
/**
 * @desc Utility type for getting props type of React component.
 * It takes `defaultProps` into an account - making props with defaults optional.
 */
export type PropsOf<C extends keyof ReactJSX.IntrinsicElements | React.JSXElementConstructor<any>> = ReactJSX.LibraryManagedAttributes<C, React.ComponentProps<C>>;
export type DistributiveOmit<T, U> = T extends any ? Pick<T, Exclude<keyof T, U>> : never;
import hoistNonReactStatics from 'hoist-non-react-statics';
declare const _default: <T extends import("react").ComponentType<any>, S extends import("react").ComponentType<any>>(targetComponent: T, sourceComponent: S) => T & hoistNonReactStatics.NonReactStatics<S, {}>;
export default _default;
export * from "../../dist/declarations/src/jsx-dev-runtime";
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1vdGlvbi1yZWFjdC1qc3gtZGV2LXJ1bnRpbWUuY2pzLmQudHMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9kaXN0L2RlY2xhcmF0aW9ucy9zcmMvanN4LWRldi1ydW50aW1lLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEifQ==
export * from "../../dist/declarations/src/jsx-runtime";
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1vdGlvbi1yZWFjdC1qc3gtcnVudGltZS5janMuZC50cyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2Rpc3QvZGVjbGFyYXRpb25zL3NyYy9qc3gtcnVudGltZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIn0=
import * as React from 'react'
import {
  EmotionCache,
  getRegisteredStyles,
  insertStyles,
  registerStyles,
  SerializedStyles
} from '@emotion/utils'
import { CSSInterpolation, serializeStyles } from '@emotion/serialize'
import isDevelopment from '#is-development'
import { withEmotionCache } from './context'
import { Theme, ThemeContext } from './theming'
import { useInsertionEffectAlwaysWithSyncFallback } from '@emotion/use-insertion-effect-with-fallbacks'
import isBrowser from '#is-browser'

export interface ArrayClassNamesArg extends Array<ClassNamesArg> {}

export type ClassNamesArg =
  | undefined
  | null
  | string
  | boolean
  | { [className: string]: boolean | null | undefined }
  | ArrayClassNamesArg

let classnames = (args: ArrayClassNamesArg): string => {
  let len = args.length
  let i = 0
  let cls = ''
  for (; i < len; i++) {
    let arg = args[i]
    if (arg == null) continue

    let toAdd
    switch (typeof arg) {
      case 'boolean':
        break
      case 'object': {
        if (Array.isArray(arg)) {
          toAdd = classnames(arg)
        } else {
          if (
            isDevelopment &&
            arg.styles !== undefined &&
            arg.name !== undefined
          ) {
            console.error(
              'You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n' +
                '`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.'
            )
          }
          toAdd = ''
          for (const k in arg) {
            if (arg[k] && k) {
              toAdd && (toAdd += ' ')
              toAdd += k
            }
          }
        }
        break
      }
      default: {
        toAdd = arg
      }
    }
    if (toAdd) {
      cls && (cls += ' ')
      cls += toAdd
    }
  }
  return cls
}
function merge(
  registered: EmotionCache['registered'],
  css: ClassNamesContent['css'],
  className: string
) {
  const registeredStyles: string[] = []

  const rawClassName = getRegisteredStyles(
    registered,
    registeredStyles,
    className
  )

  if (registeredStyles.length < 2) {
    return className
  }
  return rawClassName + css(registeredStyles)
}

const Insertion = ({
  cache,
  serializedArr
}: {
  cache: EmotionCache
  serializedArr: SerializedStyles[]
}) => {
  let rules = useInsertionEffectAlwaysWithSyncFallback(() => {
    let rules = ''
    for (let i = 0; i < serializedArr.length; i++) {
      let res = insertStyles(cache, serializedArr[i], false)
      if (!isBrowser && res !== undefined) {
        rules += res
      }
    }
    if (!isBrowser) {
      return rules
    }
  })

  if (!isBrowser && rules!.length !== 0) {
    return (
      <style
        {...{
          [`data-emotion`]: `${cache.key} ${serializedArr
            .map(serialized => serialized.name)
            .join(' ')}`,
          dangerouslySetInnerHTML: { __html: rules! },
          nonce: cache.sheet.nonce
        }}
      />
    )
  }
  return null
}

export interface ClassNamesContent {
  css(template: TemplateStringsArray, ...args: Array<CSSInterpolation>): string
  css(...args: Array<CSSInterpolation>): string
  cx(...args: Array<ClassNamesArg>): string
  theme: Theme
}

export interface ClassNamesProps {
  children(content: ClassNamesContent): React.ReactNode
}

export const ClassNames = /* #__PURE__ */ withEmotionCache<ClassNamesProps>(
  (props, cache) => {
    let hasRendered = false
    let serializedArr: SerializedStyles[] = []

    let css: ClassNamesContent['css'] = (...args) => {
      if (hasRendered && isDevelopment) {
        throw new Error('css can only be used during render')
      }

      let serialized = serializeStyles(args, cache.registered)
      serializedArr.push(serialized)
      // registration has to happen here as the result of this might get consumed by `cx`
      registerStyles(cache, serialized, false)
      return `${cache.key}-${serialized.name}`
    }
    let cx = (...args: Array<ClassNamesArg>) => {
      if (hasRendered && isDevelopment) {
        throw new Error('cx can only be used during render')
      }
      return merge(cache.registered, css, classnames(args))
    }
    let content = {
      css,
      cx,
      theme: React.useContext(ThemeContext)
    }
    let ele = props.children(content)
    hasRendered = true

    return (
      <>
        <Insertion cache={cache} serializedArr={serializedArr} />
        {ele}
      </>
    )
  }
)

if (isDevelopment) {
  ClassNames.displayName = 'EmotionClassNames'
}
import * as React from 'react'
import { useContext, forwardRef } from 'react'
import createCache, { EmotionCache } from '@emotion/cache'
import isDevelopment from '#is-development'
import isBrowser from '#is-browser'

let EmotionCacheContext =
  /* #__PURE__ */ React.createContext<EmotionCache | null>(
    // we're doing this to avoid preconstruct's dead code elimination in this one case
    // because this module is primarily intended for the browser and node
    // but it's also required in react native and similar environments sometimes
    // and we could have a special build just for that
    // but this is much easier and the native packages
    // might use a different theme context in the future anyway
    typeof HTMLElement !== 'undefined'
      ? /* #__PURE__ */ createCache({ key: 'css' })
      : null
  )

if (isDevelopment) {
  EmotionCacheContext.displayName = 'EmotionCacheContext'
}

export let CacheProvider = EmotionCacheContext.Provider

export let __unsafe_useEmotionCache = function useEmotionCache() {
  return useContext(EmotionCacheContext)
}

let withEmotionCache = function withEmotionCache<Props, RefType = any>(
  func: (
    props: React.PropsWithoutRef<Props>,
    context: EmotionCache,
    ref?: React.ForwardedRef<RefType>
  ) => React.ReactNode
):
  | React.FC<React.PropsWithoutRef<Props> & React.RefAttributes<RefType>>
  | React.ForwardRefExoticComponent<
      React.PropsWithoutRef<Props> & React.RefAttributes<RefType>
    > {
  return forwardRef<RefType, Props>((props, ref) => {
    // the cache will never be null in the browser
    let cache = useContext(EmotionCacheContext)!

    return func(props, cache, ref)
  })
}

if (!isBrowser) {
  withEmotionCache = function withEmotionCache(func) {
    return (props: Parameters<typeof func>[0]) => {
      let cache = useContext(EmotionCacheContext)
      if (cache === null) {
        // yes, we're potentially creating this on every render
        // it doesn't actually matter though since it's only on the server
        // so there will only every be a single render
        // that could change in the future because of suspense and etc. but for now,
        // this works and i don't want to optimise for a future thing that we aren't sure about
        cache = createCache({ key: 'css' })
        return (
          <EmotionCacheContext.Provider value={cache}>
            {func(props, cache)}
          </EmotionCacheContext.Provider>
        )
      } else {
        return func(props, cache)
      }
    }
  }
}

export { withEmotionCache }
import * as React from 'react'
import { withEmotionCache } from './context'
import { Theme, ThemeContext } from './theming'
import {
  EmotionCache,
  getRegisteredStyles,
  insertStyles,
  registerStyles,
  SerializedStyles
} from '@emotion/utils'
import { hasOwn } from './utils'
import { Interpolation, serializeStyles } from '@emotion/serialize'
import isDevelopment from '#is-development'
import isBrowser from '#is-browser'
import { getLabelFromStackTrace } from './get-label-from-stack-trace'
import { useInsertionEffectAlwaysWithSyncFallback } from '@emotion/use-insertion-effect-with-fallbacks'

const typePropName = '__EMOTION_TYPE_PLEASE_DO_NOT_USE__'

const labelPropName = '__EMOTION_LABEL_PLEASE_DO_NOT_USE__'

interface EmotionProps {
  css: Interpolation<Theme>
  [typePropName]: React.ElementType
  [labelPropName]?: string
  [key: string]: unknown
}

export const createEmotionProps = (
  type: React.ElementType,
  props: { css: Interpolation<Theme> }
): EmotionProps => {
  if (
    isDevelopment &&
    typeof props.css === 'string' &&
    // check if there is a css declaration
    props.css.indexOf(':') !== -1
  ) {
    throw new Error(
      `Strings are not allowed as css prop values, please wrap it in a css template literal from '@emotion/react' like this: css\`${props.css}\``
    )
  }

  let newProps = {} as EmotionProps

  for (let key in props) {
    if (hasOwn.call(props, key)) {
      newProps[key] = props[key as keyof typeof props]
    }
  }

  newProps[typePropName] = type

  // Runtime labeling is an opt-in feature because:
  // - It causes hydration warnings when using Safari and SSR
  // - It can degrade performance if there are a huge number of elements
  //
  // Even if the flag is set, we still don't compute the label if it has already
  // been determined by the Babel plugin.
  if (
    isDevelopment &&
    typeof globalThis !== 'undefined' &&
    !!(globalThis as any).EMOTION_RUNTIME_AUTO_LABEL &&
    !!props.css &&
    (typeof props.css !== 'object' ||
      !('name' in props.css) ||
      typeof props.css.name !== 'string' ||
      props.css.name.indexOf('-') === -1)
  ) {
    const label = getLabelFromStackTrace(new Error().stack)
    if (label) newProps[labelPropName] = label
  }

  return newProps
}

const Insertion = ({
  cache,
  serialized,
  isStringTag
}: {
  cache: EmotionCache
  serialized: SerializedStyles
  isStringTag: boolean
}) => {
  registerStyles(cache, serialized, isStringTag)

  const rules = useInsertionEffectAlwaysWithSyncFallback(() =>
    insertStyles(cache, serialized, isStringTag)
  )

  if (!isBrowser && rules !== undefined) {
    let serializedNames = serialized.name
    let next = serialized.next
    while (next !== undefined) {
      serializedNames += ' ' + next.name
      next = next.next
    }
    return (
      <style
        {...{
          [`data-emotion`]: `${cache.key} ${serializedNames}`,
          dangerouslySetInnerHTML: { __html: rules },
          nonce: cache.sheet.nonce
        }}
      />
    )
  }
  return null
}

let Emotion = /* #__PURE__ */ withEmotionCache<EmotionProps>(
  (props, cache, ref) => {
    let cssProp = props.css as EmotionProps['css']

    // so that using `css` from `emotion` and passing the result to the css prop works
    // not passing the registered cache to serializeStyles because it would
    // make certain babel optimisations not possible
    if (
      typeof cssProp === 'string' &&
      cache.registered[cssProp] !== undefined
    ) {
      cssProp = cache.registered[cssProp]
    }

    let WrappedComponent = props[
      typePropName
    ] as EmotionProps[typeof typePropName]
    let registeredStyles = [cssProp]
    let className = ''

    if (typeof props.className === 'string') {
      className = getRegisteredStyles(
        cache.registered,
        registeredStyles,
        props.className
      )
    } else if (props.className != null) {
      className = `${props.className} `
    }

    let serialized = serializeStyles(
      registeredStyles,
      undefined,
      React.useContext(ThemeContext)
    )

    if (isDevelopment && serialized.name.indexOf('-') === -1) {
      let labelFromStack = props[labelPropName]
      if (labelFromStack) {
        serialized = serializeStyles([
          serialized,
          'label:' + labelFromStack + ';'
        ])
      }
    }

    className += `${cache.key}-${serialized.name}`

    const newProps: Record<string, unknown> = {}
    for (let key in props) {
      if (
        hasOwn.call(props, key) &&
        key !== 'css' &&
        key !== typePropName &&
        (!isDevelopment || key !== labelPropName)
      ) {
        newProps[key] = props[key]
      }
    }
    newProps.className = className
    if (ref) {
      newProps.ref = ref
    }

    return (
      <>
        <Insertion
          cache={cache}
          serialized={serialized}
          isStringTag={typeof WrappedComponent === 'string'}
        />
        <WrappedComponent {...newProps} />
      </>
    )
  }
)

if (isDevelopment) {
  Emotion.displayName = 'EmotionCssPropInternal'
}

export default Emotion
import * as React from 'react'
import isDevelopment from '#is-development'
import { withEmotionCache } from './context'
import { Theme, ThemeContext } from './theming'
import { insertStyles } from '@emotion/utils'
import { Options as SheetOptions, StyleSheet } from '@emotion/sheet'
import isBrowser from '#is-browser'
import { useInsertionEffectWithLayoutFallback } from '@emotion/use-insertion-effect-with-fallbacks'

import { Interpolation, serializeStyles } from '@emotion/serialize'

export interface GlobalProps {
  styles: Interpolation<Theme>
}

let warnedAboutCssPropForGlobal = false

// maintain place over rerenders.
// initial render from browser, insertBefore context.sheet.tags[0] or if a style hasn't been inserted there yet, appendChild
// initial client-side render from SSR, use place of hydrating tag

export let Global = /* #__PURE__ */ withEmotionCache<GlobalProps>(
  (props, cache) => {
    if (
      isDevelopment &&
      !warnedAboutCssPropForGlobal && // check for className as well since the user is
      // probably using the custom createElement which
      // means it will be turned into a className prop
      // I don't really want to add it to the type since it shouldn't be used
      (('className' in props && props.className) ||
        ('css' in props && props.css))
    ) {
      console.error(
        "It looks like you're using the css prop on Global, did you mean to use the styles prop instead?"
      )
      warnedAboutCssPropForGlobal = true
    }
    let styles = props.styles

    let serialized = serializeStyles(
      [styles],
      undefined,
      React.useContext(ThemeContext)
    )

    if (!isBrowser) {
      let serializedNames = serialized.name
      let serializedStyles = serialized.styles
      let next = serialized.next
      while (next !== undefined) {
        serializedNames += ' ' + next.name
        serializedStyles += next.styles
        next = next.next
      }

      let shouldCache = cache.compat === true

      let rules = cache.insert(
        ``,
        { name: serializedNames, styles: serializedStyles },
        cache.sheet,
        shouldCache
      )

      if (shouldCache) {
        return null
      }

      return (
        <style
          {...{
            [`data-emotion`]: `${cache.key}-global ${serializedNames}`,
            dangerouslySetInnerHTML: { __html: rules! },
            nonce: cache.sheet.nonce
          }}
        />
      )
    }

    // yes, i know these hooks are used conditionally
    // but it is based on a constant that will never change at runtime
    // it's effectively like having two implementations and switching them out
    // so it's not actually breaking anything

    let sheetRef = React.useRef<
      [sheet: StyleSheet, isRehydrating: boolean] | undefined
    >()

    useInsertionEffectWithLayoutFallback(() => {
      const key = `${cache.key}-global`

      // use case of https://github.com/emotion-js/emotion/issues/2675
      let sheet = new (cache.sheet.constructor as {
        new (options: SheetOptions): StyleSheet
      })({
        key,
        nonce: cache.sheet.nonce,
        container: cache.sheet.container,
        speedy: cache.sheet.isSpeedy
      })
      let rehydrating = false
      let node: HTMLStyleElement | null = document.querySelector(
        `style[data-emotion="${key} ${serialized.name}"]`
      )
      if (cache.sheet.tags.length) {
        sheet.before = cache.sheet.tags[0]
      }
      if (node !== null) {
        rehydrating = true
        // clear the hash so this node won't be recognizable as rehydratable by other <Global/>s
        node.setAttribute('data-emotion', key)
        sheet.hydrate([node])
      }
      sheetRef.current = [sheet, rehydrating]
      return () => {
        sheet.flush()
      }
    }, [cache])

    useInsertionEffectWithLayoutFallback(() => {
      let sheetRefCurrent = sheetRef.current!
      let [sheet, rehydrating] = sheetRefCurrent
      if (rehydrating) {
        sheetRefCurrent[1] = false
        return
      }
      if (serialized.next !== undefined) {
        // insert keyframes
        insertStyles(cache, serialized.next, true)
      }

      if (sheet.tags.length) {
        // if this doesn't exist then it will be null so the style element will be appended
        let element = sheet.tags[sheet.tags.length - 1].nextElementSibling
        sheet.before = element
        sheet.flush()
      }
      cache.insert(``, serialized, sheet, false)
    }, [cache, serialized.name])

    return null
  }
)

if (isDevelopment) {
  Global.displayName = 'EmotionGlobal'
}
import * as React from 'react'
import weakMemoize from '@emotion/weak-memoize'
import isDevelopment from '#is-development'
import hoistNonReactStatics from './_isolated-hnrs'
import { DistributiveOmit, PropsOf } from './types'

// tslint:disable-next-line: no-empty-interface
export interface Theme {}

export interface ThemeProviderProps {
  theme: Partial<Theme> | ((outerTheme: Theme) => Theme)
  children: React.ReactNode
}

export interface ThemeProvider {
  (props: ThemeProviderProps): React.ReactElement
}

export type WithTheme<P, T> = P extends { theme: infer Theme }
  ? P & { theme: Exclude<Theme, undefined> }
  : P & { theme: T }

export const ThemeContext = /* #__PURE__ */ React.createContext({} as Theme)
if (isDevelopment) {
  ThemeContext.displayName = 'EmotionThemeContext'
}

export const useTheme = () => React.useContext(ThemeContext)

const getTheme = (
  outerTheme: Theme,
  theme: Partial<Theme> | ((theme: Theme) => Theme)
): Theme => {
  if (typeof theme === 'function') {
    const mergedTheme = theme(outerTheme)
    if (
      isDevelopment &&
      (mergedTheme == null ||
        typeof mergedTheme !== 'object' ||
        Array.isArray(mergedTheme))
    ) {
      throw new Error(
        '[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!'
      )
    }
    return mergedTheme
  }
  if (
    isDevelopment &&
    (theme == null || typeof theme !== 'object' || Array.isArray(theme))
  ) {
    throw new Error(
      '[ThemeProvider] Please make your theme prop a plain object'
    )
  }

  return { ...outerTheme, ...theme }
}

let createCacheWithTheme = /* #__PURE__ */ weakMemoize((outerTheme: Theme) => {
  return weakMemoize((theme: Partial<Theme> | ((theme: Theme) => Theme)) => {
    return getTheme(outerTheme, theme)
  })
})

export interface ThemeProviderProps {
  theme: Partial<Theme> | ((outerTheme: Theme) => Theme)
  children: React.ReactNode
}

export const ThemeProvider = (props: ThemeProviderProps) => {
  let theme = React.useContext(ThemeContext)

  if (props.theme !== theme) {
    theme = createCacheWithTheme(theme)(props.theme)
  }
  return (
    <ThemeContext.Provider value={theme}>
      {props.children}
    </ThemeContext.Provider>
  )
}

export function withTheme<
  C extends React.ComponentType<React.ComponentProps<C>>
>(
  Component: C
): React.ForwardRefExoticComponent<
  DistributiveOmit<PropsOf<C>, 'theme'> & { theme?: Theme }
>
export function withTheme(
  Component: React.ComponentType<any>
): React.ForwardRefExoticComponent<any> {
  const componentName = Component.displayName || Component.name || 'Component'

  let WithTheme = React.forwardRef(function render(props, ref) {
    let theme = React.useContext(ThemeContext)

    return <Component theme={theme} ref={ref} {...props} />
  })

  WithTheme.displayName = `WithTheme(${componentName})`

  return hoistNonReactStatics(WithTheme, Component)
}
import type { SerializedStyles } from '@emotion/utils'
import type { CSSInterpolation } from '@emotion/serialize'
import { serializeStyles } from '@emotion/serialize'

function css(
  template: TemplateStringsArray,
  ...args: CSSInterpolation[]
): SerializedStyles
function css(...args: CSSInterpolation[]): SerializedStyles
function css(...args: CSSInterpolation[]) {
  return serializeStyles(args)
}

export default css
const getLastPart = (functionName: string): string => {
  // The match may be something like 'Object.createEmotionProps' or
  // 'Loader.prototype.render'
  const parts = functionName.split('.')
  return parts[parts.length - 1]
}

const getFunctionNameFromStackTraceLine = (
  line: string
): string | undefined => {
  // V8
  let match = /^\s+at\s+([A-Za-z0-9$.]+)\s/.exec(line)
  if (match) return getLastPart(match[1])

  // Safari / Firefox
  match = /^([A-Za-z0-9$.]+)@/.exec(line)
  if (match) return getLastPart(match[1])

  return undefined
}

const internalReactFunctionNames = /* #__PURE__ */ new Set([
  'renderWithHooks',
  'processChild',
  'finishClassComponent',
  'renderToString'
])

// These identifiers come from error stacks, so they have to be valid JS
// identifiers, thus we only need to replace what is a valid character for JS,
// but not for CSS.
const sanitizeIdentifier = (identifier: string) =>
  identifier.replace(/\$/g, '-')

export const getLabelFromStackTrace = (stackTrace: string | undefined) => {
  if (!stackTrace) return undefined

  const lines = stackTrace.split('\n')

  for (let i = 0; i < lines.length; i++) {
    const functionName = getFunctionNameFromStackTraceLine(lines[i])

    // The first line of V8 stack traces is just "Error"
    if (!functionName) continue

    // If we reach one of these, we have gone too far and should quit
    if (internalReactFunctionNames.has(functionName)) break

    // The component name is the first function in the stack that starts with an
    // uppercase letter
    if (/^[A-Z]/.test(functionName)) return sanitizeIdentifier(functionName)
  }

  return undefined
}
import isDevelopment from '#is-development'
import pkg from '../package.json'
export type { EmotionCache } from '@emotion/cache'
export type {
  ArrayInterpolation,
  ComponentSelector,
  CSSObject,
  FunctionInterpolation,
  Interpolation,
  Keyframes,
  SerializedStyles
} from '@emotion/serialize'
export {
  withEmotionCache,
  CacheProvider,
  __unsafe_useEmotionCache
} from './context'
export { jsx } from './jsx'
export { jsx as createElement } from './jsx'
export { Global } from './global'
export type { GlobalProps } from './global'
export { keyframes } from './keyframes'
export { ClassNames } from './class-names'
export type {
  ClassNamesArg,
  ClassNamesContent,
  ClassNamesProps,
  ArrayClassNamesArg
} from './class-names'
export { ThemeContext, useTheme, ThemeProvider, withTheme } from './theming'
export type { Theme, ThemeProviderProps, WithTheme } from './theming'
export { default as css } from './css'
export type { DistributiveOmit, PropsOf } from './types'

declare const global: Record<string, unknown>
declare const jest: unknown
declare const vi: unknown

if (isDevelopment) {
  const isBrowser = typeof document !== 'undefined'
  // #1727, #2905 for some reason Jest and Vitest evaluate modules twice if some consuming module gets mocked
  const isTestEnv = typeof jest !== 'undefined' || typeof vi !== 'undefined'

  if (isBrowser && !isTestEnv) {
    // globalThis has wide browser support - https://caniuse.com/?search=globalThis, Node.js 12 and later
    const globalContext: Record<string, unknown> =
      typeof globalThis !== 'undefined'
        ? globalThis // eslint-disable-line no-undef
        : isBrowser
          ? window
          : global
    const globalKey = `__EMOTION_REACT_${pkg.version.split('.')[0]}__`
    if (globalContext[globalKey]) {
      console.warn(
        'You are loading @emotion/react when it is already loaded. Running ' +
          'multiple instances may cause problems. This can happen if multiple ' +
          'versions are used, or if multiple builds of the same version are ' +
          'used.'
      )
    }
    globalContext[globalKey] = true
  }
}
import * as ReactJSXRuntimeDev from 'react/jsx-dev-runtime'
import Emotion, { createEmotionProps } from './emotion-element'
import { hasOwn } from './utils'
import { Interpolation } from '@emotion/serialize'
import { Theme } from './theming'
export type { EmotionJSX as JSX } from './jsx-namespace'

export const Fragment = ReactJSXRuntimeDev.Fragment

export const jsxDEV: typeof ReactJSXRuntimeDev.jsxDEV = (
  type,
  props,
  key,
  isStaticChildren,
  source,
  self
) => {
  if (!hasOwn.call(props, 'css')) {
    return ReactJSXRuntimeDev.jsxDEV(
      type,
      props,
      key,
      isStaticChildren,
      source,
      self
    )
  }

  return ReactJSXRuntimeDev.jsxDEV(
    Emotion,
    createEmotionProps(type, props as { css: Interpolation<Theme> }),
    key,
    isStaticChildren,
    source,
    self
  )
}
import 'react'
import { Interpolation } from '@emotion/serialize'
import { Theme } from './theming'

type IsPreReact19 = 2 extends Parameters<React.FunctionComponent<any>>['length']
  ? true
  : false

type WithConditionalCSSProp<P> = 'className' extends keyof P
  ? string extends P['className' & keyof P]
    ? { css?: Interpolation<Theme> }
    : {}
  : {}

// unpack all here to avoid infinite self-referencing when defining our own JSX namespace for the pre-React 19 case

// the IsPreReact19 and @ts-ignore comments are to allow @emotion/react to support three different cases of types
// - pre-React 18.something which didn't have `React.JSX`
// - React 18.something with `React.JSX`
// - React 19 with `React.JSX` and no global `JSX`
// we support both pre-React 19 cases by using the global `JSX` and with the React 19 types, we use `React.JSX`
// to make this work, we need @ts-ignore comments to ignore references that are invalid
// though note that the error types resulting from ignoring the errors will never be used
// since the pre vs post React 19 conditional will pick the one that won't error

// prettier-ignore
/** @ts-ignore */
type ReactJSXElement = true extends IsPreReact19 ? JSX.Element : React.JSX.Element

// prettier-ignore
/** @ts-ignore */
type ReactJSXElementClass = true extends IsPreReact19 ? JSX.ElementClass : React.JSX.ElementClass

// prettier-ignore
/** @ts-ignore */
type ReactJSXElementAttributesProperty = true extends IsPreReact19 ? JSX.ElementAttributesProperty : React.JSX.ElementAttributesProperty

// prettier-ignore
/** @ts-ignore */
type ReactJSXElementChildrenAttribute = true extends IsPreReact19 ? JSX.ElementChildrenAttribute : React.JSX.ElementChildrenAttribute

// prettier-ignore
/** @ts-ignore */
type ReactJSXLibraryManagedAttributes<C, P> = true extends IsPreReact19 ? JSX.LibraryManagedAttributes<C, P> : React.JSX.LibraryManagedAttributes<C, P>

// prettier-ignore
/** @ts-ignore */
type ReactJSXIntrinsicAttributes = true extends IsPreReact19 ? JSX.IntrinsicAttributes : React.JSX.IntrinsicAttributes

// prettier-ignore
/** @ts-ignore */
type ReactJSXIntrinsicClassAttributes<T> = true extends IsPreReact19 ? JSX.IntrinsicClassAttributes<T> : React.JSX.IntrinsicClassAttributes<T>

// prettier-ignore
/** @ts-ignore */
type ReactJSXIntrinsicElements = true extends IsPreReact19 ? JSX.IntrinsicElements : React.JSX.IntrinsicElements

// based on the code from @types/react@18.2.8
// https://github.com/DefinitelyTyped/DefinitelyTyped/blob/3197efc097d522c4bf02b94e1a0766d007d6cdeb/types/react/index.d.ts#LL3204C13-L3204C13
// prettier-ignore
/** @ts-ignore */
type ReactJSXElementType = true extends IsPreReact19 ? string | React.JSXElementConstructor<any> : React.JSX.ElementType

export namespace ReactJSX {
  export type ElementType = ReactJSXElementType
  export interface Element extends ReactJSXElement {}
  export interface ElementClass extends ReactJSXElementClass {}
  export interface ElementAttributesProperty
    extends ReactJSXElementAttributesProperty {}
  export interface ElementChildrenAttribute
    extends ReactJSXElementChildrenAttribute {}

  export type LibraryManagedAttributes<C, P> = ReactJSXLibraryManagedAttributes<
    C,
    P
  >

  export interface IntrinsicAttributes extends ReactJSXIntrinsicAttributes {}
  export interface IntrinsicClassAttributes<T>
    extends ReactJSXIntrinsicClassAttributes<T> {}

  export type IntrinsicElements = ReactJSXIntrinsicElements
}

export namespace EmotionJSX {
  export type ElementType = ReactJSXElementType
  export interface Element extends ReactJSXElement {}
  export interface ElementClass extends ReactJSXElementClass {}
  export interface ElementAttributesProperty
    extends ReactJSXElementAttributesProperty {}
  export interface ElementChildrenAttribute
    extends ReactJSXElementChildrenAttribute {}

  export type LibraryManagedAttributes<C, P> = P extends unknown
    ? WithConditionalCSSProp<P> & ReactJSXLibraryManagedAttributes<C, P>
    : never

  export interface IntrinsicAttributes extends ReactJSXIntrinsicAttributes {}
  export interface IntrinsicClassAttributes<T>
    extends ReactJSXIntrinsicClassAttributes<T> {}

  export type IntrinsicElements = {
    [K in keyof ReactJSXIntrinsicElements]: ReactJSXIntrinsicElements[K] & {
      css?: Interpolation<Theme>
    }
  }
}
import * as ReactJSXRuntime from 'react/jsx-runtime'
import Emotion, { createEmotionProps } from './emotion-element'
import { hasOwn } from './utils'
import { Interpolation } from '@emotion/serialize'
import { Theme } from './theming'
export type { EmotionJSX as JSX } from './jsx-namespace'

export const Fragment = ReactJSXRuntime.Fragment

export const jsx: typeof ReactJSXRuntime.jsx = (type, props, key) => {
  if (!hasOwn.call(props, 'css')) {
    return ReactJSXRuntime.jsx(type, props, key)
  }

  return ReactJSXRuntime.jsx(
    Emotion,
    createEmotionProps(type, props as { css: Interpolation<Theme> }),
    key
  )
}

export const jsxs: typeof ReactJSXRuntime.jsxs = (type, props, key) => {
  if (!hasOwn.call(props, 'css')) {
    return ReactJSXRuntime.jsxs(type, props, key)
  }

  return ReactJSXRuntime.jsxs(
    Emotion,
    createEmotionProps(type, props as { css: Interpolation<Theme> }),
    key
  )
}
import * as React from 'react'
import Emotion, { createEmotionProps } from './emotion-element'
import { EmotionJSX } from './jsx-namespace'
import { hasOwn } from './utils'

export const jsx: typeof React.createElement = function (
  type: any,
  props: any
): any {
  // eslint-disable-next-line prefer-rest-params
  let args: any = arguments

  if (props == null || !hasOwn.call(props, 'css')) {
    return React.createElement.apply(undefined, args)
  }

  let argsLength = args.length
  let createElementArgArray: any = new Array(argsLength)
  createElementArgArray[0] = Emotion
  createElementArgArray[1] = createEmotionProps(type, props)

  for (let i = 2; i < argsLength; i++) {
    createElementArgArray[i] = args[i]
  }

  return React.createElement.apply(null, createElementArgArray)
}
export namespace jsx {
  export namespace JSX {
    export type ElementType = EmotionJSX.ElementType
    export interface Element extends EmotionJSX.Element {}
    export interface ElementClass extends EmotionJSX.ElementClass {}
    export interface ElementAttributesProperty
      extends EmotionJSX.ElementAttributesProperty {}
    export interface ElementChildrenAttribute
      extends EmotionJSX.ElementChildrenAttribute {}
    export type LibraryManagedAttributes<C, P> =
      EmotionJSX.LibraryManagedAttributes<C, P>
    export interface IntrinsicAttributes
      extends EmotionJSX.IntrinsicAttributes {}
    export interface IntrinsicClassAttributes<T>
      extends EmotionJSX.IntrinsicClassAttributes<T> {}
    export type IntrinsicElements = EmotionJSX.IntrinsicElements
  }
}
import { CSSInterpolation } from '@emotion/serialize'
import css from './css'

type Keyframes = {
  name: string
  styles: string
  anim: 1
  toString: () => string
} & string

export function keyframes(
  template: TemplateStringsArray,
  ...args: CSSInterpolation[]
): Keyframes
export function keyframes(...args: CSSInterpolation[]): Keyframes
export function keyframes(...args: CSSInterpolation[]) {
  let insertable = css(...args)
  const name = `animation-${insertable.name}`
  return {
    name,
    styles: `@keyframes ${name}{${insertable.styles}}`,
    anim: 1,
    toString() {
      return `_EMO_${this.name}_${this.styles}_EMO_`
    }
  }
}
import { ReactJSX } from './jsx-namespace'

/**
 * @desc Utility type for getting props type of React component.
 * It takes `defaultProps` into an account - making props with defaults optional.
 */
export type PropsOf<
  C extends keyof ReactJSX.IntrinsicElements | React.JSXElementConstructor<any>
> = ReactJSX.LibraryManagedAttributes<C, React.ComponentProps<C>>

// We need to use this version of Omit as it's distributive (Will preserve unions)
export type DistributiveOmit<T, U> = T extends any
  ? Pick<T, Exclude<keyof T, U>>
  : never
export const hasOwn = {}.hasOwnProperty
// this file isolates this package that is not tree-shakeable
// and allows it to be dropped - if it stays unused
// it happens thanks to sideEffects: false in our package.json
import hoistNonReactStatics from 'hoist-non-react-statics'

// have to wrap it in a proxy function because Rollup is too damn smart
// and if this module doesn't actually contain any logic of its own
// then Rollup just use 'hoist-non-react-statics' directly in other chunks
export default <
  T extends React.ComponentType<any>,
  S extends React.ComponentType<any>
>(
  targetComponent: T,
  sourceComponent: S
) => hoistNonReactStatics(targetComponent, sourceComponent)
export default false
export default typeof document !== 'undefined'
export default true
import {} from 'react'
import { Interpolation } from '@emotion/serialize'
import { Theme } from '@emotion/react'

declare module 'react' {
  interface Attributes {
    css?: Interpolation<Theme>
  }
}
export * from "../../dist/declarations/src/_isolated-hnrs";
export { default } from "../../dist/declarations/src/_isolated-hnrs";
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1vdGlvbi1yZWFjdC1faXNvbGF0ZWQtaG5ycy5janMuZC50cyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2Rpc3QvZGVjbGFyYXRpb25zL3NyYy9faXNvbGF0ZWQtaG5ycy5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIn0=
export { default as _default } from "../../dist/declarations/src/_isolated-hnrs.js"
export * from "./declarations/src/index";
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1vdGlvbi1zZXJpYWxpemUuY2pzLmQudHMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuL2RlY2xhcmF0aW9ucy9zcmMvaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSJ9
import type { RegisteredCache, SerializedStyles } from '@emotion/utils';
import * as CSS from 'csstype';
export type { RegisteredCache, SerializedStyles };
export type CSSProperties = CSS.PropertiesFallback<number | string>;
export type CSSPropertiesWithMultiValues = {
    [K in keyof CSSProperties]: CSSProperties[K] | ReadonlyArray<Extract<CSSProperties[K], string>>;
};
export type CSSPseudos = {
    [K in CSS.Pseudos]?: CSSObject;
};
export interface ArrayCSSInterpolation extends ReadonlyArray<CSSInterpolation> {
}
export type InterpolationPrimitive = null | undefined | boolean | number | string | ComponentSelector | Keyframes | SerializedStyles | CSSObject;
export type CSSInterpolation = InterpolationPrimitive | ArrayCSSInterpolation;
export interface CSSOthersObject {
    [propertiesName: string]: CSSInterpolation;
}
export interface CSSObject extends CSSPropertiesWithMultiValues, CSSPseudos, CSSOthersObject {
}
export interface ComponentSelector {
    __emotion_styles: any;
}
export type Keyframes = {
    name: string;
    styles: string;
    anim: number;
    toString: () => string;
} & string;
export interface ArrayInterpolation<Props = unknown> extends ReadonlyArray<Interpolation<Props>> {
}
export interface FunctionInterpolation<Props = unknown> {
    (props: Props): Interpolation<Props>;
}
export type Interpolation<Props = unknown> = InterpolationPrimitive | ArrayInterpolation<Props> | FunctionInterpolation<Props>;
export declare function serializeStyles<Props>(args: Array<TemplateStringsArray | Interpolation<Props>>, registered?: RegisteredCache, mergedProps?: Props): SerializedStyles;
import type { RegisteredCache, SerializedStyles } from '@emotion/utils'
import hashString from '@emotion/hash'
import unitless from '@emotion/unitless'
import memoize from '@emotion/memoize'
import isDevelopment from '#is-development'
import * as CSS from 'csstype'

export type { RegisteredCache, SerializedStyles }

type Cursor = {
  name: string
  styles: string
  next?: Cursor
}

export type CSSProperties = CSS.PropertiesFallback<number | string>
export type CSSPropertiesWithMultiValues = {
  [K in keyof CSSProperties]:
    | CSSProperties[K]
    | ReadonlyArray<Extract<CSSProperties[K], string>>
}

export type CSSPseudos = { [K in CSS.Pseudos]?: CSSObject }

export interface ArrayCSSInterpolation
  extends ReadonlyArray<CSSInterpolation> {}

export type InterpolationPrimitive =
  | null
  | undefined
  | boolean
  | number
  | string
  | ComponentSelector
  | Keyframes
  | SerializedStyles
  | CSSObject

export type CSSInterpolation = InterpolationPrimitive | ArrayCSSInterpolation

export interface CSSOthersObject {
  [propertiesName: string]: CSSInterpolation
}

export interface CSSObject
  extends CSSPropertiesWithMultiValues,
    CSSPseudos,
    CSSOthersObject {}

export interface ComponentSelector {
  __emotion_styles: any
}

export type Keyframes = {
  name: string
  styles: string
  anim: number
  toString: () => string
} & string

export interface ArrayInterpolation<Props = unknown>
  extends ReadonlyArray<Interpolation<Props>> {}

export interface FunctionInterpolation<Props = unknown> {
  (props: Props): Interpolation<Props>
}

export type Interpolation<Props = unknown> =
  | InterpolationPrimitive
  | ArrayInterpolation<Props>
  | FunctionInterpolation<Props>

const ILLEGAL_ESCAPE_SEQUENCE_ERROR = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`

const UNDEFINED_AS_OBJECT_KEY_ERROR =
  "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key)."

let hyphenateRegex = /[A-Z]|^ms/g
let animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g

const isCustomProperty = (property: string) => property.charCodeAt(1) === 45
const isProcessableValue = (value: Interpolation) =>
  value != null && typeof value !== 'boolean'

const processStyleName = /* #__PURE__ */ memoize((styleName: string) =>
  isCustomProperty(styleName)
    ? styleName
    : styleName.replace(hyphenateRegex, '-$&').toLowerCase()
)

let processStyleValue = (
  key: string,
  value: string | number
): string | number => {
  switch (key) {
    case 'animation':
    case 'animationName': {
      if (typeof value === 'string') {
        return value.replace(animationRegex, (match, p1, p2) => {
          cursor = {
            name: p1,
            styles: p2,
            next: cursor
          }
          return p1
        })
      }
    }
  }

  if (
    unitless[key as keyof typeof unitless] !== 1 &&
    !isCustomProperty(key) &&
    typeof value === 'number' &&
    value !== 0
  ) {
    return value + 'px'
  }
  return value
}

if (isDevelopment) {
  let contentValuePattern =
    /(var|attr|counters?|url|element|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/
  let contentValues = ['normal', 'none', 'initial', 'inherit', 'unset']

  let oldProcessStyleValue = processStyleValue

  let msPattern = /^-ms-/
  let hyphenPattern = /-(.)/g

  let hyphenatedCache: Record<string, boolean | undefined> = {}

  processStyleValue = (key: string, value: string | number) => {
    if (key === 'content') {
      if (
        typeof value !== 'string' ||
        (contentValues.indexOf(value) === -1 &&
          !contentValuePattern.test(value) &&
          (value.charAt(0) !== value.charAt(value.length - 1) ||
            (value.charAt(0) !== '"' && value.charAt(0) !== "'")))
      ) {
        throw new Error(
          `You seem to be using a value for 'content' without quotes, try replacing it with \`content: '"${value}"'\``
        )
      }
    }

    const processed = oldProcessStyleValue(key, value)

    if (
      processed !== '' &&
      !isCustomProperty(key) &&
      key.indexOf('-') !== -1 &&
      hyphenatedCache[key] === undefined
    ) {
      hyphenatedCache[key] = true
      console.error(
        `Using kebab-case for css properties in objects is not supported. Did you mean ${key
          .replace(msPattern, 'ms-')
          .replace(hyphenPattern, (str, char) => char.toUpperCase())}?`
      )
    }

    return processed
  }
}

const noComponentSelectorMessage =
  'Component selectors can only be used in conjunction with ' +
  '@emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware ' +
  'compiler transform.'

function handleInterpolation(
  mergedProps: unknown | undefined,
  registered: RegisteredCache | undefined,
  interpolation: Interpolation
): string | number {
  if (interpolation == null) {
    return ''
  }
  const componentSelector = interpolation as ComponentSelector
  if (componentSelector.__emotion_styles !== undefined) {
    if (
      isDevelopment &&
      String(componentSelector) === 'NO_COMPONENT_SELECTOR'
    ) {
      throw new Error(noComponentSelectorMessage)
    }
    return componentSelector as unknown as string
  }

  switch (typeof interpolation) {
    case 'boolean': {
      return ''
    }
    case 'object': {
      const keyframes = interpolation as Keyframes
      if (keyframes.anim === 1) {
        cursor = {
          name: keyframes.name,
          styles: keyframes.styles,
          next: cursor
        }

        return keyframes.name
      }
      const serializedStyles = interpolation as SerializedStyles
      if (serializedStyles.styles !== undefined) {
        let next = serializedStyles.next
        if (next !== undefined) {
          // not the most efficient thing ever but this is a pretty rare case
          // and there will be very few iterations of this generally
          while (next !== undefined) {
            cursor = {
              name: next.name,
              styles: next.styles,
              next: cursor
            }
            next = next.next
          }
        }
        let styles = `${serializedStyles.styles};`
        return styles
      }

      return createStringFromObject(
        mergedProps,
        registered,
        interpolation as ArrayInterpolation | CSSObject
      )
    }
    case 'function': {
      if (mergedProps !== undefined) {
        let previousCursor = cursor
        let result = interpolation(mergedProps)
        cursor = previousCursor

        return handleInterpolation(mergedProps, registered, result)
      } else if (isDevelopment) {
        console.error(
          'Functions that are interpolated in css calls will be stringified.\n' +
            'If you want to have a css call based on props, create a function that returns a css call like this\n' +
            'let dynamicStyle = (props) => css`color: ${props.color}`\n' +
            'It can be called directly with props or interpolated in a styled call like this\n' +
            "let SomeComponent = styled('div')`${dynamicStyle}`"
        )
      }
      break
    }
    case 'string':
      if (isDevelopment) {
        const matched: string[] = []
        const replaced = interpolation.replace(
          animationRegex,
          (_match, _p1, p2) => {
            const fakeVarName = `animation${matched.length}`
            matched.push(
              `const ${fakeVarName} = keyframes\`${p2.replace(
                /^@keyframes animation-\w+/,
                ''
              )}\``
            )
            return `\${${fakeVarName}}`
          }
        )
        if (matched.length) {
          console.error(
            `\`keyframes\` output got interpolated into plain string, please wrap it with \`css\`.

Instead of doing this:

${[...matched, `\`${replaced}\``].join('\n')}

You should wrap it with \`css\` like this:

css\`${replaced}\``
          )
        }
      }
      break
  }

  // finalize string values (regular strings and functions interpolated into css calls)
  const asString = interpolation as string
  if (registered == null) {
    return asString
  }
  const cached = registered[asString]
  return cached !== undefined ? cached : asString
}

function createStringFromObject(
  mergedProps: unknown | undefined,
  registered: RegisteredCache | undefined,
  obj: ArrayInterpolation | CSSObject
): string {
  let string = ''

  if (Array.isArray(obj)) {
    for (let i = 0; i < obj.length; i++) {
      string += `${handleInterpolation(mergedProps, registered, obj[i])};`
    }
  } else {
    for (let key in obj) {
      let value: unknown = obj[key as never]
      if (typeof value !== 'object') {
        const asString = value as string
        if (registered != null && registered[asString] !== undefined) {
          string += `${key}{${registered[asString]}}`
        } else if (isProcessableValue(asString)) {
          string += `${processStyleName(key)}:${processStyleValue(
            key,
            asString
          )};`
        }
      } else {
        if (key === 'NO_COMPONENT_SELECTOR' && isDevelopment) {
          throw new Error(noComponentSelectorMessage)
        }
        if (
          Array.isArray(value) &&
          typeof value[0] === 'string' &&
          (registered == null || registered[value[0]] === undefined)
        ) {
          for (let i = 0; i < value.length; i++) {
            if (isProcessableValue(value[i])) {
              string += `${processStyleName(key)}:${processStyleValue(
                key,
                value[i] as string | number
              )};`
            }
          }
        } else {
          const interpolated = handleInterpolation(
            mergedProps,
            registered,
            value as Interpolation
          )
          switch (key) {
            case 'animation':
            case 'animationName': {
              string += `${processStyleName(key)}:${interpolated};`
              break
            }
            default: {
              if (isDevelopment && key === 'undefined') {
                console.error(UNDEFINED_AS_OBJECT_KEY_ERROR)
              }
              string += `${key}{${interpolated}}`
            }
          }
        }
      }
    }
  }

  return string
}

let labelPattern = /label:\s*([^\s;{]+)\s*(;|$)/g

// this is the cursor for keyframes
// keyframes are stored on the SerializedStyles object as a linked list
let cursor: Cursor | undefined

export function serializeStyles<Props>(
  args: Array<TemplateStringsArray | Interpolation<Props>>,
  registered?: RegisteredCache,
  mergedProps?: Props
): SerializedStyles
export function serializeStyles(
  args: Array<TemplateStringsArray | Interpolation<unknown>>,
  registered?: RegisteredCache,
  mergedProps?: unknown
): SerializedStyles {
  if (
    args.length === 1 &&
    typeof args[0] === 'object' &&
    args[0] !== null &&
    (args[0] as SerializedStyles).styles !== undefined
  ) {
    return args[0] as SerializedStyles
  }
  let stringMode = true
  let styles = ''

  cursor = undefined
  let strings = args[0]
  if (strings == null || (strings as TemplateStringsArray).raw === undefined) {
    stringMode = false
    styles += handleInterpolation(
      mergedProps,
      registered,
      strings as Interpolation
    )
  } else {
    const asTemplateStringsArr = strings as TemplateStringsArray
    if (isDevelopment && asTemplateStringsArr[0] === undefined) {
      console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR)
    }
    styles += asTemplateStringsArr[0]
  }
  // we start at 1 since we've already handled the first arg
  for (let i = 1; i < args.length; i++) {
    styles += handleInterpolation(
      mergedProps,
      registered,
      args[i] as Interpolation
    )
    if (stringMode) {
      const templateStringsArr = strings as TemplateStringsArray
      if (isDevelopment && templateStringsArr[i] === undefined) {
        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR)
      }
      styles += templateStringsArr[i]
    }
  }

  // using a global regex with .exec is stateful so lastIndex has to be reset each time
  labelPattern.lastIndex = 0
  let identifierName = ''

  let match
  // https://esbench.com/bench/5b809c2cf2949800a0f61fb5
  while ((match = labelPattern.exec(styles)) !== null) {
    identifierName += '-' + match[1]
  }

  let name = hashString(styles) + identifierName

  if (isDevelopment) {
    const devStyles = {
      name,
      styles,
      next: cursor,
      toString() {
        return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."
      }
    }
    return devStyles
  }
  return {
    name,
    styles,
    next: cursor
  }
}
export default false as boolean
export default true as boolean
export * from "./declarations/src/index";
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1vdGlvbi1zaGVldC5janMuZC50cyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4vZGVjbGFyYXRpb25zL3NyYy9pbmRleC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIn0=
export type Options = {
    nonce?: string;
    key: string;
    container: Node;
    speedy?: boolean;
    prepend?: boolean;
    insertionPoint?: HTMLElement;
};
export declare class StyleSheet {
    isSpeedy: boolean;
    ctr: number;
    tags: HTMLStyleElement[];
    container: Node;
    key: string;
    nonce: string | undefined;
    prepend: boolean | undefined;
    before: Element | null;
    insertionPoint: HTMLElement | undefined;
    private _alreadyInsertedOrderInsensitiveRule;
    constructor(options: Options);
    private _insertTag;
    hydrate(nodes: HTMLStyleElement[]): void;
    insert(rule: string): void;
    flush(): void;
}
import isDevelopment from '#is-development'
/*

Based off glamor's StyleSheet, thanks Sunil ❤️

high performance StyleSheet for css-in-js systems

- uses multiple style tags behind the scenes for millions of rules
- uses `insertRule` for appending in production for *much* faster performance

// usage

import { StyleSheet } from '@emotion/sheet'

let styleSheet = new StyleSheet({ key: '', container: document.head })

styleSheet.insert('#box { border: 1px solid red; }')
- appends a css rule into the stylesheet

styleSheet.flush()
- empties the stylesheet of all its contents

*/

function sheetForTag(tag: HTMLStyleElement): CSSStyleSheet {
  if (tag.sheet) {
    return tag.sheet
  }

  // this weirdness brought to you by firefox
  /* istanbul ignore next */
  for (let i = 0; i < document.styleSheets.length; i++) {
    if (document.styleSheets[i].ownerNode === tag) {
      return document.styleSheets[i]
    }
  }

  // this function should always return with a value
  // TS can't understand it though so we make it stop complaining here
  return undefined as any
}

export type Options = {
  nonce?: string
  key: string
  container: Node
  speedy?: boolean
  prepend?: boolean
  insertionPoint?: HTMLElement
}

function createStyleElement(options: Options): HTMLStyleElement {
  let tag = document.createElement('style')
  tag.setAttribute('data-emotion', options.key)
  if (options.nonce !== undefined) {
    tag.setAttribute('nonce', options.nonce)
  }
  tag.appendChild(document.createTextNode(''))
  tag.setAttribute('data-s', '')
  return tag
}

export class StyleSheet {
  isSpeedy: boolean
  ctr: number
  tags: HTMLStyleElement[]
  // Using Node instead of HTMLElement since container may be a ShadowRoot
  container: Node
  key: string
  nonce: string | undefined
  prepend: boolean | undefined
  before: Element | null
  insertionPoint: HTMLElement | undefined

  private _alreadyInsertedOrderInsensitiveRule: boolean | undefined

  constructor(options: Options) {
    this.isSpeedy =
      options.speedy === undefined ? !isDevelopment : options.speedy
    this.tags = []
    this.ctr = 0
    this.nonce = options.nonce
    // key is the value of the data-emotion attribute, it's used to identify different sheets
    this.key = options.key
    this.container = options.container
    this.prepend = options.prepend
    this.insertionPoint = options.insertionPoint
    this.before = null
  }

  private _insertTag = (tag: HTMLStyleElement): void => {
    let before
    if (this.tags.length === 0) {
      if (this.insertionPoint) {
        before = this.insertionPoint.nextSibling
      } else if (this.prepend) {
        before = this.container.firstChild
      } else {
        before = this.before
      }
    } else {
      before = this.tags[this.tags.length - 1].nextSibling
    }
    this.container.insertBefore(tag, before)
    this.tags.push(tag)
  }

  hydrate(nodes: HTMLStyleElement[]): void {
    nodes.forEach(this._insertTag)
  }

  insert(rule: string): void {
    // the max length is how many rules we have per style tag, it's 65000 in speedy mode
    // it's 1 in dev because we insert source maps that map a single rule to a location
    // and you can only have one source map per style tag
    if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) {
      this._insertTag(createStyleElement(this))
    }
    const tag = this.tags[this.tags.length - 1]

    if (isDevelopment) {
      const isImportRule =
        rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105

      if (isImportRule && this._alreadyInsertedOrderInsensitiveRule) {
        // this would only cause problem in speedy mode
        // but we don't want enabling speedy to affect the observable behavior
        // so we report this error at all times
        console.error(
          `You're attempting to insert the following rule:\n` +
            rule +
            '\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.'
        )
      }

      this._alreadyInsertedOrderInsensitiveRule =
        this._alreadyInsertedOrderInsensitiveRule || !isImportRule
    }

    if (this.isSpeedy) {
      const sheet = sheetForTag(tag)
      try {
        // this is the ultrafast version, works across browsers
        // the big drawback is that the css won't be editable in devtools
        sheet.insertRule(rule, sheet.cssRules.length)
      } catch (e) {
        if (
          isDevelopment &&
          !/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear|-ms-expand|-ms-reveal){/.test(
            rule
          )
        ) {
          console.error(
            `There was a problem inserting the following rule: "${rule}"`,
            e
          )
        }
      }
    } else {
      tag.appendChild(document.createTextNode(rule))
    }
    this.ctr++
  }

  flush(): void {
    this.tags.forEach(tag => tag.parentNode?.removeChild(tag))
    this.tags = []
    this.ctr = 0
    if (isDevelopment) {
      this._alreadyInsertedOrderInsensitiveRule = false
    }
  }
}
export default false
export default true
import styled from '@emotion/styled'
export * from '@emotion/styled'
export default styled
export * from "../../dist/declarations/src/base";
export { default } from "../../dist/declarations/src/base";
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1vdGlvbi1zdHlsZWQtYmFzZS5janMuZC50cyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2Rpc3QvZGVjbGFyYXRpb25zL3NyYy9iYXNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEifQ==
export { default as _default } from "../../dist/declarations/src/base.js"
export * from "./declarations/src/index";
export { default } from "./declarations/src/index";
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1vdGlvbi1zdHlsZWQuY2pzLmQudHMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuL2RlY2xhcmF0aW9ucy9zcmMvaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSJ9
export { default as _default } from "./declarations/src/index.js"
import { CreateStyled } from "./types.js";
export type { ArrayInterpolation, ComponentSelector, CSSObject, FunctionInterpolation, Interpolation } from '@emotion/serialize';
declare const _default: CreateStyled;
export default _default;
import { Theme } from '@emotion/react';
import { ReactJSXIntrinsicElements } from "./jsx-namespace.js";
import { CreateStyledComponent, CreateStyled as BaseCreateStyled } from "./types.js";
export type { ArrayInterpolation, ComponentSelector, CSSObject, FunctionInterpolation, Interpolation } from '@emotion/serialize';
export type { CreateStyledComponent, FilteringStyledOptions, StyledComponent, StyledOptions } from "./types.js";
export type StyledTags = {
    [Tag in keyof ReactJSXIntrinsicElements]: CreateStyledComponent<{
        theme?: Theme;
        as?: React.ElementType;
    }, ReactJSXIntrinsicElements[Tag]>;
};
export interface CreateStyled extends BaseCreateStyled, StyledTags {
}
declare const newStyled: CreateStyled;
export default newStyled;
import 'react';
type IsPreReact19 = 2 extends Parameters<React.FunctionComponent<any>>['length'] ? true : false;
/** @ts-ignore */
export type ReactJSXIntrinsicElements = true extends IsPreReact19 ? JSX.IntrinsicElements : React.JSX.IntrinsicElements;
export {};
import { ComponentSelector, Interpolation } from '@emotion/serialize';
import { ReactJSXIntrinsicElements } from "./jsx-namespace.js";
import { PropsOf, Theme } from '@emotion/react';
/** Same as StyledOptions but shouldForwardProp must be a type guard */
export interface FilteringStyledOptions<Props = Record<string, any>, ForwardedProps extends keyof Props & string = keyof Props & string> {
    label?: string;
    shouldForwardProp?: (propName: string) => propName is ForwardedProps;
    target?: string;
}
export interface StyledOptions<Props = Record<string, any>> {
    label?: string;
    shouldForwardProp?: (propName: string) => boolean;
    target?: string;
}
/**
 * @typeparam ComponentProps  Props which will be included when withComponent is called
 * @typeparam SpecificComponentProps  Props which will *not* be included when withComponent is called
 */
export interface StyledComponent<ComponentProps extends {}, SpecificComponentProps extends {} = {}, JSXProps extends {} = {}> extends React.FC<ComponentProps & SpecificComponentProps & JSXProps>, ComponentSelector {
    withComponent<C extends React.ComponentClass<React.ComponentProps<C>>>(component: C): StyledComponent<ComponentProps & PropsOf<C>, {}, {
        ref?: React.Ref<InstanceType<C>>;
    }>;
    withComponent<C extends React.ComponentType<React.ComponentProps<C>>>(component: C): StyledComponent<ComponentProps & PropsOf<C>>;
    withComponent<Tag extends keyof ReactJSXIntrinsicElements>(tag: Tag): StyledComponent<ComponentProps, ReactJSXIntrinsicElements[Tag]>;
}
/**
 * @typeparam ComponentProps  Props which will be included when withComponent is called
 * @typeparam SpecificComponentProps  Props which will *not* be included when withComponent is called
 */
export interface CreateStyledComponent<ComponentProps extends {}, SpecificComponentProps extends {} = {}, JSXProps extends {} = {}> {
    (template: TemplateStringsArray, ...styles: Array<Interpolation<ComponentProps & SpecificComponentProps & {
        theme: Theme;
    }>>): StyledComponent<ComponentProps, SpecificComponentProps, JSXProps>;
    /**
     * @typeparam AdditionalProps  Additional props to add to your styled component
     */
    <AdditionalProps extends {}>(template: TemplateStringsArray, ...styles: Array<Interpolation<ComponentProps & SpecificComponentProps & AdditionalProps & {
        theme: Theme;
    }>>): StyledComponent<ComponentProps & AdditionalProps, SpecificComponentProps, JSXProps>;
    /**
     * @typeparam AdditionalProps  Additional props to add to your styled component
     */
    <AdditionalProps extends {} = {}>(...styles: Array<Interpolation<ComponentProps & SpecificComponentProps & AdditionalProps & {
        theme: Theme;
    }>>): StyledComponent<ComponentProps & AdditionalProps, SpecificComponentProps, JSXProps>;
}
/**
 * @desc
 * This function accepts a React component or tag ('div', 'a' etc).
 *
 * @example styled(MyComponent)({ width: 100 })
 * @example styled(MyComponent)(myComponentProps => ({ width: myComponentProps.width })
 * @example styled('div')({ width: 100 })
 * @example styled('div')<Props>(props => ({ width: props.width })
 */
export interface CreateStyled {
    <C extends React.ComponentClass<React.ComponentProps<C>>, ForwardedProps extends keyof React.ComponentProps<C> & string = keyof React.ComponentProps<C> & string>(component: C, options: FilteringStyledOptions<React.ComponentProps<C>, ForwardedProps>): CreateStyledComponent<Pick<PropsOf<C>, ForwardedProps> & {
        theme?: Theme;
    }, {}, {
        ref?: React.Ref<InstanceType<C>>;
    }>;
    <C extends React.ComponentClass<React.ComponentProps<C>>>(component: C, options?: StyledOptions<React.ComponentProps<C>>): CreateStyledComponent<PropsOf<C> & {
        theme?: Theme;
    }, {}, {
        ref?: React.Ref<InstanceType<C>>;
    }>;
    <C extends React.ComponentType<React.ComponentProps<C>>, ForwardedProps extends keyof React.ComponentProps<C> & string = keyof React.ComponentProps<C> & string>(component: C, options: FilteringStyledOptions<React.ComponentProps<C>, ForwardedProps>): CreateStyledComponent<Pick<PropsOf<C>, ForwardedProps> & {
        theme?: Theme;
    }>;
    <C extends React.ComponentType<React.ComponentProps<C>>>(component: C, options?: StyledOptions<React.ComponentProps<C>>): CreateStyledComponent<PropsOf<C> & {
        theme?: Theme;
    }>;
    <Tag extends keyof ReactJSXIntrinsicElements, ForwardedProps extends keyof ReactJSXIntrinsicElements[Tag] & string = keyof ReactJSXIntrinsicElements[Tag] & string>(tag: Tag, options: FilteringStyledOptions<ReactJSXIntrinsicElements[Tag], ForwardedProps>): CreateStyledComponent<{
        theme?: Theme;
        as?: React.ElementType;
    }, Pick<ReactJSXIntrinsicElements[Tag], ForwardedProps>>;
    <Tag extends keyof ReactJSXIntrinsicElements>(tag: Tag, options?: StyledOptions<ReactJSXIntrinsicElements[Tag]>): CreateStyledComponent<{
        theme?: Theme;
        as?: React.ElementType;
    }, ReactJSXIntrinsicElements[Tag]>;
}
export type ElementType = React.ElementType & {
    defaultProps?: Partial<any>;
    __emotion_real?: ElementType;
    __emotion_base?: ElementType;
    __emotion_styles?: Interpolation<Theme>[];
    __emotion_forwardProp?: (propName: string) => boolean;
};
import isBrowser from '#is-browser'
import isDevelopment from '#is-development'
import { Theme, ThemeContext, withEmotionCache } from '@emotion/react'
import { Interpolation, serializeStyles } from '@emotion/serialize'
import { useInsertionEffectAlwaysWithSyncFallback } from '@emotion/use-insertion-effect-with-fallbacks'
import {
  EmotionCache,
  getRegisteredStyles,
  insertStyles,
  registerStyles,
  SerializedStyles
} from '@emotion/utils'
import * as React from 'react'
import { CreateStyled, ElementType, StyledOptions } from './types'
import { composeShouldForwardProps, getDefaultShouldForwardProp } from './utils'
export type {
  ArrayInterpolation,
  ComponentSelector,
  CSSObject,
  FunctionInterpolation,
  Interpolation
} from '@emotion/serialize'

const ILLEGAL_ESCAPE_SEQUENCE_ERROR = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`

const Insertion = ({
  cache,
  serialized,
  isStringTag
}: {
  cache: EmotionCache
  serialized: SerializedStyles
  isStringTag: boolean
}) => {
  registerStyles(cache, serialized, isStringTag)

  const rules = useInsertionEffectAlwaysWithSyncFallback(() =>
    insertStyles(cache, serialized, isStringTag)
  )

  if (!isBrowser && rules !== undefined) {
    let serializedNames = serialized.name
    let next = serialized.next
    while (next !== undefined) {
      serializedNames += ' ' + next.name
      next = next.next
    }
    return (
      <style
        {...{
          [`data-emotion`]: `${cache.key} ${serializedNames}`,
          dangerouslySetInnerHTML: { __html: rules },
          nonce: cache.sheet.nonce
        }}
      />
    )
  }
  return null
}

const createStyled = (tag: ElementType, options?: StyledOptions) => {
  if (isDevelopment) {
    if (tag === undefined) {
      throw new Error(
        'You are trying to create a styled element with an undefined component.\nYou may have forgotten to import it.'
      )
    }
  }
  const isReal = tag.__emotion_real === tag
  const baseTag = (isReal && tag.__emotion_base) || tag

  let identifierName: string | undefined
  let targetClassName: string | undefined
  if (options !== undefined) {
    identifierName = options.label
    targetClassName = options.target
  }

  const shouldForwardProp = composeShouldForwardProps(tag, options, isReal)
  const defaultShouldForwardProp =
    shouldForwardProp || getDefaultShouldForwardProp(baseTag)
  const shouldUseAs = !defaultShouldForwardProp('as')

  return function () {
    // eslint-disable-next-line prefer-rest-params
    let args = arguments as any as Array<
      TemplateStringsArray | Interpolation<Theme>
    >
    let styles =
      isReal && tag.__emotion_styles !== undefined
        ? tag.__emotion_styles.slice(0)
        : []

    if (identifierName !== undefined) {
      styles.push(`label:${identifierName};`)
    }
    if (
      args[0] == null ||
      (args[0] as TemplateStringsArray).raw === undefined
    ) {
      // eslint-disable-next-line prefer-spread
      styles.push.apply(styles, args)
    } else {
      const templateStringsArr = args[0] as TemplateStringsArray
      if (isDevelopment && templateStringsArr[0] === undefined) {
        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR)
      }
      styles.push(templateStringsArr[0])
      let len = args.length
      let i = 1
      for (; i < len; i++) {
        if (isDevelopment && templateStringsArr[i] === undefined) {
          console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR)
        }
        styles.push(args[i], templateStringsArr[i])
      }
    }

    const Styled: ElementType = withEmotionCache(
      (props: Record<string, unknown>, cache, ref) => {
        const FinalTag =
          (shouldUseAs && (props.as as React.ElementType)) || baseTag

        let className = ''
        let classInterpolations: Interpolation<Theme>[] = []
        let mergedProps = props
        if (props.theme == null) {
          mergedProps = {}
          for (let key in props) {
            mergedProps[key] = props[key]
          }
          mergedProps.theme = React.useContext(ThemeContext)
        }

        if (typeof props.className === 'string') {
          className = getRegisteredStyles(
            cache.registered,
            classInterpolations,
            props.className
          )
        } else if (props.className != null) {
          className = `${props.className} `
        }

        const serialized = serializeStyles(
          styles.concat(classInterpolations),
          cache.registered,
          mergedProps
        )
        className += `${cache.key}-${serialized.name}`
        if (targetClassName !== undefined) {
          className += ` ${targetClassName}`
        }

        const finalShouldForwardProp =
          shouldUseAs && shouldForwardProp === undefined
            ? getDefaultShouldForwardProp(FinalTag)
            : defaultShouldForwardProp

        let newProps: Record<string, unknown> = {}

        for (let key in props) {
          if (shouldUseAs && key === 'as') continue

          if (finalShouldForwardProp(key)) {
            newProps[key] = props[key]
          }
        }
        newProps.className = className
        if (ref) {
          newProps.ref = ref
        }

        return (
          <>
            <Insertion
              cache={cache}
              serialized={serialized}
              isStringTag={typeof FinalTag === 'string'}
            />
            <FinalTag {...newProps} />
          </>
        )
      }
    )

    Styled.displayName =
      identifierName !== undefined
        ? identifierName
        : `Styled(${
            typeof baseTag === 'string'
              ? baseTag
              : baseTag.displayName || baseTag.name || 'Component'
          })`

    Styled.defaultProps = tag.defaultProps
    Styled.__emotion_real = Styled
    Styled.__emotion_base = baseTag
    Styled.__emotion_styles = styles
    Styled.__emotion_forwardProp = shouldForwardProp

    Object.defineProperty(Styled, 'toString', {
      value() {
        if (targetClassName === undefined && isDevelopment) {
          return 'NO_COMPONENT_SELECTOR'
        }
        return `.${targetClassName}`
      }
    })
    ;(Styled as any).withComponent = (
      nextTag: ElementType,
      nextOptions: StyledOptions
    ) => {
      const newStyled = createStyled(nextTag, {
        ...options,
        ...nextOptions,
        shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
      })
      return (newStyled as any)(...styles)
    }

    return Styled
  }
}

export default createStyled as CreateStyled
import { Theme } from '@emotion/react'
import styled from './base'
import { ReactJSXIntrinsicElements } from './jsx-namespace'
import { tags } from './tags'
import {
  CreateStyledComponent,
  CreateStyled as BaseCreateStyled
} from './types'
export type {
  ArrayInterpolation,
  ComponentSelector,
  CSSObject,
  FunctionInterpolation,
  Interpolation
} from '@emotion/serialize'
export type {
  CreateStyledComponent,
  FilteringStyledOptions,
  StyledComponent,
  StyledOptions
} from './types'

export type StyledTags = {
  [Tag in keyof ReactJSXIntrinsicElements]: CreateStyledComponent<
    {
      theme?: Theme
      as?: React.ElementType
    },
    ReactJSXIntrinsicElements[Tag]
  >
}

export interface CreateStyled extends BaseCreateStyled, StyledTags {}

// bind it to avoid mutating the original function
const newStyled = styled.bind(null) as CreateStyled

tags.forEach(tagName => {
  ;(newStyled as any)[tagName] = newStyled(tagName as keyof typeof newStyled)
})

export default newStyled
// this is basically a slimmed down copy of https://github.com/emotion-js/emotion/blob/main/packages/react/types/jsx-namespace.d.ts
// it helps to avoid issues when combining newer `@emotion/styled` and older `@emotion/react` versions
// in such setup, ReactJSX namespace won't exist in `@emotion/react` and that would lead to errors
import 'react'

type IsPreReact19 = 2 extends Parameters<React.FunctionComponent<any>>['length']
  ? true
  : false

// prettier-ignore
/** @ts-ignore */
export type ReactJSXIntrinsicElements = true extends IsPreReact19 ? JSX.IntrinsicElements : React.JSX.IntrinsicElements
export const tags = [
  'a',
  'abbr',
  'address',
  'area',
  'article',
  'aside',
  'audio',
  'b',
  'base',
  'bdi',
  'bdo',
  'big',
  'blockquote',
  'body',
  'br',
  'button',
  'canvas',
  'caption',
  'cite',
  'code',
  'col',
  'colgroup',
  'data',
  'datalist',
  'dd',
  'del',
  'details',
  'dfn',
  'dialog',
  'div',
  'dl',
  'dt',
  'em',
  'embed',
  'fieldset',
  'figcaption',
  'figure',
  'footer',
  'form',
  'h1',
  'h2',
  'h3',
  'h4',
  'h5',
  'h6',
  'head',
  'header',
  'hgroup',
  'hr',
  'html',
  'i',
  'iframe',
  'img',
  'input',
  'ins',
  'kbd',
  'keygen',
  'label',
  'legend',
  'li',
  'link',
  'main',
  'map',
  'mark',
  'marquee',
  'menu',
  'menuitem',
  'meta',
  'meter',
  'nav',
  'noscript',
  'object',
  'ol',
  'optgroup',
  'option',
  'output',
  'p',
  'param',
  'picture',
  'pre',
  'progress',
  'q',
  'rp',
  'rt',
  'ruby',
  's',
  'samp',
  'script',
  'section',
  'select',
  'small',
  'source',
  'span',
  'strong',
  'style',
  'sub',
  'summary',
  'sup',
  'table',
  'tbody',
  'td',
  'textarea',
  'tfoot',
  'th',
  'thead',
  'time',
  'title',
  'tr',
  'track',
  'u',
  'ul',
  'var',
  'video',
  'wbr',

  // SVG
  'circle',
  'clipPath',
  'defs',
  'ellipse',
  'foreignObject',
  'g',
  'image',
  'line',
  'linearGradient',
  'mask',
  'path',
  'pattern',
  'polygon',
  'polyline',
  'radialGradient',
  'rect',
  'stop',
  'svg',
  'text',
  'tspan'
] as const
import { ComponentSelector, Interpolation } from '@emotion/serialize'
import { ReactJSXIntrinsicElements } from './jsx-namespace'
import { PropsOf, Theme } from '@emotion/react'

/** Same as StyledOptions but shouldForwardProp must be a type guard */
export interface FilteringStyledOptions<
  Props = Record<string, any>,
  ForwardedProps extends keyof Props & string = keyof Props & string
> {
  label?: string
  shouldForwardProp?: (propName: string) => propName is ForwardedProps
  target?: string
}

export interface StyledOptions<Props = Record<string, any>> {
  label?: string
  shouldForwardProp?: (propName: string) => boolean
  target?: string
}

/**
 * @typeparam ComponentProps  Props which will be included when withComponent is called
 * @typeparam SpecificComponentProps  Props which will *not* be included when withComponent is called
 */
export interface StyledComponent<
  ComponentProps extends {},
  SpecificComponentProps extends {} = {},
  JSXProps extends {} = {}
> extends React.FC<ComponentProps & SpecificComponentProps & JSXProps>,
    ComponentSelector {
  withComponent<C extends React.ComponentClass<React.ComponentProps<C>>>(
    component: C
  ): StyledComponent<
    ComponentProps & PropsOf<C>,
    {},
    { ref?: React.Ref<InstanceType<C>> }
  >
  withComponent<C extends React.ComponentType<React.ComponentProps<C>>>(
    component: C
  ): StyledComponent<ComponentProps & PropsOf<C>>
  withComponent<Tag extends keyof ReactJSXIntrinsicElements>(
    tag: Tag
  ): StyledComponent<ComponentProps, ReactJSXIntrinsicElements[Tag]>
}

/**
 * @typeparam ComponentProps  Props which will be included when withComponent is called
 * @typeparam SpecificComponentProps  Props which will *not* be included when withComponent is called
 */
export interface CreateStyledComponent<
  ComponentProps extends {},
  SpecificComponentProps extends {} = {},
  JSXProps extends {} = {}
> {
  (
    template: TemplateStringsArray,
    ...styles: Array<
      Interpolation<ComponentProps & SpecificComponentProps & { theme: Theme }>
    >
  ): StyledComponent<ComponentProps, SpecificComponentProps, JSXProps>

  /**
   * @typeparam AdditionalProps  Additional props to add to your styled component
   */
  <AdditionalProps extends {}>(
    template: TemplateStringsArray,
    ...styles: Array<
      Interpolation<
        ComponentProps &
          SpecificComponentProps &
          AdditionalProps & { theme: Theme }
      >
    >
  ): StyledComponent<
    ComponentProps & AdditionalProps,
    SpecificComponentProps,
    JSXProps
  >

  /**
   * @typeparam AdditionalProps  Additional props to add to your styled component
   */
  <AdditionalProps extends {} = {}>(
    ...styles: Array<
      Interpolation<
        ComponentProps &
          SpecificComponentProps &
          AdditionalProps & { theme: Theme }
      >
    >
  ): StyledComponent<
    ComponentProps & AdditionalProps,
    SpecificComponentProps,
    JSXProps
  >
}

/**
 * @desc
 * This function accepts a React component or tag ('div', 'a' etc).
 *
 * @example styled(MyComponent)({ width: 100 })
 * @example styled(MyComponent)(myComponentProps => ({ width: myComponentProps.width })
 * @example styled('div')({ width: 100 })
 * @example styled('div')<Props>(props => ({ width: props.width })
 */
export interface CreateStyled {
  <
    C extends React.ComponentClass<React.ComponentProps<C>>,
    ForwardedProps extends keyof React.ComponentProps<C> &
      string = keyof React.ComponentProps<C> & string
  >(
    component: C,
    options: FilteringStyledOptions<React.ComponentProps<C>, ForwardedProps>
  ): CreateStyledComponent<
    Pick<PropsOf<C>, ForwardedProps> & {
      theme?: Theme
    },
    {},
    {
      ref?: React.Ref<InstanceType<C>>
    }
  >

  <C extends React.ComponentClass<React.ComponentProps<C>>>(
    component: C,
    options?: StyledOptions<React.ComponentProps<C>>
  ): CreateStyledComponent<
    PropsOf<C> & {
      theme?: Theme
    },
    {},
    {
      ref?: React.Ref<InstanceType<C>>
    }
  >

  <
    C extends React.ComponentType<React.ComponentProps<C>>,
    ForwardedProps extends keyof React.ComponentProps<C> &
      string = keyof React.ComponentProps<C> & string
  >(
    component: C,
    options: FilteringStyledOptions<React.ComponentProps<C>, ForwardedProps>
  ): CreateStyledComponent<
    Pick<PropsOf<C>, ForwardedProps> & {
      theme?: Theme
    }
  >

  <C extends React.ComponentType<React.ComponentProps<C>>>(
    component: C,
    options?: StyledOptions<React.ComponentProps<C>>
  ): CreateStyledComponent<
    PropsOf<C> & {
      theme?: Theme
    }
  >

  <
    Tag extends keyof ReactJSXIntrinsicElements,
    ForwardedProps extends keyof ReactJSXIntrinsicElements[Tag] &
      string = keyof ReactJSXIntrinsicElements[Tag] & string
  >(
    tag: Tag,
    options: FilteringStyledOptions<
      ReactJSXIntrinsicElements[Tag],
      ForwardedProps
    >
  ): CreateStyledComponent<
    { theme?: Theme; as?: React.ElementType },
    Pick<ReactJSXIntrinsicElements[Tag], ForwardedProps>
  >

  <Tag extends keyof ReactJSXIntrinsicElements>(
    tag: Tag,
    options?: StyledOptions<ReactJSXIntrinsicElements[Tag]>
  ): CreateStyledComponent<
    { theme?: Theme; as?: React.ElementType },
    ReactJSXIntrinsicElements[Tag]
  >
}

export type ElementType = React.ElementType & {
  defaultProps?: Partial<any>
  __emotion_real?: ElementType
  __emotion_base?: ElementType
  __emotion_styles?: Interpolation<Theme>[]
  __emotion_forwardProp?: (propName: string) => boolean
}
import * as React from 'react'
import isPropValid from '@emotion/is-prop-valid'
import { StyledOptions, ElementType } from './types'

const testOmitPropsOnStringTag = isPropValid
const testOmitPropsOnComponent = (key: string) => key !== 'theme'

export const getDefaultShouldForwardProp = (tag: React.ElementType) =>
  typeof tag === 'string' &&
  // 96 is one less than the char code
  // for "a" so this is checking that
  // it's a lowercase character
  tag.charCodeAt(0) > 96
    ? testOmitPropsOnStringTag
    : testOmitPropsOnComponent

export const composeShouldForwardProps = (
  tag: ElementType,
  options: StyledOptions | undefined,
  isReal: boolean
) => {
  let shouldForwardProp
  if (options) {
    const optionsShouldForwardProp = options.shouldForwardProp
    shouldForwardProp =
      tag.__emotion_forwardProp && optionsShouldForwardProp
        ? (propName: string) =>
            tag.__emotion_forwardProp!(propName) &&
            optionsShouldForwardProp(propName)
        : optionsShouldForwardProp
  }

  if (typeof shouldForwardProp !== 'function' && isReal) {
    shouldForwardProp = tag.__emotion_forwardProp
  }

  return shouldForwardProp
}
export default false
export default typeof document !== 'undefined'
export default true
export * from "./declarations/src/index";
export { default } from "./declarations/src/index";
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1vdGlvbi11bml0bGVzcy5janMuZC50cyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4vZGVjbGFyYXRpb25zL3NyYy9pbmRleC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIn0=
export { default as _default } from "./declarations/src/index.js"
declare let unitlessKeys: Record<string, 1>;
export default unitlessKeys;
let unitlessKeys: Record<string, 1> = {
  animationIterationCount: 1,
  aspectRatio: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  scale: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,

  // SVG-related properties
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
}

export default unitlessKeys
export * from "./declarations/src/index";
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1vdGlvbi11c2UtaW5zZXJ0aW9uLWVmZmVjdC13aXRoLWZhbGxiYWNrcy5janMuZC50cyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4vZGVjbGFyYXRpb25zL3NyYy9pbmRleC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIn0=
import * as React from 'react';
export declare const useInsertionEffectAlwaysWithSyncFallback: <T>(create: () => T) => T | undefined;
export declare const useInsertionEffectWithLayoutFallback: typeof React.useLayoutEffect;
import * as React from 'react'
import isBrowser from '#is-browser'

const syncFallback = <T>(create: () => T) => create()

const useInsertionEffect = React[
  ('useInsertion' + 'Effect') as 'useInsertionEffect'
]
  ? (React[('useInsertion' + 'Effect') as 'useInsertionEffect'] as <T>(
      create: () => T
    ) => T | undefined)
  : false

export const useInsertionEffectAlwaysWithSyncFallback: <T>(
  create: () => T
) => T | undefined = !isBrowser
  ? syncFallback
  : useInsertionEffect || syncFallback

export const useInsertionEffectWithLayoutFallback: typeof React.useLayoutEffect =
  useInsertionEffect || React.useLayoutEffect
export default false
export default typeof document !== 'undefined'
export default true
export * from "./declarations/src/index";
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1vdGlvbi11dGlscy5janMuZC50cyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4vZGVjbGFyYXRpb25zL3NyYy9pbmRleC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIn0=
import { RegisteredCache, EmotionCache, SerializedStyles } from "./types.js";
export declare function getRegisteredStyles(registered: RegisteredCache, registeredStyles: string[], classNames: string): string;
export declare const registerStyles: (cache: EmotionCache, serialized: SerializedStyles, isStringTag: boolean) => void;
export declare const insertStyles: (cache: EmotionCache, serialized: SerializedStyles, isStringTag: boolean) => string | undefined;
export * from "./types.js";
import type { StyleSheet } from '@emotion/sheet';
export type { StyleSheet };
export type RegisteredCache = Record<string, string | undefined>;
export type SerializedStyles = {
    name: string;
    styles: string;
    next?: SerializedStyles;
};
export type EmotionCache = {
    inserted: Record<string, string | true | undefined>;
    registered: RegisteredCache;
    sheet: StyleSheet;
    key: string;
    compat?: true;
    nonce?: string;
    insert: (selector: string, serialized: SerializedStyles, sheet: StyleSheet, shouldCache: boolean) => string | void;
};
import isBrowser from '#is-browser'
import { RegisteredCache, EmotionCache, SerializedStyles } from './types'

export function getRegisteredStyles(
  registered: RegisteredCache,
  registeredStyles: string[],
  classNames: string
): string {
  let rawClassName = ''

  classNames.split(' ').forEach(className => {
    if (registered[className] !== undefined) {
      registeredStyles.push(`${registered[className]};`)
    } else if (className) {
      rawClassName += `${className} `
    }
  })
  return rawClassName
}

export const registerStyles = (
  cache: EmotionCache,
  serialized: SerializedStyles,
  isStringTag: boolean
): void => {
  let className = `${cache.key}-${serialized.name}`
  if (
    // we only need to add the styles to the registered cache if the
    // class name could be used further down
    // the tree but if it's a string tag, we know it won't
    // so we don't have to add it to registered cache.
    // this improves memory usage since we can avoid storing the whole style string
    (isStringTag === false ||
      // we need to always store it if we're in compat mode and
      // in node since emotion-server relies on whether a style is in
      // the registered cache to know whether a style is global or not
      // also, note that this check will be dead code eliminated in the browser
      (isBrowser === false && cache.compat !== undefined)) &&
    cache.registered[className] === undefined
  ) {
    cache.registered[className] = serialized.styles
  }
}

export const insertStyles = (
  cache: EmotionCache,
  serialized: SerializedStyles,
  isStringTag: boolean
) => {
  registerStyles(cache, serialized, isStringTag)

  let className = `${cache.key}-${serialized.name}`

  if (cache.inserted[serialized.name] === undefined) {
    let stylesForSSR = ''
    let current: SerializedStyles | undefined = serialized
    do {
      let maybeStyles = cache.insert(
        serialized === current ? `.${className}` : '',
        current,
        cache.sheet,
        true
      )
      if (!isBrowser && maybeStyles !== undefined) {
        stylesForSSR += maybeStyles
      }
      current = current.next
    } while (current !== undefined)
    if (!isBrowser && stylesForSSR.length !== 0) {
      return stylesForSSR
    }
  }
}

export * from './types'
import type { StyleSheet } from '@emotion/sheet'

export type { StyleSheet }

export type RegisteredCache = Record<string, string | undefined>

export type SerializedStyles = {
  name: string
  styles: string
  next?: SerializedStyles
}

export type EmotionCache = {
  inserted: Record<string, string | true | undefined>
  registered: RegisteredCache
  sheet: StyleSheet
  key: string
  compat?: true
  nonce?: string
  insert: (
    selector: string,
    serialized: SerializedStyles,
    sheet: StyleSheet,
    shouldCache: boolean
  ) => string | void
}
export default false as boolean
export default typeof document !== 'undefined'
export default true as boolean
export * from "./declarations/src/index";
export { default } from "./declarations/src/index";
//# sourceMappingURL=emotion-weak-memoize.cjs.d.ts.map
export { default as _default } from "./declarations/src/index.js"
declare let weakMemoize: <Arg extends object, Return>(func: (arg: Arg) => Return) => (arg: Arg) => Return;
export default weakMemoize;
let weakMemoize = function <Arg extends object, Return>(
  func: (arg: Arg) => Return
): (arg: Arg) => Return {
  let cache = new WeakMap<Arg, Return>()
  return (arg: Arg) => {
    if (cache.has(arg)) {
      // Use non-null assertion because we just checked that the cache `has` it
      // This allows us to remove `undefined` from the return value
      return cache.get(arg)!
    }
    let ret = func(arg)
    cache.set(arg, ret)
    return ret
  }
}

export default weakMemoize
/**
 * @fileoverview Types for the config-array package.
 * @author Nicholas C. Zakas
 */

export interface ConfigObject {
	/**
	 * The files to include.
	 */
	files?: string[];

	/**
	 * The files to exclude.
	 */
	ignores?: string[];

	/**
	 * The name of the config object.
	 */
	name?: string;

	// may also have any number of other properties
	[key: string]: unknown;
}
export { ObjectSchema } from "@eslint/object-schema";
export type PropertyDefinition = import("@eslint/object-schema").PropertyDefinition;
export type ObjectDefinition = import("@eslint/object-schema").ObjectDefinition;
export type ConfigObject = import("./types.ts").ConfigObject;
export type IMinimatchStatic = import("minimatch").IMinimatchStatic;
export type IMinimatch = import("minimatch").IMinimatch;
export type ObjectSchemaInstance = import("@eslint/object-schema").ObjectSchema;
/**
 * Represents an array of config objects and provides method for working with
 * those config objects.
 */
export class ConfigArray extends Array<any> {
    /**
     * Creates a new instance of ConfigArray.
     * @param {Iterable|Function|Object} configs An iterable yielding config
     *      objects, or a config function, or a config object.
     * @param {Object} options The options for the ConfigArray.
     * @param {string} [options.basePath=""] The path of the config file
     * @param {boolean} [options.normalized=false] Flag indicating if the
     *      configs have already been normalized.
     * @param {Object} [options.schema] The additional schema
     *      definitions to use for the ConfigArray schema.
     * @param {Array<string>} [options.extraConfigTypes] List of config types supported.
     */
    constructor(configs: Iterable<any> | Function | any, { basePath, normalized, schema: customSchema, extraConfigTypes, }?: {
        basePath?: string;
        normalized?: boolean;
        schema?: any;
        extraConfigTypes?: Array<string>;
    });
    /**
     * The path of the config file that this array was loaded from.
     * This is used to calculate filename matches.
     * @property basePath
     * @type {string}
     */
    basePath: string;
    /**
     * The supported config types.
     * @type {Array<string>}
     */
    extraConfigTypes: Array<string>;
    /**
     * Returns the `files` globs from every config object in the array.
     * This can be used to determine which files will be matched by a
     * config array or to use as a glob pattern when no patterns are provided
     * for a command line interface.
     * @returns {Array<string|Function>} An array of matchers.
     */
    get files(): (string | Function)[];
    /**
     * Returns ignore matchers that should always be ignored regardless of
     * the matching `files` fields in any configs. This is necessary to mimic
     * the behavior of things like .gitignore and .eslintignore, allowing a
     * globbing operation to be faster.
     * @returns {string[]} An array of string patterns and functions to be ignored.
     */
    get ignores(): string[];
    /**
     * Indicates if the config array has been normalized.
     * @returns {boolean} True if the config array is normalized, false if not.
     */
    isNormalized(): boolean;
    /**
     * Normalizes a config array by flattening embedded arrays and executing
     * config functions.
     * @param {Object} [context] The context object for config functions.
     * @returns {Promise<ConfigArray>} The current ConfigArray instance.
     */
    normalize(context?: any): Promise<ConfigArray>;
    /**
     * Normalizes a config array by flattening embedded arrays and executing
     * config functions.
     * @param {Object} [context] The context object for config functions.
     * @returns {ConfigArray} The current ConfigArray instance.
     */
    normalizeSync(context?: any): ConfigArray;
    /**
     * Returns the config object for a given file path and a status that can be used to determine why a file has no config.
     * @param {string} filePath The complete path of a file to get a config for.
     * @returns {{ config?: Object, status: "ignored"|"external"|"unconfigured"|"matched" }}
     * An object with an optional property `config` and property `status`.
     * `config` is the config object for the specified file as returned by {@linkcode ConfigArray.getConfig},
     * `status` a is one of the constants returned by {@linkcode ConfigArray.getConfigStatus}.
     */
    getConfigWithStatus(filePath: string): {
        config?: any;
        status: "ignored" | "external" | "unconfigured" | "matched";
    };
    /**
     * Returns the config object for a given file path.
     * @param {string} filePath The complete path of a file to get a config for.
     * @returns {Object|undefined} The config object for this file or `undefined`.
     */
    getConfig(filePath: string): any | undefined;
    /**
     * Determines whether a file has a config or why it doesn't.
     * @param {string} filePath The complete path of the file to check.
     * @returns {"ignored"|"external"|"unconfigured"|"matched"} One of the following values:
     * * `"ignored"`: the file is ignored
     * * `"external"`: the file is outside the base path
     * * `"unconfigured"`: the file is not matched by any config
     * * `"matched"`: the file has a matching config
     */
    getConfigStatus(filePath: string): "ignored" | "external" | "unconfigured" | "matched";
    /**
     * Determines if the given filepath is ignored based on the configs.
     * @param {string} filePath The complete path of a file to check.
     * @returns {boolean} True if the path is ignored, false if not.
     * @deprecated Use `isFileIgnored` instead.
     */
    isIgnored(filePath: string): boolean;
    /**
     * Determines if the given filepath is ignored based on the configs.
     * @param {string} filePath The complete path of a file to check.
     * @returns {boolean} True if the path is ignored, false if not.
     */
    isFileIgnored(filePath: string): boolean;
    /**
     * Determines if the given directory is ignored based on the configs.
     * This checks only default `ignores` that don't have `files` in the
     * same config. A pattern such as `/foo` be considered to ignore the directory
     * while a pattern such as `/foo/**` is not considered to ignore the
     * directory because it is matching files.
     * @param {string} directoryPath The complete path of a directory to check.
     * @returns {boolean} True if the directory is ignored, false if not. Will
     * 		return true for any directory that is not inside of `basePath`.
     * @throws {Error} When the `ConfigArray` is not normalized.
     */
    isDirectoryIgnored(directoryPath: string): boolean;
}
export namespace ConfigArraySymbol {
    let isNormalized: symbol;
    let configCache: symbol;
    let schema: symbol;
    let finalizeConfig: symbol;
    let preprocessConfig: symbol;
}
/**
 * @fileoverview Types for the config-array package.
 * @author Nicholas C. Zakas
 */
export interface ConfigObject {
    /**
     * The files to include.
     */
    files?: string[];
    /**
     * The files to exclude.
     */
    ignores?: string[];
    /**
     * The name of the config object.
     */
    name?: string;
    [key: string]: unknown;
}
/**
 * @fileoverview Types for the config-array package.
 * @author Nicholas C. Zakas
 */

export interface ConfigObject {
	/**
	 * The files to include.
	 */
	files?: string[];

	/**
	 * The files to exclude.
	 */
	ignores?: string[];

	/**
	 * The name of the config object.
	 */
	name?: string;

	// may also have any number of other properties
	[key: string]: unknown;
}
/**
 * @fileoverview Shared types for ESLint Core.
 */
/**
 * Represents an error inside of a file.
 */
export interface FileError {
    message: string;
    line: number;
    column: number;
    endLine?: number;
    endColumn?: number;
}
/**
 * Represents a problem found in a file.
 */
export interface FileProblem {
    ruleId: string | null;
    message: string;
    loc: SourceLocation;
}
/**
 * Represents an AST node or token with location information in ESLint format.
 */
export interface SyntaxElement {
    loc: SourceLocation;
    range: SourceRange;
}
/**
 * Represents the start and end coordinates of a node inside the source.
 */
export interface SourceLocation {
    start: Position;
    end: Position;
}
/**
 * Represents the start and end coordinates of a node inside the source with an offset.
 */
export interface SourceLocationWithOffset {
    start: PositionWithOffset;
    end: PositionWithOffset;
}
/**
 * Represents a location coordinate inside the source. ESLint-style formats
 * have just `line` and `column` while others may have `offset` as well.
 */
export interface Position {
    line: number;
    column: number;
}
/**
 * Represents a location coordinate inside the source with an offset.
 */
export interface PositionWithOffset extends Position {
    offset: number;
}
/**
 * Represents a range of characters in the source.
 */
export type SourceRange = [number, number];
/**
 * The human readable severity level used in a configuration.
 */
export type SeverityName = "off" | "warn" | "error";
/**
 * The numeric severity level for a rule.
 *
 * - `0` means off.
 * - `1` means warn.
 * - `2` means error.
 *
 */
export type SeverityLevel = 0 | 1 | 2;
/**
 * The severity of a rule in a configuration.
 */
export type Severity = SeverityName | SeverityLevel;
/**
 * Represents the configuration options for the core linter.
 */
export interface LinterOptionsConfig {
    /**
     * Indicates whether or not inline configuration is evaluated.
     */
    noInlineConfig?: boolean;
    /**
     * Indicates what to do when an unused disable directive is found.
     */
    reportUnusedDisableDirectives?: boolean | Severity;
}
/**
 * Shared settings that are accessible from within plugins.
 */
export type SettingsConfig = Record<string, unknown>;
/**
 * The configuration for a rule.
 */
export type RuleConfig = Severity | [Severity, ...unknown[]];
/**
 * A collection of rules and their configurations.
 */
export type RulesConfig = Record<string, RuleConfig>;
/**
 * Represents a plugin language.
 */
export interface Language {
    /**
     * Indicates how ESLint should read the file.
     */
    fileType: "text";
    /**
     * First line number returned from the parser (text mode only).
     */
    lineStart: 0 | 1;
    /**
     * First column number returned from the parser (text mode only).
     */
    columnStart: 0 | 1;
    /**
     * The property to read the node type from. Used in selector querying.
     */
    nodeTypeKey: string;
    /**
     * The traversal path that tools should take when evaluating the AST
     */
    visitorKeys?: Record<string, string[]>;
    /**
     * Validates languageOptions for this language.
     */
    validateLanguageOptions(languageOptions: LanguageOptions): void;
    /**
     * Helper for esquery that allows languages to match nodes against
     * class. esquery currently has classes like `function` that will
     * match all the various function nodes. This method allows languages
     * to implement similar shorthands.
     */
    matchesSelectorClass?(className: string, node: object, ancestry: object[]): boolean;
    /**
     * Parses the given file input into its component parts. This file should not
     * throws errors for parsing errors but rather should return any parsing
     * errors as parse of the ParseResult object.
     */
    parse(file: File, context: LanguageContext): ParseResult;
    /**
     * Creates SourceCode object that ESLint uses to work with a file.
     */
    createSourceCode(file: File, input: OkParseResult, context: LanguageContext): SourceCode;
}
/**
 * Plugin-defined options for the language.
 */
export type LanguageOptions = Record<string, unknown>;
/**
 * The context object that is passed to the language plugin methods.
 */
export interface LanguageContext {
    languageOptions: LanguageOptions;
}
/**
 * Represents a file read by ESLint.
 */
export interface File {
    /**
     * The path that ESLint uses for this file. May be a virtual path
     * if it was returned by a processor.
     */
    path: string;
    /**
     * The path to the file on disk. This always maps directly to a file
     * regardless of whether it was returned from a processor.
     */
    physicalPath: string;
    /**
     * Indicates if the original source contained a byte-order marker.
     * ESLint strips the BOM from the `body`, but this info is needed
     * to correctly apply autofixing.
     */
    bom: boolean;
    /**
     * The body of the file to parse.
     */
    body: string | Uint8Array;
}
/**
 * Represents the successful result of parsing a file.
 */
export interface OkParseResult<T extends object = object> {
    /**
     * Indicates if the parse was successful. If true, the parse was successful
     * and ESLint should continue on to create a SourceCode object and run rules;
     * if false, ESLint should just report the error(s) without doing anything
     * else.
     */
    ok: true;
    /**
     * The abstract syntax tree created by the parser. (only when ok: true)
     */
    ast: T;
    /**
     * Any additional data that the parser wants to provide.
     */
    [key: string]: any;
}
/**
 * Represents the unsuccessful result of parsing a file.
 */
export interface NotOkParseResult {
    /**
     * Indicates if the parse was successful. If true, the parse was successful
     * and ESLint should continue on to create a SourceCode object and run rules;
     * if false, ESLint should just report the error(s) without doing anything
     * else.
     */
    ok: false;
    /**
     * Any parsing errors, whether fatal or not. (only when ok: false)
     */
    errors: FileError[];
    /**
     * Any additional data that the parser wants to provide.
     */
    [key: string]: any;
}
export type ParseResult<T extends object = object> = OkParseResult<T> | NotOkParseResult;
/**
 * Represents inline configuration found in the source code.
 */
interface InlineConfigElement {
    /**
     * The location of the inline config element.
     */
    loc: SourceLocation;
    /**
     * The interpreted configuration from the inline config element.
     */
    config: {
        rules: RulesConfig;
    };
}
/**
 * Represents the basic interface for a source code object.
 */
interface SourceCodeBase {
    /**
     * Root of the AST.
     */
    ast: object;
    /**
     * The traversal path that tools should take when evaluating the AST.
     * When present, this overrides the `visitorKeys` on the language for
     * just this source code object.
     */
    visitorKeys?: Record<string, string[]>;
    /**
     * Retrieves the equivalent of `loc` for a given node or token.
     */
    getLoc(nodeOrToken: object): SourceLocation;
    /**
     * Retrieves the equivalent of `range` for a given node or token.
     */
    getRange(nodeOrToken: object): SourceRange;
    /**
     * Traversal of AST.
     */
    traverse(): Iterable<TraversalStep>;
    /**
     * Applies language options passed in from the ESLint core.
     */
    applyLanguageOptions?(languageOptions: LanguageOptions): void;
    /**
     * Return all of the inline areas where ESLint should be disabled/enabled
     * along with any problems found in evaluating the directives.
     */
    getDisableDirectives?(): {
        directives: Directive[];
        problems: FileProblem[];
    };
    /**
     * Returns an array of all inline configuration nodes found in the
     * source code.
     */
    getInlineConfigNodes?(): object[];
    /**
     * Applies configuration found inside of the source code. This method is only
     * called when ESLint is running with inline configuration allowed.
     */
    applyInlineConfig?(): {
        configs: InlineConfigElement[];
        problems: FileProblem[];
    };
    /**
     * Called by ESLint core to indicate that it has finished providing
     * information. We now add in all the missing variables and ensure that
     * state-changing methods cannot be called by rules.
     * @returns {void}
     */
    finalize?(): void;
}
/**
 * Represents the source of a text file being linted.
 */
export interface TextSourceCode extends SourceCodeBase {
    /**
     * The body of the file that you'd like rule developers to access.
     */
    text: string;
}
/**
 * Represents the source of a binary file being linted.
 */
export interface BinarySourceCode extends SourceCodeBase {
    /**
     * The body of the file that you'd like rule developers to access.
     */
    body: Uint8Array;
}
export type SourceCode = TextSourceCode | BinarySourceCode;
/**
 * Represents a traversal step visiting the AST.
 */
export interface VisitTraversalStep {
    kind: 1;
    target: unknown;
    phase: 1 | 2;
    args: unknown[];
}
/**
 * Represents a traversal step calling a function.
 */
export interface CallTraversalStep {
    kind: 2;
    target: string;
    phase?: string;
    args: unknown[];
}
export type TraversalStep = VisitTraversalStep | CallTraversalStep;
/**
 * The type of disable directive. This determines how ESLint will disable rules.
 */
export type DirectiveType = "disable" | "enable" | "disable-line" | "disable-next-line";
/**
 * Represents a disable directive.
 */
export interface Directive {
    /**
     * The type of directive.
     */
    type: DirectiveType;
    /**
     * The node of the directive. May be in the AST or a comment/token.
     */
    node: unknown;
    /**
     * The value of the directive.
     */
    value: string;
    /**
     * The justification for the directive.
     */
    justification?: string;
}
export {};
// This file is autogenerated by scripts/generate-types.mjs
// Do NOT modify this file manually

type GlobalsBuiltin = {
	readonly 'AggregateError': false;
	readonly 'Array': false;
	readonly 'ArrayBuffer': false;
	readonly 'Atomics': false;
	readonly 'BigInt': false;
	readonly 'BigInt64Array': false;
	readonly 'BigUint64Array': false;
	readonly 'Boolean': false;
	readonly 'constructor': false;
	readonly 'DataView': false;
	readonly 'Date': false;
	readonly 'decodeURI': false;
	readonly 'decodeURIComponent': false;
	readonly 'encodeURI': false;
	readonly 'encodeURIComponent': false;
	readonly 'Error': false;
	readonly 'escape': false;
	readonly 'eval': false;
	readonly 'EvalError': false;
	readonly 'FinalizationRegistry': false;
	readonly 'Float32Array': false;
	readonly 'Float64Array': false;
	readonly 'Function': false;
	readonly 'globalThis': false;
	readonly 'hasOwnProperty': false;
	readonly 'Infinity': false;
	readonly 'Int16Array': false;
	readonly 'Int32Array': false;
	readonly 'Int8Array': false;
	readonly 'isFinite': false;
	readonly 'isNaN': false;
	readonly 'isPrototypeOf': false;
	readonly 'JSON': false;
	readonly 'Map': false;
	readonly 'Math': false;
	readonly 'NaN': false;
	readonly 'Number': false;
	readonly 'Object': false;
	readonly 'parseFloat': false;
	readonly 'parseInt': false;
	readonly 'Promise': false;
	readonly 'propertyIsEnumerable': false;
	readonly 'Proxy': false;
	readonly 'RangeError': false;
	readonly 'ReferenceError': false;
	readonly 'Reflect': false;
	readonly 'RegExp': false;
	readonly 'Set': false;
	readonly 'SharedArrayBuffer': false;
	readonly 'String': false;
	readonly 'Symbol': false;
	readonly 'SyntaxError': false;
	readonly 'toLocaleString': false;
	readonly 'toString': false;
	readonly 'TypeError': false;
	readonly 'Uint16Array': false;
	readonly 'Uint32Array': false;
	readonly 'Uint8Array': false;
	readonly 'Uint8ClampedArray': false;
	readonly 'undefined': false;
	readonly 'unescape': false;
	readonly 'URIError': false;
	readonly 'valueOf': false;
	readonly 'WeakMap': false;
	readonly 'WeakRef': false;
	readonly 'WeakSet': false;
}

type GlobalsEs5 = {
	readonly 'Array': false;
	readonly 'Boolean': false;
	readonly 'constructor': false;
	readonly 'Date': false;
	readonly 'decodeURI': false;
	readonly 'decodeURIComponent': false;
	readonly 'encodeURI': false;
	readonly 'encodeURIComponent': false;
	readonly 'Error': false;
	readonly 'escape': false;
	readonly 'eval': false;
	readonly 'EvalError': false;
	readonly 'Function': false;
	readonly 'hasOwnProperty': false;
	readonly 'Infinity': false;
	readonly 'isFinite': false;
	readonly 'isNaN': false;
	readonly 'isPrototypeOf': false;
	readonly 'JSON': false;
	readonly 'Math': false;
	readonly 'NaN': false;
	readonly 'Number': false;
	readonly 'Object': false;
	readonly 'parseFloat': false;
	readonly 'parseInt': false;
	readonly 'propertyIsEnumerable': false;
	readonly 'RangeError': false;
	readonly 'ReferenceError': false;
	readonly 'RegExp': false;
	readonly 'String': false;
	readonly 'SyntaxError': false;
	readonly 'toLocaleString': false;
	readonly 'toString': false;
	readonly 'TypeError': false;
	readonly 'undefined': false;
	readonly 'unescape': false;
	readonly 'URIError': false;
	readonly 'valueOf': false;
}

type GlobalsEs2015 = {
	readonly 'Array': false;
	readonly 'ArrayBuffer': false;
	readonly 'Boolean': false;
	readonly 'constructor': false;
	readonly 'DataView': false;
	readonly 'Date': false;
	readonly 'decodeURI': false;
	readonly 'decodeURIComponent': false;
	readonly 'encodeURI': false;
	readonly 'encodeURIComponent': false;
	readonly 'Error': false;
	readonly 'escape': false;
	readonly 'eval': false;
	readonly 'EvalError': false;
	readonly 'Float32Array': false;
	readonly 'Float64Array': false;
	readonly 'Function': false;
	readonly 'hasOwnProperty': false;
	readonly 'Infinity': false;
	readonly 'Int16Array': false;
	readonly 'Int32Array': false;
	readonly 'Int8Array': false;
	readonly 'isFinite': false;
	readonly 'isNaN': false;
	readonly 'isPrototypeOf': false;
	readonly 'JSON': false;
	readonly 'Map': false;
	readonly 'Math': false;
	readonly 'NaN': false;
	readonly 'Number': false;
	readonly 'Object': false;
	readonly 'parseFloat': false;
	readonly 'parseInt': false;
	readonly 'Promise': false;
	readonly 'propertyIsEnumerable': false;
	readonly 'Proxy': false;
	readonly 'RangeError': false;
	readonly 'ReferenceError': false;
	readonly 'Reflect': false;
	readonly 'RegExp': false;
	readonly 'Set': false;
	readonly 'String': false;
	readonly 'Symbol': false;
	readonly 'SyntaxError': false;
	readonly 'toLocaleString': false;
	readonly 'toString': false;
	readonly 'TypeError': false;
	readonly 'Uint16Array': false;
	readonly 'Uint32Array': false;
	readonly 'Uint8Array': false;
	readonly 'Uint8ClampedArray': false;
	readonly 'undefined': false;
	readonly 'unescape': false;
	readonly 'URIError': false;
	readonly 'valueOf': false;
	readonly 'WeakMap': false;
	readonly 'WeakSet': false;
}

type GlobalsEs2017 = {
	readonly 'Array': false;
	readonly 'ArrayBuffer': false;
	readonly 'Atomics': false;
	readonly 'Boolean': false;
	readonly 'constructor': false;
	readonly 'DataView': false;
	readonly 'Date': false;
	readonly 'decodeURI': false;
	readonly 'decodeURIComponent': false;
	readonly 'encodeURI': false;
	readonly 'encodeURIComponent': false;
	readonly 'Error': false;
	readonly 'escape': false;
	readonly 'eval': false;
	readonly 'EvalError': false;
	readonly 'Float32Array': false;
	readonly 'Float64Array': false;
	readonly 'Function': false;
	readonly 'hasOwnProperty': false;
	readonly 'Infinity': false;
	readonly 'Int16Array': false;
	readonly 'Int32Array': false;
	readonly 'Int8Array': false;
	readonly 'isFinite': false;
	readonly 'isNaN': false;
	readonly 'isPrototypeOf': false;
	readonly 'JSON': false;
	readonly 'Map': false;
	readonly 'Math': false;
	readonly 'NaN': false;
	readonly 'Number': false;
	readonly 'Object': false;
	readonly 'parseFloat': false;
	readonly 'parseInt': false;
	readonly 'Promise': false;
	readonly 'propertyIsEnumerable': false;
	readonly 'Proxy': false;
	readonly 'RangeError': false;
	readonly 'ReferenceError': false;
	readonly 'Reflect': false;
	readonly 'RegExp': false;
	readonly 'Set': false;
	readonly 'SharedArrayBuffer': false;
	readonly 'String': false;
	readonly 'Symbol': false;
	readonly 'SyntaxError': false;
	readonly 'toLocaleString': false;
	readonly 'toString': false;
	readonly 'TypeError': false;
	readonly 'Uint16Array': false;
	readonly 'Uint32Array': false;
	readonly 'Uint8Array': false;
	readonly 'Uint8ClampedArray': false;
	readonly 'undefined': false;
	readonly 'unescape': false;
	readonly 'URIError': false;
	readonly 'valueOf': false;
	readonly 'WeakMap': false;
	readonly 'WeakSet': false;
}

type GlobalsEs2020 = {
	readonly 'Array': false;
	readonly 'ArrayBuffer': false;
	readonly 'Atomics': false;
	readonly 'BigInt': false;
	readonly 'BigInt64Array': false;
	readonly 'BigUint64Array': false;
	readonly 'Boolean': false;
	readonly 'constructor': false;
	readonly 'DataView': false;
	readonly 'Date': false;
	readonly 'decodeURI': false;
	readonly 'decodeURIComponent': false;
	readonly 'encodeURI': false;
	readonly 'encodeURIComponent': false;
	readonly 'Error': false;
	readonly 'escape': false;
	readonly 'eval': false;
	readonly 'EvalError': false;
	readonly 'Float32Array': false;
	readonly 'Float64Array': false;
	readonly 'Function': false;
	readonly 'globalThis': false;
	readonly 'hasOwnProperty': false;
	readonly 'Infinity': false;
	readonly 'Int16Array': false;
	readonly 'Int32Array': false;
	readonly 'Int8Array': false;
	readonly 'isFinite': false;
	readonly 'isNaN': false;
	readonly 'isPrototypeOf': false;
	readonly 'JSON': false;
	readonly 'Map': false;
	readonly 'Math': false;
	readonly 'NaN': false;
	readonly 'Number': false;
	readonly 'Object': false;
	readonly 'parseFloat': false;
	readonly 'parseInt': false;
	readonly 'Promise': false;
	readonly 'propertyIsEnumerable': false;
	readonly 'Proxy': false;
	readonly 'RangeError': false;
	readonly 'ReferenceError': false;
	readonly 'Reflect': false;
	readonly 'RegExp': false;
	readonly 'Set': false;
	readonly 'SharedArrayBuffer': false;
	readonly 'String': false;
	readonly 'Symbol': false;
	readonly 'SyntaxError': false;
	readonly 'toLocaleString': false;
	readonly 'toString': false;
	readonly 'TypeError': false;
	readonly 'Uint16Array': false;
	readonly 'Uint32Array': false;
	readonly 'Uint8Array': false;
	readonly 'Uint8ClampedArray': false;
	readonly 'undefined': false;
	readonly 'unescape': false;
	readonly 'URIError': false;
	readonly 'valueOf': false;
	readonly 'WeakMap': false;
	readonly 'WeakSet': false;
}

type GlobalsEs2021 = {
	readonly 'AggregateError': false;
	readonly 'Array': false;
	readonly 'ArrayBuffer': false;
	readonly 'Atomics': false;
	readonly 'BigInt': false;
	readonly 'BigInt64Array': false;
	readonly 'BigUint64Array': false;
	readonly 'Boolean': false;
	readonly 'constructor': false;
	readonly 'DataView': false;
	readonly 'Date': false;
	readonly 'decodeURI': false;
	readonly 'decodeURIComponent': false;
	readonly 'encodeURI': false;
	readonly 'encodeURIComponent': false;
	readonly 'Error': false;
	readonly 'escape': false;
	readonly 'eval': false;
	readonly 'EvalError': false;
	readonly 'FinalizationRegistry': false;
	readonly 'Float32Array': false;
	readonly 'Float64Array': false;
	readonly 'Function': false;
	readonly 'globalThis': false;
	readonly 'hasOwnProperty': false;
	readonly 'Infinity': false;
	readonly 'Int16Array': false;
	readonly 'Int32Array': false;
	readonly 'Int8Array': false;
	readonly 'isFinite': false;
	readonly 'isNaN': false;
	readonly 'isPrototypeOf': false;
	readonly 'JSON': false;
	readonly 'Map': false;
	readonly 'Math': false;
	readonly 'NaN': false;
	readonly 'Number': false;
	readonly 'Object': false;
	readonly 'parseFloat': false;
	readonly 'parseInt': false;
	readonly 'Promise': false;
	readonly 'propertyIsEnumerable': false;
	readonly 'Proxy': false;
	readonly 'RangeError': false;
	readonly 'ReferenceError': false;
	readonly 'Reflect': false;
	readonly 'RegExp': false;
	readonly 'Set': false;
	readonly 'SharedArrayBuffer': false;
	readonly 'String': false;
	readonly 'Symbol': false;
	readonly 'SyntaxError': false;
	readonly 'toLocaleString': false;
	readonly 'toString': false;
	readonly 'TypeError': false;
	readonly 'Uint16Array': false;
	readonly 'Uint32Array': false;
	readonly 'Uint8Array': false;
	readonly 'Uint8ClampedArray': false;
	readonly 'undefined': false;
	readonly 'unescape': false;
	readonly 'URIError': false;
	readonly 'valueOf': false;
	readonly 'WeakMap': false;
	readonly 'WeakRef': false;
	readonly 'WeakSet': false;
}

type GlobalsBrowser = {
	readonly 'AbortController': false;
	readonly 'AbortSignal': false;
	readonly 'addEventListener': false;
	readonly 'alert': false;
	readonly 'AnalyserNode': false;
	readonly 'Animation': false;
	readonly 'AnimationEffectReadOnly': false;
	readonly 'AnimationEffectTiming': false;
	readonly 'AnimationEffectTimingReadOnly': false;
	readonly 'AnimationEvent': false;
	readonly 'AnimationPlaybackEvent': false;
	readonly 'AnimationTimeline': false;
	readonly 'applicationCache': false;
	readonly 'ApplicationCache': false;
	readonly 'ApplicationCacheErrorEvent': false;
	readonly 'atob': false;
	readonly 'Attr': false;
	readonly 'Audio': false;
	readonly 'AudioBuffer': false;
	readonly 'AudioBufferSourceNode': false;
	readonly 'AudioContext': false;
	readonly 'AudioDestinationNode': false;
	readonly 'AudioListener': false;
	readonly 'AudioNode': false;
	readonly 'AudioParam': false;
	readonly 'AudioProcessingEvent': false;
	readonly 'AudioScheduledSourceNode': false;
	readonly 'AudioWorkletGlobalScope': false;
	readonly 'AudioWorkletNode': false;
	readonly 'AudioWorkletProcessor': false;
	readonly 'BarProp': false;
	readonly 'BaseAudioContext': false;
	readonly 'BatteryManager': false;
	readonly 'BeforeUnloadEvent': false;
	readonly 'BiquadFilterNode': false;
	readonly 'Blob': false;
	readonly 'BlobEvent': false;
	readonly 'blur': false;
	readonly 'BroadcastChannel': false;
	readonly 'btoa': false;
	readonly 'BudgetService': false;
	readonly 'ByteLengthQueuingStrategy': false;
	readonly 'Cache': false;
	readonly 'caches': false;
	readonly 'CacheStorage': false;
	readonly 'cancelAnimationFrame': false;
	readonly 'cancelIdleCallback': false;
	readonly 'CanvasCaptureMediaStreamTrack': false;
	readonly 'CanvasGradient': false;
	readonly 'CanvasPattern': false;
	readonly 'CanvasRenderingContext2D': false;
	readonly 'ChannelMergerNode': false;
	readonly 'ChannelSplitterNode': false;
	readonly 'CharacterData': false;
	readonly 'clearInterval': false;
	readonly 'clearTimeout': false;
	readonly 'clientInformation': false;
	readonly 'ClipboardEvent': false;
	readonly 'ClipboardItem': false;
	readonly 'close': false;
	readonly 'closed': false;
	readonly 'CloseEvent': false;
	readonly 'Comment': false;
	readonly 'CompositionEvent': false;
	readonly 'CompressionStream': false;
	readonly 'confirm': false;
	readonly 'console': false;
	readonly 'ConstantSourceNode': false;
	readonly 'ConvolverNode': false;
	readonly 'CountQueuingStrategy': false;
	readonly 'createImageBitmap': false;
	readonly 'Credential': false;
	readonly 'CredentialsContainer': false;
	readonly 'crypto': false;
	readonly 'Crypto': false;
	readonly 'CryptoKey': false;
	readonly 'CSS': false;
	readonly 'CSSConditionRule': false;
	readonly 'CSSFontFaceRule': false;
	readonly 'CSSGroupingRule': false;
	readonly 'CSSImportRule': false;
	readonly 'CSSKeyframeRule': false;
	readonly 'CSSKeyframesRule': false;
	readonly 'CSSMatrixComponent': false;
	readonly 'CSSMediaRule': false;
	readonly 'CSSNamespaceRule': false;
	readonly 'CSSPageRule': false;
	readonly 'CSSPerspective': false;
	readonly 'CSSRotate': false;
	readonly 'CSSRule': false;
	readonly 'CSSRuleList': false;
	readonly 'CSSScale': false;
	readonly 'CSSSkew': false;
	readonly 'CSSSkewX': false;
	readonly 'CSSSkewY': false;
	readonly 'CSSStyleDeclaration': false;
	readonly 'CSSStyleRule': false;
	readonly 'CSSStyleSheet': false;
	readonly 'CSSSupportsRule': false;
	readonly 'CSSTransformValue': false;
	readonly 'CSSTranslate': false;
	readonly 'CustomElementRegistry': false;
	readonly 'customElements': false;
	readonly 'CustomEvent': false;
	readonly 'DataTransfer': false;
	readonly 'DataTransferItem': false;
	readonly 'DataTransferItemList': false;
	readonly 'DecompressionStream': false;
	readonly 'defaultstatus': false;
	readonly 'defaultStatus': false;
	readonly 'DelayNode': false;
	readonly 'DeviceMotionEvent': false;
	readonly 'DeviceOrientationEvent': false;
	readonly 'devicePixelRatio': false;
	readonly 'dispatchEvent': false;
	readonly 'document': false;
	readonly 'Document': false;
	readonly 'DocumentFragment': false;
	readonly 'DocumentType': false;
	readonly 'DOMError': false;
	readonly 'DOMException': false;
	readonly 'DOMImplementation': false;
	readonly 'DOMMatrix': false;
	readonly 'DOMMatrixReadOnly': false;
	readonly 'DOMParser': false;
	readonly 'DOMPoint': false;
	readonly 'DOMPointReadOnly': false;
	readonly 'DOMQuad': false;
	readonly 'DOMRect': false;
	readonly 'DOMRectList': false;
	readonly 'DOMRectReadOnly': false;
	readonly 'DOMStringList': false;
	readonly 'DOMStringMap': false;
	readonly 'DOMTokenList': false;
	readonly 'DragEvent': false;
	readonly 'DynamicsCompressorNode': false;
	readonly 'Element': false;
	readonly 'ErrorEvent': false;
	readonly 'event': false;
	readonly 'Event': false;
	readonly 'EventSource': false;
	readonly 'EventTarget': false;
	readonly 'external': false;
	readonly 'fetch': false;
	readonly 'File': false;
	readonly 'FileList': false;
	readonly 'FileReader': false;
	readonly 'find': false;
	readonly 'focus': false;
	readonly 'FocusEvent': false;
	readonly 'FontFace': false;
	readonly 'FontFaceSetLoadEvent': false;
	readonly 'FormData': false;
	readonly 'FormDataEvent': false;
	readonly 'frameElement': false;
	readonly 'frames': false;
	readonly 'GainNode': false;
	readonly 'Gamepad': false;
	readonly 'GamepadButton': false;
	readonly 'GamepadEvent': false;
	readonly 'getComputedStyle': false;
	readonly 'getSelection': false;
	readonly 'HashChangeEvent': false;
	readonly 'Headers': false;
	readonly 'history': false;
	readonly 'History': false;
	readonly 'HTMLAllCollection': false;
	readonly 'HTMLAnchorElement': false;
	readonly 'HTMLAreaElement': false;
	readonly 'HTMLAudioElement': false;
	readonly 'HTMLBaseElement': false;
	readonly 'HTMLBodyElement': false;
	readonly 'HTMLBRElement': false;
	readonly 'HTMLButtonElement': false;
	readonly 'HTMLCanvasElement': false;
	readonly 'HTMLCollection': false;
	readonly 'HTMLContentElement': false;
	readonly 'HTMLDataElement': false;
	readonly 'HTMLDataListElement': false;
	readonly 'HTMLDetailsElement': false;
	readonly 'HTMLDialogElement': false;
	readonly 'HTMLDirectoryElement': false;
	readonly 'HTMLDivElement': false;
	readonly 'HTMLDListElement': false;
	readonly 'HTMLDocument': false;
	readonly 'HTMLElement': false;
	readonly 'HTMLEmbedElement': false;
	readonly 'HTMLFieldSetElement': false;
	readonly 'HTMLFontElement': false;
	readonly 'HTMLFormControlsCollection': false;
	readonly 'HTMLFormElement': false;
	readonly 'HTMLFrameElement': false;
	readonly 'HTMLFrameSetElement': false;
	readonly 'HTMLHeadElement': false;
	readonly 'HTMLHeadingElement': false;
	readonly 'HTMLHRElement': false;
	readonly 'HTMLHtmlElement': false;
	readonly 'HTMLIFrameElement': false;
	readonly 'HTMLImageElement': false;
	readonly 'HTMLInputElement': false;
	readonly 'HTMLLabelElement': false;
	readonly 'HTMLLegendElement': false;
	readonly 'HTMLLIElement': false;
	readonly 'HTMLLinkElement': false;
	readonly 'HTMLMapElement': false;
	readonly 'HTMLMarqueeElement': false;
	readonly 'HTMLMediaElement': false;
	readonly 'HTMLMenuElement': false;
	readonly 'HTMLMetaElement': false;
	readonly 'HTMLMeterElement': false;
	readonly 'HTMLModElement': false;
	readonly 'HTMLObjectElement': false;
	readonly 'HTMLOListElement': false;
	readonly 'HTMLOptGroupElement': false;
	readonly 'HTMLOptionElement': false;
	readonly 'HTMLOptionsCollection': false;
	readonly 'HTMLOutputElement': false;
	readonly 'HTMLParagraphElement': false;
	readonly 'HTMLParamElement': false;
	readonly 'HTMLPictureElement': false;
	readonly 'HTMLPreElement': false;
	readonly 'HTMLProgressElement': false;
	readonly 'HTMLQuoteElement': false;
	readonly 'HTMLScriptElement': false;
	readonly 'HTMLSelectElement': false;
	readonly 'HTMLShadowElement': false;
	readonly 'HTMLSlotElement': false;
	readonly 'HTMLSourceElement': false;
	readonly 'HTMLSpanElement': false;
	readonly 'HTMLStyleElement': false;
	readonly 'HTMLTableCaptionElement': false;
	readonly 'HTMLTableCellElement': false;
	readonly 'HTMLTableColElement': false;
	readonly 'HTMLTableElement': false;
	readonly 'HTMLTableRowElement': false;
	readonly 'HTMLTableSectionElement': false;
	readonly 'HTMLTemplateElement': false;
	readonly 'HTMLTextAreaElement': false;
	readonly 'HTMLTimeElement': false;
	readonly 'HTMLTitleElement': false;
	readonly 'HTMLTrackElement': false;
	readonly 'HTMLUListElement': false;
	readonly 'HTMLUnknownElement': false;
	readonly 'HTMLVideoElement': false;
	readonly 'IDBCursor': false;
	readonly 'IDBCursorWithValue': false;
	readonly 'IDBDatabase': false;
	readonly 'IDBFactory': false;
	readonly 'IDBIndex': false;
	readonly 'IDBKeyRange': false;
	readonly 'IDBObjectStore': false;
	readonly 'IDBOpenDBRequest': false;
	readonly 'IDBRequest': false;
	readonly 'IDBTransaction': false;
	readonly 'IDBVersionChangeEvent': false;
	readonly 'IdleDeadline': false;
	readonly 'IIRFilterNode': false;
	readonly 'Image': false;
	readonly 'ImageBitmap': false;
	readonly 'ImageBitmapRenderingContext': false;
	readonly 'ImageCapture': false;
	readonly 'ImageData': false;
	readonly 'indexedDB': false;
	readonly 'innerHeight': false;
	readonly 'innerWidth': false;
	readonly 'InputEvent': false;
	readonly 'IntersectionObserver': false;
	readonly 'IntersectionObserverEntry': false;
	readonly 'Intl': false;
	readonly 'isSecureContext': false;
	readonly 'KeyboardEvent': false;
	readonly 'KeyframeEffect': false;
	readonly 'KeyframeEffectReadOnly': false;
	readonly 'length': false;
	readonly 'localStorage': false;
	readonly 'location': true;
	readonly 'Location': false;
	readonly 'locationbar': false;
	readonly 'matchMedia': false;
	readonly 'MediaDeviceInfo': false;
	readonly 'MediaDevices': false;
	readonly 'MediaElementAudioSourceNode': false;
	readonly 'MediaEncryptedEvent': false;
	readonly 'MediaError': false;
	readonly 'MediaKeyMessageEvent': false;
	readonly 'MediaKeySession': false;
	readonly 'MediaKeyStatusMap': false;
	readonly 'MediaKeySystemAccess': false;
	readonly 'MediaList': false;
	readonly 'MediaMetadata': false;
	readonly 'MediaQueryList': false;
	readonly 'MediaQueryListEvent': false;
	readonly 'MediaRecorder': false;
	readonly 'MediaSettingsRange': false;
	readonly 'MediaSource': false;
	readonly 'MediaStream': false;
	readonly 'MediaStreamAudioDestinationNode': false;
	readonly 'MediaStreamAudioSourceNode': false;
	readonly 'MediaStreamConstraints': false;
	readonly 'MediaStreamEvent': false;
	readonly 'MediaStreamTrack': false;
	readonly 'MediaStreamTrackEvent': false;
	readonly 'menubar': false;
	readonly 'MessageChannel': false;
	readonly 'MessageEvent': false;
	readonly 'MessagePort': false;
	readonly 'MIDIAccess': false;
	readonly 'MIDIConnectionEvent': false;
	readonly 'MIDIInput': false;
	readonly 'MIDIInputMap': false;
	readonly 'MIDIMessageEvent': false;
	readonly 'MIDIOutput': false;
	readonly 'MIDIOutputMap': false;
	readonly 'MIDIPort': false;
	readonly 'MimeType': false;
	readonly 'MimeTypeArray': false;
	readonly 'MouseEvent': false;
	readonly 'moveBy': false;
	readonly 'moveTo': false;
	readonly 'MutationEvent': false;
	readonly 'MutationObserver': false;
	readonly 'MutationRecord': false;
	readonly 'name': false;
	readonly 'NamedNodeMap': false;
	readonly 'NavigationPreloadManager': false;
	readonly 'navigator': false;
	readonly 'Navigator': false;
	readonly 'NavigatorUAData': false;
	readonly 'NetworkInformation': false;
	readonly 'Node': false;
	readonly 'NodeFilter': false;
	readonly 'NodeIterator': false;
	readonly 'NodeList': false;
	readonly 'Notification': false;
	readonly 'OfflineAudioCompletionEvent': false;
	readonly 'OfflineAudioContext': false;
	readonly 'offscreenBuffering': false;
	readonly 'OffscreenCanvas': true;
	readonly 'OffscreenCanvasRenderingContext2D': false;
	readonly 'onabort': true;
	readonly 'onafterprint': true;
	readonly 'onanimationend': true;
	readonly 'onanimationiteration': true;
	readonly 'onanimationstart': true;
	readonly 'onappinstalled': true;
	readonly 'onauxclick': true;
	readonly 'onbeforeinstallprompt': true;
	readonly 'onbeforeprint': true;
	readonly 'onbeforeunload': true;
	readonly 'onblur': true;
	readonly 'oncancel': true;
	readonly 'oncanplay': true;
	readonly 'oncanplaythrough': true;
	readonly 'onchange': true;
	readonly 'onclick': true;
	readonly 'onclose': true;
	readonly 'oncontextmenu': true;
	readonly 'oncuechange': true;
	readonly 'ondblclick': true;
	readonly 'ondevicemotion': true;
	readonly 'ondeviceorientation': true;
	readonly 'ondeviceorientationabsolute': true;
	readonly 'ondrag': true;
	readonly 'ondragend': true;
	readonly 'ondragenter': true;
	readonly 'ondragleave': true;
	readonly 'ondragover': true;
	readonly 'ondragstart': true;
	readonly 'ondrop': true;
	readonly 'ondurationchange': true;
	readonly 'onemptied': true;
	readonly 'onended': true;
	readonly 'onerror': true;
	readonly 'onfocus': true;
	readonly 'ongotpointercapture': true;
	readonly 'onhashchange': true;
	readonly 'oninput': true;
	readonly 'oninvalid': true;
	readonly 'onkeydown': true;
	readonly 'onkeypress': true;
	readonly 'onkeyup': true;
	readonly 'onlanguagechange': true;
	readonly 'onload': true;
	readonly 'onloadeddata': true;
	readonly 'onloadedmetadata': true;
	readonly 'onloadstart': true;
	readonly 'onlostpointercapture': true;
	readonly 'onmessage': true;
	readonly 'onmessageerror': true;
	readonly 'onmousedown': true;
	readonly 'onmouseenter': true;
	readonly 'onmouseleave': true;
	readonly 'onmousemove': true;
	readonly 'onmouseout': true;
	readonly 'onmouseover': true;
	readonly 'onmouseup': true;
	readonly 'onmousewheel': true;
	readonly 'onoffline': true;
	readonly 'ononline': true;
	readonly 'onpagehide': true;
	readonly 'onpageshow': true;
	readonly 'onpause': true;
	readonly 'onplay': true;
	readonly 'onplaying': true;
	readonly 'onpointercancel': true;
	readonly 'onpointerdown': true;
	readonly 'onpointerenter': true;
	readonly 'onpointerleave': true;
	readonly 'onpointermove': true;
	readonly 'onpointerout': true;
	readonly 'onpointerover': true;
	readonly 'onpointerup': true;
	readonly 'onpopstate': true;
	readonly 'onprogress': true;
	readonly 'onratechange': true;
	readonly 'onrejectionhandled': true;
	readonly 'onreset': true;
	readonly 'onresize': true;
	readonly 'onscroll': true;
	readonly 'onsearch': true;
	readonly 'onseeked': true;
	readonly 'onseeking': true;
	readonly 'onselect': true;
	readonly 'onstalled': true;
	readonly 'onstorage': true;
	readonly 'onsubmit': true;
	readonly 'onsuspend': true;
	readonly 'ontimeupdate': true;
	readonly 'ontoggle': true;
	readonly 'ontransitionend': true;
	readonly 'onunhandledrejection': true;
	readonly 'onunload': true;
	readonly 'onvolumechange': true;
	readonly 'onwaiting': true;
	readonly 'onwheel': true;
	readonly 'open': false;
	readonly 'openDatabase': false;
	readonly 'opener': false;
	readonly 'Option': false;
	readonly 'origin': false;
	readonly 'OscillatorNode': false;
	readonly 'outerHeight': false;
	readonly 'outerWidth': false;
	readonly 'OverconstrainedError': false;
	readonly 'PageTransitionEvent': false;
	readonly 'pageXOffset': false;
	readonly 'pageYOffset': false;
	readonly 'PannerNode': false;
	readonly 'parent': false;
	readonly 'Path2D': false;
	readonly 'PaymentAddress': false;
	readonly 'PaymentRequest': false;
	readonly 'PaymentRequestUpdateEvent': false;
	readonly 'PaymentResponse': false;
	readonly 'performance': false;
	readonly 'Performance': false;
	readonly 'PerformanceEntry': false;
	readonly 'PerformanceLongTaskTiming': false;
	readonly 'PerformanceMark': false;
	readonly 'PerformanceMeasure': false;
	readonly 'PerformanceNavigation': false;
	readonly 'PerformanceNavigationTiming': false;
	readonly 'PerformanceObserver': false;
	readonly 'PerformanceObserverEntryList': false;
	readonly 'PerformancePaintTiming': false;
	readonly 'PerformanceResourceTiming': false;
	readonly 'PerformanceTiming': false;
	readonly 'PeriodicWave': false;
	readonly 'Permissions': false;
	readonly 'PermissionStatus': false;
	readonly 'personalbar': false;
	readonly 'PhotoCapabilities': false;
	readonly 'Plugin': false;
	readonly 'PluginArray': false;
	readonly 'PointerEvent': false;
	readonly 'PopStateEvent': false;
	readonly 'postMessage': false;
	readonly 'Presentation': false;
	readonly 'PresentationAvailability': false;
	readonly 'PresentationConnection': false;
	readonly 'PresentationConnectionAvailableEvent': false;
	readonly 'PresentationConnectionCloseEvent': false;
	readonly 'PresentationConnectionList': false;
	readonly 'PresentationReceiver': false;
	readonly 'PresentationRequest': false;
	readonly 'print': false;
	readonly 'ProcessingInstruction': false;
	readonly 'ProgressEvent': false;
	readonly 'PromiseRejectionEvent': false;
	readonly 'prompt': false;
	readonly 'PushManager': false;
	readonly 'PushSubscription': false;
	readonly 'PushSubscriptionOptions': false;
	readonly 'queueMicrotask': false;
	readonly 'RadioNodeList': false;
	readonly 'Range': false;
	readonly 'ReadableByteStreamController': false;
	readonly 'ReadableStream': false;
	readonly 'ReadableStreamBYOBReader': false;
	readonly 'ReadableStreamBYOBRequest': false;
	readonly 'ReadableStreamDefaultController': false;
	readonly 'ReadableStreamDefaultReader': false;
	readonly 'registerProcessor': false;
	readonly 'RemotePlayback': false;
	readonly 'removeEventListener': false;
	readonly 'reportError': false;
	readonly 'Request': false;
	readonly 'requestAnimationFrame': false;
	readonly 'requestIdleCallback': false;
	readonly 'resizeBy': false;
	readonly 'ResizeObserver': false;
	readonly 'ResizeObserverEntry': false;
	readonly 'resizeTo': false;
	readonly 'Response': false;
	readonly 'RTCCertificate': false;
	readonly 'RTCDataChannel': false;
	readonly 'RTCDataChannelEvent': false;
	readonly 'RTCDtlsTransport': false;
	readonly 'RTCIceCandidate': false;
	readonly 'RTCIceGatherer': false;
	readonly 'RTCIceTransport': false;
	readonly 'RTCPeerConnection': false;
	readonly 'RTCPeerConnectionIceEvent': false;
	readonly 'RTCRtpContributingSource': false;
	readonly 'RTCRtpReceiver': false;
	readonly 'RTCRtpSender': false;
	readonly 'RTCSctpTransport': false;
	readonly 'RTCSessionDescription': false;
	readonly 'RTCStatsReport': false;
	readonly 'RTCTrackEvent': false;
	readonly 'screen': false;
	readonly 'Screen': false;
	readonly 'screenLeft': false;
	readonly 'ScreenOrientation': false;
	readonly 'screenTop': false;
	readonly 'screenX': false;
	readonly 'screenY': false;
	readonly 'ScriptProcessorNode': false;
	readonly 'scroll': false;
	readonly 'scrollbars': false;
	readonly 'scrollBy': false;
	readonly 'scrollTo': false;
	readonly 'scrollX': false;
	readonly 'scrollY': false;
	readonly 'SecurityPolicyViolationEvent': false;
	readonly 'Selection': false;
	readonly 'self': false;
	readonly 'ServiceWorker': false;
	readonly 'ServiceWorkerContainer': false;
	readonly 'ServiceWorkerRegistration': false;
	readonly 'sessionStorage': false;
	readonly 'setInterval': false;
	readonly 'setTimeout': false;
	readonly 'ShadowRoot': false;
	readonly 'SharedWorker': false;
	readonly 'SourceBuffer': false;
	readonly 'SourceBufferList': false;
	readonly 'speechSynthesis': false;
	readonly 'SpeechSynthesisEvent': false;
	readonly 'SpeechSynthesisUtterance': false;
	readonly 'StaticRange': false;
	readonly 'status': false;
	readonly 'statusbar': false;
	readonly 'StereoPannerNode': false;
	readonly 'stop': false;
	readonly 'Storage': false;
	readonly 'StorageEvent': false;
	readonly 'StorageManager': false;
	readonly 'structuredClone': false;
	readonly 'styleMedia': false;
	readonly 'StyleSheet': false;
	readonly 'StyleSheetList': false;
	readonly 'SubmitEvent': false;
	readonly 'SubtleCrypto': false;
	readonly 'SVGAElement': false;
	readonly 'SVGAngle': false;
	readonly 'SVGAnimatedAngle': false;
	readonly 'SVGAnimatedBoolean': false;
	readonly 'SVGAnimatedEnumeration': false;
	readonly 'SVGAnimatedInteger': false;
	readonly 'SVGAnimatedLength': false;
	readonly 'SVGAnimatedLengthList': false;
	readonly 'SVGAnimatedNumber': false;
	readonly 'SVGAnimatedNumberList': false;
	readonly 'SVGAnimatedPreserveAspectRatio': false;
	readonly 'SVGAnimatedRect': false;
	readonly 'SVGAnimatedString': false;
	readonly 'SVGAnimatedTransformList': false;
	readonly 'SVGAnimateElement': false;
	readonly 'SVGAnimateMotionElement': false;
	readonly 'SVGAnimateTransformElement': false;
	readonly 'SVGAnimationElement': false;
	readonly 'SVGCircleElement': false;
	readonly 'SVGClipPathElement': false;
	readonly 'SVGComponentTransferFunctionElement': false;
	readonly 'SVGDefsElement': false;
	readonly 'SVGDescElement': false;
	readonly 'SVGDiscardElement': false;
	readonly 'SVGElement': false;
	readonly 'SVGEllipseElement': false;
	readonly 'SVGFEBlendElement': false;
	readonly 'SVGFEColorMatrixElement': false;
	readonly 'SVGFEComponentTransferElement': false;
	readonly 'SVGFECompositeElement': false;
	readonly 'SVGFEConvolveMatrixElement': false;
	readonly 'SVGFEDiffuseLightingElement': false;
	readonly 'SVGFEDisplacementMapElement': false;
	readonly 'SVGFEDistantLightElement': false;
	readonly 'SVGFEDropShadowElement': false;
	readonly 'SVGFEFloodElement': false;
	readonly 'SVGFEFuncAElement': false;
	readonly 'SVGFEFuncBElement': false;
	readonly 'SVGFEFuncGElement': false;
	readonly 'SVGFEFuncRElement': false;
	readonly 'SVGFEGaussianBlurElement': false;
	readonly 'SVGFEImageElement': false;
	readonly 'SVGFEMergeElement': false;
	readonly 'SVGFEMergeNodeElement': false;
	readonly 'SVGFEMorphologyElement': false;
	readonly 'SVGFEOffsetElement': false;
	readonly 'SVGFEPointLightElement': false;
	readonly 'SVGFESpecularLightingElement': false;
	readonly 'SVGFESpotLightElement': false;
	readonly 'SVGFETileElement': false;
	readonly 'SVGFETurbulenceElement': false;
	readonly 'SVGFilterElement': false;
	readonly 'SVGForeignObjectElement': false;
	readonly 'SVGGElement': false;
	readonly 'SVGGeometryElement': false;
	readonly 'SVGGradientElement': false;
	readonly 'SVGGraphicsElement': false;
	readonly 'SVGImageElement': false;
	readonly 'SVGLength': false;
	readonly 'SVGLengthList': false;
	readonly 'SVGLinearGradientElement': false;
	readonly 'SVGLineElement': false;
	readonly 'SVGMarkerElement': false;
	readonly 'SVGMaskElement': false;
	readonly 'SVGMatrix': false;
	readonly 'SVGMetadataElement': false;
	readonly 'SVGMPathElement': false;
	readonly 'SVGNumber': false;
	readonly 'SVGNumberList': false;
	readonly 'SVGPathElement': false;
	readonly 'SVGPatternElement': false;
	readonly 'SVGPoint': false;
	readonly 'SVGPointList': false;
	readonly 'SVGPolygonElement': false;
	readonly 'SVGPolylineElement': false;
	readonly 'SVGPreserveAspectRatio': false;
	readonly 'SVGRadialGradientElement': false;
	readonly 'SVGRect': false;
	readonly 'SVGRectElement': false;
	readonly 'SVGScriptElement': false;
	readonly 'SVGSetElement': false;
	readonly 'SVGStopElement': false;
	readonly 'SVGStringList': false;
	readonly 'SVGStyleElement': false;
	readonly 'SVGSVGElement': false;
	readonly 'SVGSwitchElement': false;
	readonly 'SVGSymbolElement': false;
	readonly 'SVGTextContentElement': false;
	readonly 'SVGTextElement': false;
	readonly 'SVGTextPathElement': false;
	readonly 'SVGTextPositioningElement': false;
	readonly 'SVGTitleElement': false;
	readonly 'SVGTransform': false;
	readonly 'SVGTransformList': false;
	readonly 'SVGTSpanElement': false;
	readonly 'SVGUnitTypes': false;
	readonly 'SVGUseElement': false;
	readonly 'SVGViewElement': false;
	readonly 'TaskAttributionTiming': false;
	readonly 'Text': false;
	readonly 'TextDecoder': false;
	readonly 'TextDecoderStream': false;
	readonly 'TextEncoder': false;
	readonly 'TextEncoderStream': false;
	readonly 'TextEvent': false;
	readonly 'TextMetrics': false;
	readonly 'TextTrack': false;
	readonly 'TextTrackCue': false;
	readonly 'TextTrackCueList': false;
	readonly 'TextTrackList': false;
	readonly 'TimeRanges': false;
	readonly 'ToggleEvent': false;
	readonly 'toolbar': false;
	readonly 'top': false;
	readonly 'Touch': false;
	readonly 'TouchEvent': false;
	readonly 'TouchList': false;
	readonly 'TrackEvent': false;
	readonly 'TransformStream': false;
	readonly 'TransformStreamDefaultController': false;
	readonly 'TransitionEvent': false;
	readonly 'TreeWalker': false;
	readonly 'UIEvent': false;
	readonly 'URL': false;
	readonly 'URLSearchParams': false;
	readonly 'ValidityState': false;
	readonly 'visualViewport': false;
	readonly 'VisualViewport': false;
	readonly 'VTTCue': false;
	readonly 'WaveShaperNode': false;
	readonly 'WebAssembly': false;
	readonly 'WebGL2RenderingContext': false;
	readonly 'WebGLActiveInfo': false;
	readonly 'WebGLBuffer': false;
	readonly 'WebGLContextEvent': false;
	readonly 'WebGLFramebuffer': false;
	readonly 'WebGLProgram': false;
	readonly 'WebGLQuery': false;
	readonly 'WebGLRenderbuffer': false;
	readonly 'WebGLRenderingContext': false;
	readonly 'WebGLSampler': false;
	readonly 'WebGLShader': false;
	readonly 'WebGLShaderPrecisionFormat': false;
	readonly 'WebGLSync': false;
	readonly 'WebGLTexture': false;
	readonly 'WebGLTransformFeedback': false;
	readonly 'WebGLUniformLocation': false;
	readonly 'WebGLVertexArrayObject': false;
	readonly 'WebSocket': false;
	readonly 'WheelEvent': false;
	readonly 'window': false;
	readonly 'Window': false;
	readonly 'Worker': false;
	readonly 'WritableStream': false;
	readonly 'WritableStreamDefaultController': false;
	readonly 'WritableStreamDefaultWriter': false;
	readonly 'XMLDocument': false;
	readonly 'XMLHttpRequest': false;
	readonly 'XMLHttpRequestEventTarget': false;
	readonly 'XMLHttpRequestUpload': false;
	readonly 'XMLSerializer': false;
	readonly 'XPathEvaluator': false;
	readonly 'XPathExpression': false;
	readonly 'XPathResult': false;
	readonly 'XRAnchor': false;
	readonly 'XRBoundedReferenceSpace': false;
	readonly 'XRCPUDepthInformation': false;
	readonly 'XRDepthInformation': false;
	readonly 'XRFrame': false;
	readonly 'XRInputSource': false;
	readonly 'XRInputSourceArray': false;
	readonly 'XRInputSourceEvent': false;
	readonly 'XRInputSourcesChangeEvent': false;
	readonly 'XRPose': false;
	readonly 'XRReferenceSpace': false;
	readonly 'XRReferenceSpaceEvent': false;
	readonly 'XRRenderState': false;
	readonly 'XRRigidTransform': false;
	readonly 'XRSession': false;
	readonly 'XRSessionEvent': false;
	readonly 'XRSpace': false;
	readonly 'XRSystem': false;
	readonly 'XRView': false;
	readonly 'XRViewerPose': false;
	readonly 'XRViewport': false;
	readonly 'XRWebGLBinding': false;
	readonly 'XRWebGLDepthInformation': false;
	readonly 'XRWebGLLayer': false;
	readonly 'XSLTProcessor': false;
}

type GlobalsWorker = {
	readonly 'addEventListener': false;
	readonly 'applicationCache': false;
	readonly 'atob': false;
	readonly 'Blob': false;
	readonly 'BroadcastChannel': false;
	readonly 'btoa': false;
	readonly 'ByteLengthQueuingStrategy': false;
	readonly 'Cache': false;
	readonly 'caches': false;
	readonly 'clearInterval': false;
	readonly 'clearTimeout': false;
	readonly 'close': true;
	readonly 'CompressionStream': false;
	readonly 'console': false;
	readonly 'CountQueuingStrategy': false;
	readonly 'crypto': false;
	readonly 'Crypto': false;
	readonly 'CryptoKey': false;
	readonly 'CustomEvent': false;
	readonly 'DecompressionStream': false;
	readonly 'ErrorEvent': false;
	readonly 'Event': false;
	readonly 'fetch': false;
	readonly 'File': false;
	readonly 'FileReaderSync': false;
	readonly 'FormData': false;
	readonly 'Headers': false;
	readonly 'IDBCursor': false;
	readonly 'IDBCursorWithValue': false;
	readonly 'IDBDatabase': false;
	readonly 'IDBFactory': false;
	readonly 'IDBIndex': false;
	readonly 'IDBKeyRange': false;
	readonly 'IDBObjectStore': false;
	readonly 'IDBOpenDBRequest': false;
	readonly 'IDBRequest': false;
	readonly 'IDBTransaction': false;
	readonly 'IDBVersionChangeEvent': false;
	readonly 'ImageData': false;
	readonly 'importScripts': true;
	readonly 'indexedDB': false;
	readonly 'location': false;
	readonly 'MessageChannel': false;
	readonly 'MessageEvent': false;
	readonly 'MessagePort': false;
	readonly 'name': false;
	readonly 'navigator': false;
	readonly 'Notification': false;
	readonly 'onclose': true;
	readonly 'onconnect': true;
	readonly 'onerror': true;
	readonly 'onlanguagechange': true;
	readonly 'onmessage': true;
	readonly 'onoffline': true;
	readonly 'ononline': true;
	readonly 'onrejectionhandled': true;
	readonly 'onunhandledrejection': true;
	readonly 'performance': false;
	readonly 'Performance': false;
	readonly 'PerformanceEntry': false;
	readonly 'PerformanceMark': false;
	readonly 'PerformanceMeasure': false;
	readonly 'PerformanceNavigation': false;
	readonly 'PerformanceObserver': false;
	readonly 'PerformanceObserverEntryList': false;
	readonly 'PerformanceResourceTiming': false;
	readonly 'PerformanceTiming': false;
	readonly 'postMessage': true;
	readonly 'Promise': false;
	readonly 'queueMicrotask': false;
	readonly 'ReadableByteStreamController': false;
	readonly 'ReadableStream': false;
	readonly 'ReadableStreamBYOBReader': false;
	readonly 'ReadableStreamBYOBRequest': false;
	readonly 'ReadableStreamDefaultController': false;
	readonly 'ReadableStreamDefaultReader': false;
	readonly 'removeEventListener': false;
	readonly 'reportError': false;
	readonly 'Request': false;
	readonly 'Response': false;
	readonly 'self': true;
	readonly 'ServiceWorkerRegistration': false;
	readonly 'setInterval': false;
	readonly 'setTimeout': false;
	readonly 'SubtleCrypto': false;
	readonly 'TextDecoder': false;
	readonly 'TextDecoderStream': false;
	readonly 'TextEncoder': false;
	readonly 'TextEncoderStream': false;
	readonly 'TransformStream': false;
	readonly 'TransformStreamDefaultController': false;
	readonly 'URL': false;
	readonly 'URLSearchParams': false;
	readonly 'WebAssembly': false;
	readonly 'WebSocket': false;
	readonly 'Worker': false;
	readonly 'WorkerGlobalScope': false;
	readonly 'WritableStream': false;
	readonly 'WritableStreamDefaultController': false;
	readonly 'WritableStreamDefaultWriter': false;
	readonly 'XMLHttpRequest': false;
}

type GlobalsNode = {
	readonly '__dirname': false;
	readonly '__filename': false;
	readonly 'AbortController': false;
	readonly 'AbortSignal': false;
	readonly 'atob': false;
	readonly 'Blob': false;
	readonly 'BroadcastChannel': false;
	readonly 'btoa': false;
	readonly 'Buffer': false;
	readonly 'ByteLengthQueuingStrategy': false;
	readonly 'clearImmediate': false;
	readonly 'clearInterval': false;
	readonly 'clearTimeout': false;
	readonly 'CompressionStream': false;
	readonly 'console': false;
	readonly 'CountQueuingStrategy': false;
	readonly 'crypto': false;
	readonly 'Crypto': false;
	readonly 'CryptoKey': false;
	readonly 'CustomEvent': false;
	readonly 'DecompressionStream': false;
	readonly 'DOMException': false;
	readonly 'Event': false;
	readonly 'EventTarget': false;
	readonly 'exports': true;
	readonly 'fetch': false;
	readonly 'File': false;
	readonly 'FormData': false;
	readonly 'global': false;
	readonly 'Headers': false;
	readonly 'Intl': false;
	readonly 'MessageChannel': false;
	readonly 'MessageEvent': false;
	readonly 'MessagePort': false;
	readonly 'module': false;
	readonly 'performance': false;
	readonly 'PerformanceEntry': false;
	readonly 'PerformanceMark': false;
	readonly 'PerformanceMeasure': false;
	readonly 'PerformanceObserver': false;
	readonly 'PerformanceObserverEntryList': false;
	readonly 'PerformanceResourceTiming': false;
	readonly 'process': false;
	readonly 'queueMicrotask': false;
	readonly 'ReadableByteStreamController': false;
	readonly 'ReadableStream': false;
	readonly 'ReadableStreamBYOBReader': false;
	readonly 'ReadableStreamBYOBRequest': false;
	readonly 'ReadableStreamDefaultController': false;
	readonly 'ReadableStreamDefaultReader': false;
	readonly 'Request': false;
	readonly 'require': false;
	readonly 'Response': false;
	readonly 'setImmediate': false;
	readonly 'setInterval': false;
	readonly 'setTimeout': false;
	readonly 'structuredClone': false;
	readonly 'SubtleCrypto': false;
	readonly 'TextDecoder': false;
	readonly 'TextDecoderStream': false;
	readonly 'TextEncoder': false;
	readonly 'TextEncoderStream': false;
	readonly 'TransformStream': false;
	readonly 'TransformStreamDefaultController': false;
	readonly 'URL': false;
	readonly 'URLSearchParams': false;
	readonly 'WebAssembly': false;
	readonly 'WritableStream': false;
	readonly 'WritableStreamDefaultController': false;
	readonly 'WritableStreamDefaultWriter': false;
}

type GlobalsNodeBuiltin = {
	readonly 'AbortController': false;
	readonly 'AbortSignal': false;
	readonly 'atob': false;
	readonly 'Blob': false;
	readonly 'BroadcastChannel': false;
	readonly 'btoa': false;
	readonly 'Buffer': false;
	readonly 'ByteLengthQueuingStrategy': false;
	readonly 'clearImmediate': false;
	readonly 'clearInterval': false;
	readonly 'clearTimeout': false;
	readonly 'CompressionStream': false;
	readonly 'console': false;
	readonly 'CountQueuingStrategy': false;
	readonly 'crypto': false;
	readonly 'Crypto': false;
	readonly 'CryptoKey': false;
	readonly 'CustomEvent': false;
	readonly 'DecompressionStream': false;
	readonly 'DOMException': false;
	readonly 'Event': false;
	readonly 'EventTarget': false;
	readonly 'fetch': false;
	readonly 'File': false;
	readonly 'FormData': false;
	readonly 'global': false;
	readonly 'Headers': false;
	readonly 'Intl': false;
	readonly 'MessageChannel': false;
	readonly 'MessageEvent': false;
	readonly 'MessagePort': false;
	readonly 'performance': false;
	readonly 'PerformanceEntry': false;
	readonly 'PerformanceMark': false;
	readonly 'PerformanceMeasure': false;
	readonly 'PerformanceObserver': false;
	readonly 'PerformanceObserverEntryList': false;
	readonly 'PerformanceResourceTiming': false;
	readonly 'process': false;
	readonly 'queueMicrotask': false;
	readonly 'ReadableByteStreamController': false;
	readonly 'ReadableStream': false;
	readonly 'ReadableStreamBYOBReader': false;
	readonly 'ReadableStreamBYOBRequest': false;
	readonly 'ReadableStreamDefaultController': false;
	readonly 'ReadableStreamDefaultReader': false;
	readonly 'Request': false;
	readonly 'Response': false;
	readonly 'setImmediate': false;
	readonly 'setInterval': false;
	readonly 'setTimeout': false;
	readonly 'structuredClone': false;
	readonly 'SubtleCrypto': false;
	readonly 'TextDecoder': false;
	readonly 'TextDecoderStream': false;
	readonly 'TextEncoder': false;
	readonly 'TextEncoderStream': false;
	readonly 'TransformStream': false;
	readonly 'TransformStreamDefaultController': false;
	readonly 'URL': false;
	readonly 'URLSearchParams': false;
	readonly 'WebAssembly': false;
	readonly 'WritableStream': false;
	readonly 'WritableStreamDefaultController': false;
	readonly 'WritableStreamDefaultWriter': false;
}

type GlobalsCommonjs = {
	readonly 'exports': true;
	readonly 'global': false;
	readonly 'module': false;
	readonly 'require': false;
}

type GlobalsAmd = {
	readonly 'define': false;
	readonly 'require': false;
}

type GlobalsMocha = {
	readonly 'after': false;
	readonly 'afterEach': false;
	readonly 'before': false;
	readonly 'beforeEach': false;
	readonly 'context': false;
	readonly 'describe': false;
	readonly 'it': false;
	readonly 'mocha': false;
	readonly 'run': false;
	readonly 'setup': false;
	readonly 'specify': false;
	readonly 'suite': false;
	readonly 'suiteSetup': false;
	readonly 'suiteTeardown': false;
	readonly 'teardown': false;
	readonly 'test': false;
	readonly 'xcontext': false;
	readonly 'xdescribe': false;
	readonly 'xit': false;
	readonly 'xspecify': false;
}

type GlobalsJasmine = {
	readonly 'afterAll': false;
	readonly 'afterEach': false;
	readonly 'beforeAll': false;
	readonly 'beforeEach': false;
	readonly 'describe': false;
	readonly 'expect': false;
	readonly 'expectAsync': false;
	readonly 'fail': false;
	readonly 'fdescribe': false;
	readonly 'fit': false;
	readonly 'it': false;
	readonly 'jasmine': false;
	readonly 'pending': false;
	readonly 'runs': false;
	readonly 'spyOn': false;
	readonly 'spyOnAllFunctions': false;
	readonly 'spyOnProperty': false;
	readonly 'waits': false;
	readonly 'waitsFor': false;
	readonly 'xdescribe': false;
	readonly 'xit': false;
}

type GlobalsJest = {
	readonly 'afterAll': false;
	readonly 'afterEach': false;
	readonly 'beforeAll': false;
	readonly 'beforeEach': false;
	readonly 'describe': false;
	readonly 'expect': false;
	readonly 'fdescribe': false;
	readonly 'fit': false;
	readonly 'it': false;
	readonly 'jest': false;
	readonly 'pit': false;
	readonly 'require': false;
	readonly 'test': false;
	readonly 'xdescribe': false;
	readonly 'xit': false;
	readonly 'xtest': false;
}

type GlobalsQunit = {
	readonly 'asyncTest': false;
	readonly 'deepEqual': false;
	readonly 'equal': false;
	readonly 'expect': false;
	readonly 'module': false;
	readonly 'notDeepEqual': false;
	readonly 'notEqual': false;
	readonly 'notOk': false;
	readonly 'notPropEqual': false;
	readonly 'notStrictEqual': false;
	readonly 'ok': false;
	readonly 'propEqual': false;
	readonly 'QUnit': false;
	readonly 'raises': false;
	readonly 'start': false;
	readonly 'stop': false;
	readonly 'strictEqual': false;
	readonly 'test': false;
	readonly 'throws': false;
}

type GlobalsPhantomjs = {
	readonly 'console': true;
	readonly 'exports': true;
	readonly 'phantom': true;
	readonly 'require': true;
	readonly 'WebPage': true;
}

type GlobalsCouch = {
	readonly 'emit': false;
	readonly 'exports': false;
	readonly 'getRow': false;
	readonly 'log': false;
	readonly 'module': false;
	readonly 'provides': false;
	readonly 'require': false;
	readonly 'respond': false;
	readonly 'send': false;
	readonly 'start': false;
	readonly 'sum': false;
}

type GlobalsRhino = {
	readonly 'defineClass': false;
	readonly 'deserialize': false;
	readonly 'gc': false;
	readonly 'help': false;
	readonly 'importClass': false;
	readonly 'importPackage': false;
	readonly 'java': false;
	readonly 'load': false;
	readonly 'loadClass': false;
	readonly 'Packages': false;
	readonly 'print': false;
	readonly 'quit': false;
	readonly 'readFile': false;
	readonly 'readUrl': false;
	readonly 'runCommand': false;
	readonly 'seal': false;
	readonly 'serialize': false;
	readonly 'spawn': false;
	readonly 'sync': false;
	readonly 'toint32': false;
	readonly 'version': false;
}

type GlobalsNashorn = {
	readonly '__DIR__': false;
	readonly '__FILE__': false;
	readonly '__LINE__': false;
	readonly 'com': false;
	readonly 'edu': false;
	readonly 'exit': false;
	readonly 'java': false;
	readonly 'Java': false;
	readonly 'javafx': false;
	readonly 'JavaImporter': false;
	readonly 'javax': false;
	readonly 'JSAdapter': false;
	readonly 'load': false;
	readonly 'loadWithNewGlobal': false;
	readonly 'org': false;
	readonly 'Packages': false;
	readonly 'print': false;
	readonly 'quit': false;
}

type GlobalsWsh = {
	readonly 'ActiveXObject': false;
	readonly 'CollectGarbage': false;
	readonly 'Debug': false;
	readonly 'Enumerator': false;
	readonly 'GetObject': false;
	readonly 'RuntimeObject': false;
	readonly 'ScriptEngine': false;
	readonly 'ScriptEngineBuildVersion': false;
	readonly 'ScriptEngineMajorVersion': false;
	readonly 'ScriptEngineMinorVersion': false;
	readonly 'VBArray': false;
	readonly 'WScript': false;
	readonly 'WSH': false;
}

type GlobalsJquery = {
	readonly '$': false;
	readonly 'jQuery': false;
}

type GlobalsYui = {
	readonly 'YAHOO': false;
	readonly 'YAHOO_config': false;
	readonly 'YUI': false;
	readonly 'YUI_config': false;
}

type GlobalsShelljs = {
	readonly 'cat': false;
	readonly 'cd': false;
	readonly 'chmod': false;
	readonly 'config': false;
	readonly 'cp': false;
	readonly 'dirs': false;
	readonly 'echo': false;
	readonly 'env': false;
	readonly 'error': false;
	readonly 'exec': false;
	readonly 'exit': false;
	readonly 'find': false;
	readonly 'grep': false;
	readonly 'ln': false;
	readonly 'ls': false;
	readonly 'mkdir': false;
	readonly 'mv': false;
	readonly 'popd': false;
	readonly 'pushd': false;
	readonly 'pwd': false;
	readonly 'rm': false;
	readonly 'sed': false;
	readonly 'set': false;
	readonly 'target': false;
	readonly 'tempdir': false;
	readonly 'test': false;
	readonly 'touch': false;
	readonly 'which': false;
}

type GlobalsPrototypejs = {
	readonly '$': false;
	readonly '$$': false;
	readonly '$A': false;
	readonly '$break': false;
	readonly '$continue': false;
	readonly '$F': false;
	readonly '$H': false;
	readonly '$R': false;
	readonly '$w': false;
	readonly 'Abstract': false;
	readonly 'Ajax': false;
	readonly 'Autocompleter': false;
	readonly 'Builder': false;
	readonly 'Class': false;
	readonly 'Control': false;
	readonly 'Draggable': false;
	readonly 'Draggables': false;
	readonly 'Droppables': false;
	readonly 'Effect': false;
	readonly 'Element': false;
	readonly 'Enumerable': false;
	readonly 'Event': false;
	readonly 'Field': false;
	readonly 'Form': false;
	readonly 'Hash': false;
	readonly 'Insertion': false;
	readonly 'ObjectRange': false;
	readonly 'PeriodicalExecuter': false;
	readonly 'Position': false;
	readonly 'Prototype': false;
	readonly 'Scriptaculous': false;
	readonly 'Selector': false;
	readonly 'Sortable': false;
	readonly 'SortableObserver': false;
	readonly 'Sound': false;
	readonly 'Template': false;
	readonly 'Toggle': false;
	readonly 'Try': false;
}

type GlobalsMeteor = {
	readonly '$': false;
	readonly 'Accounts': false;
	readonly 'AccountsClient': false;
	readonly 'AccountsCommon': false;
	readonly 'AccountsServer': false;
	readonly 'App': false;
	readonly 'Assets': false;
	readonly 'Blaze': false;
	readonly 'check': false;
	readonly 'Cordova': false;
	readonly 'DDP': false;
	readonly 'DDPRateLimiter': false;
	readonly 'DDPServer': false;
	readonly 'Deps': false;
	readonly 'EJSON': false;
	readonly 'Email': false;
	readonly 'HTTP': false;
	readonly 'Log': false;
	readonly 'Match': false;
	readonly 'Meteor': false;
	readonly 'Mongo': false;
	readonly 'MongoInternals': false;
	readonly 'Npm': false;
	readonly 'Package': false;
	readonly 'Plugin': false;
	readonly 'process': false;
	readonly 'Random': false;
	readonly 'ReactiveDict': false;
	readonly 'ReactiveVar': false;
	readonly 'Router': false;
	readonly 'ServiceConfiguration': false;
	readonly 'Session': false;
	readonly 'share': false;
	readonly 'Spacebars': false;
	readonly 'Template': false;
	readonly 'Tinytest': false;
	readonly 'Tracker': false;
	readonly 'UI': false;
	readonly 'Utils': false;
	readonly 'WebApp': false;
	readonly 'WebAppInternals': false;
}

type GlobalsMongo = {
	readonly '_isWindows': false;
	readonly '_rand': false;
	readonly 'BulkWriteResult': false;
	readonly 'cat': false;
	readonly 'cd': false;
	readonly 'connect': false;
	readonly 'db': false;
	readonly 'getHostName': false;
	readonly 'getMemInfo': false;
	readonly 'hostname': false;
	readonly 'ISODate': false;
	readonly 'listFiles': false;
	readonly 'load': false;
	readonly 'ls': false;
	readonly 'md5sumFile': false;
	readonly 'mkdir': false;
	readonly 'Mongo': false;
	readonly 'NumberInt': false;
	readonly 'NumberLong': false;
	readonly 'ObjectId': false;
	readonly 'PlanCache': false;
	readonly 'print': false;
	readonly 'printjson': false;
	readonly 'pwd': false;
	readonly 'quit': false;
	readonly 'removeFile': false;
	readonly 'rs': false;
	readonly 'sh': false;
	readonly 'UUID': false;
	readonly 'version': false;
	readonly 'WriteResult': false;
}

type GlobalsApplescript = {
	readonly '$': false;
	readonly 'Application': false;
	readonly 'Automation': false;
	readonly 'console': false;
	readonly 'delay': false;
	readonly 'Library': false;
	readonly 'ObjC': false;
	readonly 'ObjectSpecifier': false;
	readonly 'Path': false;
	readonly 'Progress': false;
	readonly 'Ref': false;
}

type GlobalsServiceworker = {
	readonly 'addEventListener': false;
	readonly 'applicationCache': false;
	readonly 'atob': false;
	readonly 'Blob': false;
	readonly 'BroadcastChannel': false;
	readonly 'btoa': false;
	readonly 'ByteLengthQueuingStrategy': false;
	readonly 'Cache': false;
	readonly 'caches': false;
	readonly 'CacheStorage': false;
	readonly 'clearInterval': false;
	readonly 'clearTimeout': false;
	readonly 'Client': false;
	readonly 'clients': false;
	readonly 'Clients': false;
	readonly 'close': true;
	readonly 'CompressionStream': false;
	readonly 'console': false;
	readonly 'CountQueuingStrategy': false;
	readonly 'crypto': false;
	readonly 'Crypto': false;
	readonly 'CryptoKey': false;
	readonly 'CustomEvent': false;
	readonly 'DecompressionStream': false;
	readonly 'ErrorEvent': false;
	readonly 'Event': false;
	readonly 'ExtendableEvent': false;
	readonly 'ExtendableMessageEvent': false;
	readonly 'fetch': false;
	readonly 'FetchEvent': false;
	readonly 'File': false;
	readonly 'FileReaderSync': false;
	readonly 'FormData': false;
	readonly 'Headers': false;
	readonly 'IDBCursor': false;
	readonly 'IDBCursorWithValue': false;
	readonly 'IDBDatabase': false;
	readonly 'IDBFactory': false;
	readonly 'IDBIndex': false;
	readonly 'IDBKeyRange': false;
	readonly 'IDBObjectStore': false;
	readonly 'IDBOpenDBRequest': false;
	readonly 'IDBRequest': false;
	readonly 'IDBTransaction': false;
	readonly 'IDBVersionChangeEvent': false;
	readonly 'ImageData': false;
	readonly 'importScripts': false;
	readonly 'indexedDB': false;
	readonly 'location': false;
	readonly 'MessageChannel': false;
	readonly 'MessageEvent': false;
	readonly 'MessagePort': false;
	readonly 'name': false;
	readonly 'navigator': false;
	readonly 'Notification': false;
	readonly 'onclose': true;
	readonly 'onconnect': true;
	readonly 'onerror': true;
	readonly 'onfetch': true;
	readonly 'oninstall': true;
	readonly 'onlanguagechange': true;
	readonly 'onmessage': true;
	readonly 'onmessageerror': true;
	readonly 'onnotificationclick': true;
	readonly 'onnotificationclose': true;
	readonly 'onoffline': true;
	readonly 'ononline': true;
	readonly 'onpush': true;
	readonly 'onpushsubscriptionchange': true;
	readonly 'onrejectionhandled': true;
	readonly 'onsync': true;
	readonly 'onunhandledrejection': true;
	readonly 'performance': false;
	readonly 'Performance': false;
	readonly 'PerformanceEntry': false;
	readonly 'PerformanceMark': false;
	readonly 'PerformanceMeasure': false;
	readonly 'PerformanceNavigation': false;
	readonly 'PerformanceObserver': false;
	readonly 'PerformanceObserverEntryList': false;
	readonly 'PerformanceResourceTiming': false;
	readonly 'PerformanceTiming': false;
	readonly 'postMessage': true;
	readonly 'Promise': false;
	readonly 'queueMicrotask': false;
	readonly 'ReadableByteStreamController': false;
	readonly 'ReadableStream': false;
	readonly 'ReadableStreamBYOBReader': false;
	readonly 'ReadableStreamBYOBRequest': false;
	readonly 'ReadableStreamDefaultController': false;
	readonly 'ReadableStreamDefaultReader': false;
	readonly 'registration': false;
	readonly 'removeEventListener': false;
	readonly 'Request': false;
	readonly 'Response': false;
	readonly 'self': false;
	readonly 'ServiceWorker': false;
	readonly 'ServiceWorkerContainer': false;
	readonly 'ServiceWorkerGlobalScope': false;
	readonly 'ServiceWorkerMessageEvent': false;
	readonly 'ServiceWorkerRegistration': false;
	readonly 'setInterval': false;
	readonly 'setTimeout': false;
	readonly 'skipWaiting': false;
	readonly 'SubtleCrypto': false;
	readonly 'TextDecoder': false;
	readonly 'TextDecoderStream': false;
	readonly 'TextEncoder': false;
	readonly 'TextEncoderStream': false;
	readonly 'TransformStream': false;
	readonly 'TransformStreamDefaultController': false;
	readonly 'URL': false;
	readonly 'URLSearchParams': false;
	readonly 'WebAssembly': false;
	readonly 'WebSocket': false;
	readonly 'WindowClient': false;
	readonly 'Worker': false;
	readonly 'WorkerGlobalScope': false;
	readonly 'WritableStream': false;
	readonly 'WritableStreamDefaultController': false;
	readonly 'WritableStreamDefaultWriter': false;
	readonly 'XMLHttpRequest': false;
}

type GlobalsAtomtest = {
	readonly 'advanceClock': false;
	readonly 'atom': false;
	readonly 'fakeClearInterval': false;
	readonly 'fakeClearTimeout': false;
	readonly 'fakeSetInterval': false;
	readonly 'fakeSetTimeout': false;
	readonly 'resetTimeouts': false;
	readonly 'waitsForPromise': false;
}

type GlobalsEmbertest = {
	readonly 'andThen': false;
	readonly 'click': false;
	readonly 'currentPath': false;
	readonly 'currentRouteName': false;
	readonly 'currentURL': false;
	readonly 'fillIn': false;
	readonly 'find': false;
	readonly 'findAll': false;
	readonly 'findWithAssert': false;
	readonly 'keyEvent': false;
	readonly 'pauseTest': false;
	readonly 'resumeTest': false;
	readonly 'triggerEvent': false;
	readonly 'visit': false;
	readonly 'wait': false;
}

type GlobalsProtractor = {
	readonly '$': false;
	readonly '$$': false;
	readonly 'browser': false;
	readonly 'by': false;
	readonly 'By': false;
	readonly 'DartObject': false;
	readonly 'element': false;
	readonly 'protractor': false;
}

type GlobalsSharednodebrowser = {
	readonly 'AbortController': false;
	readonly 'AbortSignal': false;
	readonly 'atob': false;
	readonly 'Blob': false;
	readonly 'BroadcastChannel': false;
	readonly 'btoa': false;
	readonly 'ByteLengthQueuingStrategy': false;
	readonly 'clearInterval': false;
	readonly 'clearTimeout': false;
	readonly 'CompressionStream': false;
	readonly 'console': false;
	readonly 'CountQueuingStrategy': false;
	readonly 'crypto': false;
	readonly 'Crypto': false;
	readonly 'CryptoKey': false;
	readonly 'CustomEvent': false;
	readonly 'DecompressionStream': false;
	readonly 'DOMException': false;
	readonly 'Event': false;
	readonly 'EventTarget': false;
	readonly 'fetch': false;
	readonly 'File': false;
	readonly 'FormData': false;
	readonly 'Headers': false;
	readonly 'Intl': false;
	readonly 'MessageChannel': false;
	readonly 'MessageEvent': false;
	readonly 'MessagePort': false;
	readonly 'performance': false;
	readonly 'PerformanceEntry': false;
	readonly 'PerformanceMark': false;
	readonly 'PerformanceMeasure': false;
	readonly 'PerformanceObserver': false;
	readonly 'PerformanceObserverEntryList': false;
	readonly 'PerformanceResourceTiming': false;
	readonly 'queueMicrotask': false;
	readonly 'ReadableByteStreamController': false;
	readonly 'ReadableStream': false;
	readonly 'ReadableStreamBYOBReader': false;
	readonly 'ReadableStreamBYOBRequest': false;
	readonly 'ReadableStreamDefaultController': false;
	readonly 'ReadableStreamDefaultReader': false;
	readonly 'Request': false;
	readonly 'Response': false;
	readonly 'setInterval': false;
	readonly 'setTimeout': false;
	readonly 'structuredClone': false;
	readonly 'SubtleCrypto': false;
	readonly 'TextDecoder': false;
	readonly 'TextDecoderStream': false;
	readonly 'TextEncoder': false;
	readonly 'TextEncoderStream': false;
	readonly 'TransformStream': false;
	readonly 'TransformStreamDefaultController': false;
	readonly 'URL': false;
	readonly 'URLSearchParams': false;
	readonly 'WebAssembly': false;
	readonly 'WritableStream': false;
	readonly 'WritableStreamDefaultController': false;
	readonly 'WritableStreamDefaultWriter': false;
}

type GlobalsWebextensions = {
	readonly 'browser': false;
	readonly 'chrome': false;
	readonly 'opr': false;
}

type GlobalsGreasemonkey = {
	readonly 'cloneInto': false;
	readonly 'createObjectIn': false;
	readonly 'exportFunction': false;
	readonly 'GM': false;
	readonly 'GM_addElement': false;
	readonly 'GM_addStyle': false;
	readonly 'GM_addValueChangeListener': false;
	readonly 'GM_deleteValue': false;
	readonly 'GM_download': false;
	readonly 'GM_getResourceText': false;
	readonly 'GM_getResourceURL': false;
	readonly 'GM_getTab': false;
	readonly 'GM_getTabs': false;
	readonly 'GM_getValue': false;
	readonly 'GM_info': false;
	readonly 'GM_listValues': false;
	readonly 'GM_log': false;
	readonly 'GM_notification': false;
	readonly 'GM_openInTab': false;
	readonly 'GM_registerMenuCommand': false;
	readonly 'GM_removeValueChangeListener': false;
	readonly 'GM_saveTab': false;
	readonly 'GM_setClipboard': false;
	readonly 'GM_setValue': false;
	readonly 'GM_unregisterMenuCommand': false;
	readonly 'GM_xmlhttpRequest': false;
	readonly 'unsafeWindow': false;
}

type GlobalsDevtools = {
	readonly '$': false;
	readonly '$_': false;
	readonly '$$': false;
	readonly '$0': false;
	readonly '$1': false;
	readonly '$2': false;
	readonly '$3': false;
	readonly '$4': false;
	readonly '$x': false;
	readonly 'chrome': false;
	readonly 'clear': false;
	readonly 'copy': false;
	readonly 'debug': false;
	readonly 'dir': false;
	readonly 'dirxml': false;
	readonly 'getEventListeners': false;
	readonly 'inspect': false;
	readonly 'keys': false;
	readonly 'monitor': false;
	readonly 'monitorEvents': false;
	readonly 'profile': false;
	readonly 'profileEnd': false;
	readonly 'queryObjects': false;
	readonly 'table': false;
	readonly 'undebug': false;
	readonly 'unmonitor': false;
	readonly 'unmonitorEvents': false;
	readonly 'values': false;
}

type Globals = {
	readonly 'builtin': GlobalsBuiltin;
	readonly 'es5': GlobalsEs5;
	readonly 'es2015': GlobalsEs2015;
	readonly 'es2017': GlobalsEs2017;
	readonly 'es2020': GlobalsEs2020;
	readonly 'es2021': GlobalsEs2021;
	readonly 'browser': GlobalsBrowser;
	readonly 'worker': GlobalsWorker;
	readonly 'node': GlobalsNode;
	readonly 'nodeBuiltin': GlobalsNodeBuiltin;
	readonly 'commonjs': GlobalsCommonjs;
	readonly 'amd': GlobalsAmd;
	readonly 'mocha': GlobalsMocha;
	readonly 'jasmine': GlobalsJasmine;
	readonly 'jest': GlobalsJest;
	readonly 'qunit': GlobalsQunit;
	readonly 'phantomjs': GlobalsPhantomjs;
	readonly 'couch': GlobalsCouch;
	readonly 'rhino': GlobalsRhino;
	readonly 'nashorn': GlobalsNashorn;
	readonly 'wsh': GlobalsWsh;
	readonly 'jquery': GlobalsJquery;
	readonly 'yui': GlobalsYui;
	readonly 'shelljs': GlobalsShelljs;
	readonly 'prototypejs': GlobalsPrototypejs;
	readonly 'meteor': GlobalsMeteor;
	readonly 'mongo': GlobalsMongo;
	readonly 'applescript': GlobalsApplescript;
	readonly 'serviceworker': GlobalsServiceworker;
	readonly 'atomtest': GlobalsAtomtest;
	readonly 'embertest': GlobalsEmbertest;
	readonly 'protractor': GlobalsProtractor;
	readonly 'shared-node-browser': GlobalsSharednodebrowser;
	readonly 'webextensions': GlobalsWebextensions;
	readonly 'greasemonkey': GlobalsGreasemonkey;
	readonly 'devtools': GlobalsDevtools;
}

declare const globals: Globals;

export = globals;
/**
 * @fileoverview Types for object-schema package.
 */

/**
 * Built-in validation strategies.
 */
export type BuiltInValidationStrategy =
	| "array"
	| "boolean"
	| "number"
	| "object"
	| "object?"
	| "string"
	| "string!";

/**
 * Built-in merge strategies.
 */
export type BuiltInMergeStrategy = "assign" | "overwrite" | "replace";

/**
 * Property definition.
 */
export interface PropertyDefinition {
	/**
	 * Indicates if the property is required.
	 */
	required: boolean;

	/**
	 * The other properties that must be present when this property is used.
	 */
	requires?: string[];

	/**
	 * The strategy to merge the property.
	 */
	merge: BuiltInMergeStrategy | ((target: any, source: any) => any);

	/**
	 * The strategy to validate the property.
	 */
	validate: BuiltInValidationStrategy | ((value: any) => void);

	/**
	 * The schema for the object value of this property.
	 */
	schema?: ObjectDefinition;
}

/**
 * Object definition.
 */
export type ObjectDefinition = Record<string, PropertyDefinition>;
export type ObjectDefinition = import("./types.ts").ObjectDefinition;
export type PropertyDefinition = import("./types.ts").PropertyDefinition;
/**
 * @fileoverview Merge Strategy
 */
/**
 * Container class for several different merge strategies.
 */
export class MergeStrategy {
    /**
     * Merges two keys by overwriting the first with the second.
     * @param {*} value1 The value from the first object key.
     * @param {*} value2 The value from the second object key.
     * @returns {*} The second value.
     */
    static overwrite(value1: any, value2: any): any;
    /**
     * Merges two keys by replacing the first with the second only if the
     * second is defined.
     * @param {*} value1 The value from the first object key.
     * @param {*} value2 The value from the second object key.
     * @returns {*} The second value if it is defined.
     */
    static replace(value1: any, value2: any): any;
    /**
     * Merges two properties by assigning properties from the second to the first.
     * @param {*} value1 The value from the first object key.
     * @param {*} value2 The value from the second object key.
     * @returns {*} A new object containing properties from both value1 and
     *      value2.
     */
    static assign(value1: any, value2: any): any;
}
/**
 * Represents an object validation/merging schema.
 */
export class ObjectSchema {
    /**
     * Creates a new instance.
     * @param {ObjectDefinition} definitions The schema definitions.
     */
    constructor(definitions: ObjectDefinition);
    /**
     * Determines if a strategy has been registered for the given object key.
     * @param {string} key The object key to find a strategy for.
     * @returns {boolean} True if the key has a strategy registered, false if not.
     */
    hasKey(key: string): boolean;
    /**
     * Merges objects together to create a new object comprised of the keys
     * of the all objects. Keys are merged based on the each key's merge
     * strategy.
     * @param {...Object} objects The objects to merge.
     * @returns {Object} A new object with a mix of all objects' keys.
     * @throws {Error} If any object is invalid.
     */
    merge(...objects: any[]): any;
    /**
     * Validates an object's keys based on the validate strategy for each key.
     * @param {Object} object The object to validate.
     * @returns {void}
     * @throws {Error} When the object is invalid.
     */
    validate(object: any): void;
    #private;
}
/**
 * @fileoverview Validation Strategy
 */
/**
 * Container class for several different validation strategies.
 */
export class ValidationStrategy {
    /**
     * Validates that a value is an array.
     * @param {*} value The value to validate.
     * @returns {void}
     * @throws {TypeError} If the value is invalid.
     */
    static array(value: any): void;
    /**
     * Validates that a value is a boolean.
     * @param {*} value The value to validate.
     * @returns {void}
     * @throws {TypeError} If the value is invalid.
     */
    static boolean(value: any): void;
    /**
     * Validates that a value is a number.
     * @param {*} value The value to validate.
     * @returns {void}
     * @throws {TypeError} If the value is invalid.
     */
    static number(value: any): void;
    /**
     * Validates that a value is a object.
     * @param {*} value The value to validate.
     * @returns {void}
     * @throws {TypeError} If the value is invalid.
     */
    static object(value: any): void;
    /**
     * Validates that a value is a object or null.
     * @param {*} value The value to validate.
     * @returns {void}
     * @throws {TypeError} If the value is invalid.
     */
    static "object?"(value: any): void;
    /**
     * Validates that a value is a string.
     * @param {*} value The value to validate.
     * @returns {void}
     * @throws {TypeError} If the value is invalid.
     */
    static string(value: any): void;
    /**
     * Validates that a value is a non-empty string.
     * @param {*} value The value to validate.
     * @returns {void}
     * @throws {TypeError} If the value is invalid.
     */
    static "string!"(value: any): void;
}
/**
 * @fileoverview Types for object-schema package.
 */
/**
 * Built-in validation strategies.
 */
export type BuiltInValidationStrategy = "array" | "boolean" | "number" | "object" | "object?" | "string" | "string!";
/**
 * Built-in merge strategies.
 */
export type BuiltInMergeStrategy = "assign" | "overwrite" | "replace";
/**
 * Property definition.
 */
export interface PropertyDefinition {
    /**
     * Indicates if the property is required.
     */
    required: boolean;
    /**
     * The other properties that must be present when this property is used.
     */
    requires?: string[];
    /**
     * The strategy to merge the property.
     */
    merge: BuiltInMergeStrategy | ((target: any, source: any) => any);
    /**
     * The strategy to validate the property.
     */
    validate: BuiltInValidationStrategy | ((value: any) => void);
    /**
     * The schema for the object value of this property.
     */
    schema?: ObjectDefinition;
}
/**
 * Object definition.
 */
export type ObjectDefinition = Record<string, PropertyDefinition>;
/**
 * @fileoverview Types for object-schema package.
 */

/**
 * Built-in validation strategies.
 */
export type BuiltInValidationStrategy =
	| "array"
	| "boolean"
	| "number"
	| "object"
	| "object?"
	| "string"
	| "string!";

/**
 * Built-in merge strategies.
 */
export type BuiltInMergeStrategy = "assign" | "overwrite" | "replace";

/**
 * Property definition.
 */
export interface PropertyDefinition {
	/**
	 * Indicates if the property is required.
	 */
	required: boolean;

	/**
	 * The other properties that must be present when this property is used.
	 */
	requires?: string[];

	/**
	 * The strategy to merge the property.
	 */
	merge: BuiltInMergeStrategy | ((target: any, source: any) => any);

	/**
	 * The strategy to validate the property.
	 */
	validate: BuiltInValidationStrategy | ((value: any) => void);

	/**
	 * The schema for the object value of this property.
	 */
	schema?: ObjectDefinition;
}

/**
 * Object definition.
 */
export type ObjectDefinition = Record<string, PropertyDefinition>;
/**
 * @fileoverview Types for the plugin-kit package.
 * @author Nicholas C. Zakas
 */

export type StringConfig = Record<string, string | null>;
export type BooleanConfig = Record<string, boolean>;
export type VisitTraversalStep = import("@eslint/core").VisitTraversalStep;
export type CallTraversalStep = import("@eslint/core").CallTraversalStep;
export type TextSourceCode = import("@eslint/core").TextSourceCode;
export type TraversalStep = import("@eslint/core").TraversalStep;
export type SourceLocation = import("@eslint/core").SourceLocation;
export type SourceLocationWithOffset = import("@eslint/core").SourceLocationWithOffset;
export type SourceRange = import("@eslint/core").SourceRange;
export type IDirective = import("@eslint/core").Directive;
export type DirectiveType = import("@eslint/core").DirectiveType;
export type RuleConfig = import("@eslint/core").RuleConfig;
export type RulesConfig = import("@eslint/core").RulesConfig;
export type StringConfig = import("./types.ts").StringConfig;
export type BooleanConfig = import("./types.ts").BooleanConfig;
/**
 * A class to represent a step in the traversal process where a
 * method is called.
 * @implements {CallTraversalStep}
 */
export class CallMethodStep implements CallTraversalStep {
    /**
     * Creates a new instance.
     * @param {Object} options The options for the step.
     * @param {string} options.target The target of the step.
     * @param {Array<any>} options.args The arguments of the step.
     */
    constructor({ target, args }: {
        target: string;
        args: Array<any>;
    });
    /**
     * The type of the step.
     * @type {"call"}
     * @readonly
     */
    readonly type: "call";
    /**
     * The kind of the step. Represents the same data as the `type` property
     * but it's a number for performance.
     * @type {2}
     * @readonly
     */
    readonly kind: 2;
    /**
     * The name of the method to call.
     * @type {string}
     */
    target: string;
    /**
     * The arguments to pass to the method.
     * @type {Array<any>}
     */
    args: Array<any>;
}
/**
 * Object to parse ESLint configuration comments.
 */
export class ConfigCommentParser {
    /**
     * Parses a list of "name:string_value" or/and "name" options divided by comma or
     * whitespace. Used for "global" comments.
     * @param {string} string The string to parse.
     * @returns {StringConfig} Result map object of names and string values, or null values if no value was provided.
     */
    parseStringConfig(string: string): StringConfig;
    /**
     * Parses a JSON-like config.
     * @param {string} string The string to parse.
     * @returns {({ok: true, config: RulesConfig}|{ok: false, error: {message: string}})} Result map object
     */
    parseJSONLikeConfig(string: string): ({
        ok: true;
        config: RulesConfig;
    } | {
        ok: false;
        error: {
            message: string;
        };
    });
    /**
     * Parses a config of values separated by comma.
     * @param {string} string The string to parse.
     * @returns {BooleanConfig} Result map of values and true values
     */
    parseListConfig(string: string): BooleanConfig;
    /**
     * Parses a directive comment into directive text and value.
     * @param {string} string The string with the directive to be parsed.
     * @returns {DirectiveComment|undefined} The parsed directive or `undefined` if the directive is invalid.
     */
    parseDirective(string: string): DirectiveComment | undefined;
    #private;
}
/**
 * A class to represent a directive comment.
 * @implements {IDirective}
 */
export class Directive implements IDirective {
    /**
     * Creates a new instance.
     * @param {Object} options The options for the directive.
     * @param {"disable"|"enable"|"disable-next-line"|"disable-line"} options.type The type of directive.
     * @param {unknown} options.node The node representing the directive.
     * @param {string} options.value The value of the directive.
     * @param {string} options.justification The justification for the directive.
     */
    constructor({ type, node, value, justification }: {
        type: "disable" | "enable" | "disable-next-line" | "disable-line";
        node: unknown;
        value: string;
        justification: string;
    });
    /**
     * The type of directive.
     * @type {DirectiveType}
     * @readonly
     */
    readonly type: DirectiveType;
    /**
     * The node representing the directive.
     * @type {unknown}
     * @readonly
     */
    readonly node: unknown;
    /**
     * Everything after the "eslint-disable" portion of the directive,
     * but before the "--" that indicates the justification.
     * @type {string}
     * @readonly
     */
    readonly value: string;
    /**
     * The justification for the directive.
     * @type {string}
     * @readonly
     */
    readonly justification: string;
}
/**
 * Source Code Base Object
 * @implements {TextSourceCode}
 */
export class TextSourceCodeBase implements TextSourceCode {
    /**
     * Creates a new instance.
     * @param {Object} options The options for the instance.
     * @param {string} options.text The source code text.
     * @param {object} options.ast The root AST node.
     * @param {RegExp} [options.lineEndingPattern] The pattern to match lineEndings in the source code.
     */
    constructor({ text, ast, lineEndingPattern }: {
        text: string;
        ast: object;
        lineEndingPattern?: RegExp;
    });
    /**
     * The AST of the source code.
     * @type {object}
     */
    ast: object;
    /**
     * The text of the source code.
     * @type {string}
     */
    text: string;
    /**
     * Returns the loc information for the given node or token.
     * @param {object} nodeOrToken The node or token to get the loc information for.
     * @returns {SourceLocation} The loc information for the node or token.
     */
    getLoc(nodeOrToken: object): SourceLocation;
    /**
     * Returns the range information for the given node or token.
     * @param {object} nodeOrToken The node or token to get the range information for.
     * @returns {SourceRange} The range information for the node or token.
     */
    getRange(nodeOrToken: object): SourceRange;
    /**
     * Returns the parent of the given node.
     * @param {object} node The node to get the parent of.
     * @returns {object|undefined} The parent of the node.
     */
    getParent(node: object): object | undefined;
    /**
     * Gets all the ancestors of a given node
     * @param {object} node The node
     * @returns {Array<object>} All the ancestor nodes in the AST, not including the provided node, starting
     * from the root node at index 0 and going inwards to the parent node.
     * @throws {TypeError} When `node` is missing.
     */
    getAncestors(node: object): Array<object>;
    /**
     * Gets the source code for the given node.
     * @param {object} [node] The AST node to get the text for.
     * @param {number} [beforeCount] The number of characters before the node to retrieve.
     * @param {number} [afterCount] The number of characters after the node to retrieve.
     * @returns {string} The text representing the AST node.
     * @public
     */
    public getText(node?: object, beforeCount?: number, afterCount?: number): string;
    /**
     * Gets the entire source text split into an array of lines.
     * @returns {Array<string>} The source text as an array of lines.
     * @public
     */
    public get lines(): string[];
    /**
     * Traverse the source code and return the steps that were taken.
     * @returns {Iterable<TraversalStep>} The steps that were taken while traversing the source code.
     */
    traverse(): Iterable<TraversalStep>;
    #private;
}
/**
 * A class to represent a step in the traversal process where a node is visited.
 * @implements {VisitTraversalStep}
 */
export class VisitNodeStep implements VisitTraversalStep {
    /**
     * Creates a new instance.
     * @param {Object} options The options for the step.
     * @param {object} options.target The target of the step.
     * @param {1|2} options.phase The phase of the step.
     * @param {Array<any>} options.args The arguments of the step.
     */
    constructor({ target, phase, args }: {
        target: object;
        phase: 1 | 2;
        args: Array<any>;
    });
    /**
     * The type of the step.
     * @type {"visit"}
     * @readonly
     */
    readonly type: "visit";
    /**
     * The kind of the step. Represents the same data as the `type` property
     * but it's a number for performance.
     * @type {1}
     * @readonly
     */
    readonly kind: 1;
    /**
     * The target of the step.
     * @type {object}
     */
    target: object;
    /**
     * The phase of the step.
     * @type {1|2}
     */
    phase: 1 | 2;
    /**
     * The arguments of the step.
     * @type {Array<any>}
     */
    args: Array<any>;
}
/**
 * Represents a directive comment.
 */
declare class DirectiveComment {
    /**
     * Creates a new directive comment.
     * @param {string} label The label of the directive.
     * @param {string} value The value of the directive.
     * @param {string} justification The justification of the directive.
     */
    constructor(label: string, value: string, justification: string);
    /**
     * The label of the directive, such as "eslint", "eslint-disable", etc.
     * @type {string}
     */
    label: string;
    /**
     * The value of the directive (the string after the label).
     * @type {string}
     */
    value: string;
    /**
     * The justification of the directive (the string after the --).
     * @type {string}
     */
    justification: string;
}
export {};
/**
 * @fileoverview Types for the plugin-kit package.
 * @author Nicholas C. Zakas
 */
export type StringConfig = Record<string, string | null>;
export type BooleanConfig = Record<string, boolean>;
/**
 * @fileoverview Types for the plugin-kit package.
 * @author Nicholas C. Zakas
 */

export type StringConfig = Record<string, string | null>;
export type BooleanConfig = Record<string, boolean>;
// Generated by dts-bundle v0.7.3

declare module "@eslint-community/regexpp" {
  import * as AST from "@eslint-community/regexpp/ast";
  import { RegExpParser } from "@eslint-community/regexpp/parser";
  import { RegExpValidator } from "@eslint-community/regexpp/validator";
  import { RegExpVisitor } from "@eslint-community/regexpp/visitor";
  export { RegExpSyntaxError } from "@eslint-community/regexpp/regexp-syntax-error";
  export { AST, RegExpParser, RegExpValidator };
  /**
   * Parse a given regular expression literal then make AST object.
   * @param source The source code to parse.
   * @param options The options to parse.
   * @returns The AST of the regular expression.
   */
  export function parseRegExpLiteral(
    source: RegExp | string,
    options?: RegExpParser.Options
  ): AST.RegExpLiteral;
  /**
   * Validate a given regular expression literal.
   * @param source The source code to validate.
   * @param options The options to validate.
   */
  export function validateRegExpLiteral(
    source: string,
    options?: RegExpValidator.Options
  ): void;
  export function visitRegExpAST(
    node: AST.Node,
    handlers: RegExpVisitor.Handlers
  ): void;
}

declare module "@eslint-community/regexpp/ast" {
  /**
   * The type which includes all nodes.
   */
  export type Node = BranchNode | LeafNode;
  /**
   * The type which includes all branch nodes.
   */
  export type BranchNode =
    | Alternative
    | CapturingGroup
    | CharacterClass
    | CharacterClassRange
    | ClassIntersection
    | ClassStringDisjunction
    | ClassSubtraction
    | ExpressionCharacterClass
    | Group
    | LookaroundAssertion
    | Pattern
    | Quantifier
    | RegExpLiteral
    | StringAlternative;
  /**
   * The type which includes all leaf nodes.
   */
  export type LeafNode =
    | Backreference
    | BoundaryAssertion
    | Character
    | CharacterSet
    | Flags;
  /**
   * The type which includes all atom nodes.
   */
  export type Element = Assertion | QuantifiableElement | Quantifier;
  /**
   * The type which includes all atom nodes that Quantifier node can have as children.
   */
  export type QuantifiableElement =
    | Backreference
    | CapturingGroup
    | Character
    | CharacterClass
    | CharacterSet
    | ExpressionCharacterClass
    | Group
    | LookaheadAssertion;
  /**
   * The type which includes all character class atom nodes.
   */
  export type CharacterClassElement =
    | ClassRangesCharacterClassElement
    | UnicodeSetsCharacterClassElement;
  export type ClassRangesCharacterClassElement =
    | Character
    | CharacterClassRange
    | CharacterUnicodePropertyCharacterSet
    | EscapeCharacterSet;
  export type UnicodeSetsCharacterClassElement =
    | Character
    | CharacterClassRange
    | ClassStringDisjunction
    | EscapeCharacterSet
    | ExpressionCharacterClass
    | UnicodePropertyCharacterSet
    | UnicodeSetsCharacterClass;
  /**
   * The type which defines common properties for all node types.
   */
  export interface NodeBase {
    /** The node type. */
    type: Node["type"];
    /** The parent node. */
    parent: Node["parent"];
    /** The 0-based index that this node starts. */
    start: number;
    /** The 0-based index that this node ends. */
    end: number;
    /** The raw text of this node. */
    raw: string;
  }
  /**
   * The root node.
   */
  export interface RegExpLiteral extends NodeBase {
    type: "RegExpLiteral";
    parent: null;
    pattern: Pattern;
    flags: Flags;
  }
  /**
   * The pattern.
   */
  export interface Pattern extends NodeBase {
    type: "Pattern";
    parent: RegExpLiteral | null;
    alternatives: Alternative[];
  }
  /**
   * The alternative.
   * E.g. `a|b`
   */
  export interface Alternative extends NodeBase {
    type: "Alternative";
    parent: CapturingGroup | Group | LookaroundAssertion | Pattern;
    elements: Element[];
  }
  /**
   * The uncapturing group.
   * E.g. `(?:ab)`
   */
  export interface Group extends NodeBase {
    type: "Group";
    parent: Alternative | Quantifier;
    alternatives: Alternative[];
  }
  /**
   * The capturing group.
   * E.g. `(ab)`, `(?<name>ab)`
   */
  export interface CapturingGroup extends NodeBase {
    type: "CapturingGroup";
    parent: Alternative | Quantifier;
    name: string | null;
    alternatives: Alternative[];
    references: Backreference[];
  }
  /**
   * The lookaround assertion.
   */
  export type LookaroundAssertion = LookaheadAssertion | LookbehindAssertion;
  /**
   * The lookahead assertion.
   * E.g. `(?=ab)`, `(?!ab)`
   */
  export interface LookaheadAssertion extends NodeBase {
    type: "Assertion";
    parent: Alternative | Quantifier;
    kind: "lookahead";
    negate: boolean;
    alternatives: Alternative[];
  }
  /**
   * The lookbehind assertion.
   * E.g. `(?<=ab)`, `(?<!ab)`
   */
  export interface LookbehindAssertion extends NodeBase {
    type: "Assertion";
    parent: Alternative;
    kind: "lookbehind";
    negate: boolean;
    alternatives: Alternative[];
  }
  /**
   * The quantifier.
   * E.g. `a?`, `a*`, `a+`, `a{1,2}`, `a??`, `a*?`, `a+?`, `a{1,2}?`
   */
  export interface Quantifier extends NodeBase {
    type: "Quantifier";
    parent: Alternative;
    min: number;
    max: number;
    greedy: boolean;
    element: QuantifiableElement;
  }
  /**
   * The character class.
   * E.g. `[ab]`, `[^ab]`
   */
  export type CharacterClass =
    | ClassRangesCharacterClass
    | UnicodeSetsCharacterClass;
  interface BaseCharacterClass extends NodeBase {
    type: "CharacterClass";
    parent:
      | Alternative
      | ClassIntersection
      | ClassSubtraction
      | Quantifier
      | UnicodeSetsCharacterClass;
    unicodeSets: boolean;
    negate: boolean;
    elements: CharacterClassElement[];
  }
  /**
   * The character class used in legacy (neither `u` nor `v` flag) and Unicode mode (`u` flag).
   *
   * This character class is guaranteed to **not** contain strings.
   *
   * In Unicode sets mode (`v` flag), {@link UnicodeSetsCharacterClass} is used.
   */
  export interface ClassRangesCharacterClass extends BaseCharacterClass {
    parent: Alternative | Quantifier;
    unicodeSets: false;
    elements: ClassRangesCharacterClassElement[];
  }
  /**
   * The character class used in Unicode sets mode (`v` flag).
   *
   * This character class may contain strings.
   */
  export interface UnicodeSetsCharacterClass extends BaseCharacterClass {
    parent:
      | Alternative
      | ClassIntersection
      | ClassSubtraction
      | Quantifier
      | UnicodeSetsCharacterClass;
    unicodeSets: true;
    elements: UnicodeSetsCharacterClassElement[];
  }
  /**
   * The character class.
   * E.g. `[a-b]`
   */
  export interface CharacterClassRange extends NodeBase {
    type: "CharacterClassRange";
    parent: CharacterClass;
    min: Character;
    max: Character;
  }
  /**
   * The assertion.
   */
  export type Assertion = BoundaryAssertion | LookaroundAssertion;
  /**
   * The boundary assertion.
   */
  export type BoundaryAssertion = EdgeAssertion | WordBoundaryAssertion;
  /**
   * The edge boundary assertion.
   * E.g. `^`, `$`
   */
  export interface EdgeAssertion extends NodeBase {
    type: "Assertion";
    parent: Alternative | Quantifier;
    kind: "end" | "start";
  }
  /**
   * The word bondary assertion.
   * E.g. `\b`, `\B`
   */
  export interface WordBoundaryAssertion extends NodeBase {
    type: "Assertion";
    parent: Alternative | Quantifier;
    kind: "word";
    negate: boolean;
  }
  /**
   * The character set.
   */
  export type CharacterSet =
    | AnyCharacterSet
    | EscapeCharacterSet
    | UnicodePropertyCharacterSet;
  /**
   * The dot.
   * E.g. `.`
   */
  export interface AnyCharacterSet extends NodeBase {
    type: "CharacterSet";
    parent: Alternative | Quantifier;
    kind: "any";
  }
  /**
   * The character class escape.
   * E.g. `\d`, `\s`, `\w`, `\D`, `\S`, `\W`
   */
  export interface EscapeCharacterSet extends NodeBase {
    type: "CharacterSet";
    parent:
      | Alternative
      | CharacterClass
      | ClassIntersection
      | ClassSubtraction
      | Quantifier;
    kind: "digit" | "space" | "word";
    negate: boolean;
  }
  /**
   * The unicode property escape.
   * E.g. `\p{ASCII}`, `\P{ASCII}`, `\p{Script=Hiragana}`
   */
  export type UnicodePropertyCharacterSet =
    | CharacterUnicodePropertyCharacterSet
    | StringsUnicodePropertyCharacterSet;
  interface BaseUnicodePropertyCharacterSet extends NodeBase {
    type: "CharacterSet";
    parent:
      | Alternative
      | CharacterClass
      | ClassIntersection
      | ClassSubtraction
      | Quantifier;
    kind: "property";
    strings: boolean;
    key: string;
    value: string | null;
    negate: boolean;
  }
  export interface CharacterUnicodePropertyCharacterSet
    extends BaseUnicodePropertyCharacterSet {
    strings: false;
    value: string | null;
    negate: boolean;
  }
  /** StringsUnicodePropertyCharacterSet is Unicode property escape with property of strings. */
  export interface StringsUnicodePropertyCharacterSet
    extends BaseUnicodePropertyCharacterSet {
    parent:
      | Alternative
      | ClassIntersection
      | ClassSubtraction
      | Quantifier
      | UnicodeSetsCharacterClass;
    strings: true;
    value: null;
    negate: false;
  }
  /**
   * The expression character class.
   * E.g. `[a--b]`, `[a&&b]`,`[^a--b]`, `[^a&&b]`
   */
  export interface ExpressionCharacterClass extends NodeBase {
    type: "ExpressionCharacterClass";
    parent:
      | Alternative
      | ClassIntersection
      | ClassSubtraction
      | Quantifier
      | UnicodeSetsCharacterClass;
    negate: boolean;
    expression: ClassIntersection | ClassSubtraction;
  }
  export type ClassSetOperand =
    | Character
    | ClassStringDisjunction
    | EscapeCharacterSet
    | ExpressionCharacterClass
    | UnicodePropertyCharacterSet
    | UnicodeSetsCharacterClass;
  /**
   * The character class intersection.
   * E.g. `a&&b`
   */
  export interface ClassIntersection extends NodeBase {
    type: "ClassIntersection";
    parent: ClassIntersection | ExpressionCharacterClass;
    left: ClassIntersection | ClassSetOperand;
    right: ClassSetOperand;
  }
  /**
   * The character class subtraction.
   * E.g. `a--b`
   */
  export interface ClassSubtraction extends NodeBase {
    type: "ClassSubtraction";
    parent: ClassSubtraction | ExpressionCharacterClass;
    left: ClassSetOperand | ClassSubtraction;
    right: ClassSetOperand;
  }
  /**
   * The character class string disjunction.
   * E.g. `\q{a|b}`
   */
  export interface ClassStringDisjunction extends NodeBase {
    type: "ClassStringDisjunction";
    parent: ClassIntersection | ClassSubtraction | UnicodeSetsCharacterClass;
    alternatives: StringAlternative[];
  }
  /** StringAlternative is only used for `\q{alt}`({@link ClassStringDisjunction}). */
  export interface StringAlternative extends NodeBase {
    type: "StringAlternative";
    parent: ClassStringDisjunction;
    elements: Character[];
  }
  /**
   * The character.
   * This includes escape sequences which mean a character.
   * E.g. `a`, `あ`, `✿`, `\x65`, `\u0065`, `\u{65}`, `\/`
   */
  export interface Character extends NodeBase {
    type: "Character";
    parent:
      | Alternative
      | CharacterClass
      | CharacterClassRange
      | ClassIntersection
      | ClassSubtraction
      | Quantifier
      | StringAlternative;
    value: number;
  }
  /**
   * The backreference.
   * E.g. `\1`, `\k<name>`
   */
  export type Backreference = AmbiguousBackreference | UnambiguousBackreference;
  interface BaseBackreference extends NodeBase {
    type: "Backreference";
    parent: Alternative | Quantifier;
    ref: number | string;
    ambiguous: boolean;
    resolved: CapturingGroup | CapturingGroup[];
  }
  export interface AmbiguousBackreference extends BaseBackreference {
    ref: string;
    ambiguous: true;
    resolved: CapturingGroup[];
  }
  export interface UnambiguousBackreference extends BaseBackreference {
    ambiguous: false;
    resolved: CapturingGroup;
  }
  /**
   * The flags.
   */
  export interface Flags extends NodeBase {
    type: "Flags";
    parent: RegExpLiteral | null;
    dotAll: boolean;
    global: boolean;
    hasIndices: boolean;
    ignoreCase: boolean;
    multiline: boolean;
    sticky: boolean;
    unicode: boolean;
    unicodeSets: boolean;
  }
  export {};
}

declare module "@eslint-community/regexpp/parser" {
  import type {
    Flags,
    RegExpLiteral,
    Pattern,
  } from "@eslint-community/regexpp/ast";
  import type { EcmaVersion } from "@eslint-community/regexpp/ecma-versions";
  export namespace RegExpParser {
    /**
     * The options for RegExpParser construction.
     */
    interface Options {
      /**
       * The flag to disable Annex B syntax. Default is `false`.
       */
      strict?: boolean;
      /**
       * ECMAScript version. Default is `2025`.
       * - `2015` added `u` and `y` flags.
       * - `2018` added `s` flag, Named Capturing Group, Lookbehind Assertion,
       *   and Unicode Property Escape.
       * - `2019`, `2020`, and `2021` added more valid Unicode Property Escapes.
       * - `2022` added `d` flag.
       * - `2023` added more valid Unicode Property Escapes.
       * - `2024` added `v` flag.
       * - `2025` added duplicate named capturing groups.
       */
      ecmaVersion?: EcmaVersion;
    }
  }
  export class RegExpParser {
    /**
     * Initialize this parser.
     * @param options The options of parser.
     */
    constructor(options?: RegExpParser.Options);
    /**
     * Parse a regular expression literal. E.g. "/abc/g"
     * @param source The source code to parse.
     * @param start The start index in the source code.
     * @param end The end index in the source code.
     * @returns The AST of the given regular expression.
     */
    parseLiteral(source: string, start?: number, end?: number): RegExpLiteral;
    /**
     * Parse a regular expression flags. E.g. "gim"
     * @param source The source code to parse.
     * @param start The start index in the source code.
     * @param end The end index in the source code.
     * @returns The AST of the given flags.
     */
    parseFlags(source: string, start?: number, end?: number): Flags;
    /**
     * Parse a regular expression pattern. E.g. "abc"
     * @param source The source code to parse.
     * @param start The start index in the source code.
     * @param end The end index in the source code.
     * @param flags The flags.
     * @returns The AST of the given pattern.
     */
    parsePattern(
      source: string,
      start?: number,
      end?: number,
      flags?: {
        unicode?: boolean;
        unicodeSets?: boolean;
      }
    ): Pattern;
    /**
     * @deprecated Backward compatibility
     * Use object `flags` instead of boolean `uFlag`.
     *
     * @param source The source code to parse.
     * @param start The start index in the source code.
     * @param end The end index in the source code.
     * @param uFlag The flag to set unicode mode.
     * @returns The AST of the given pattern.
     */
    parsePattern(
      source: string,
      start?: number,
      end?: number,
      uFlag?: boolean
    ): Pattern;
  }
}

declare module "@eslint-community/regexpp/validator" {
  import type { EcmaVersion } from "@eslint-community/regexpp/ecma-versions";
  export type RegExpValidatorSourceContext = {
    readonly source: string;
    readonly start: number;
    readonly end: number;
    readonly kind: "flags" | "literal" | "pattern";
  };
  export namespace RegExpValidator {
    /**
     * The options for RegExpValidator construction.
     */
    interface Options {
      /**
       * The flag to disable Annex B syntax. Default is `false`.
       */
      strict?: boolean;
      /**
       * ECMAScript version. Default is `2025`.
       * - `2015` added `u` and `y` flags.
       * - `2018` added `s` flag, Named Capturing Group, Lookbehind Assertion,
       *   and Unicode Property Escape.
       * - `2019`, `2020`, and `2021` added more valid Unicode Property Escapes.
       * - `2022` added `d` flag.
       * - `2023` added more valid Unicode Property Escapes.
       * - `2024` added `v` flag.
       * - `2025` added duplicate named capturing groups.
       */
      ecmaVersion?: EcmaVersion;
      /**
       * A function that is called when the validator entered a RegExp literal.
       * @param start The 0-based index of the first character.
       */
      onLiteralEnter?: (start: number) => void;
      /**
       * A function that is called when the validator left a RegExp literal.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       */
      onLiteralLeave?: (start: number, end: number) => void;
      /**
       * A function that is called when the validator found flags.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       * @param flags.global `g` flag.
       * @param flags.ignoreCase `i` flag.
       * @param flags.multiline `m` flag.
       * @param flags.unicode `u` flag.
       * @param flags.sticky `y` flag.
       * @param flags.dotAll `s` flag.
       * @param flags.hasIndices `d` flag.
       * @param flags.unicodeSets `v` flag.
       */
      onRegExpFlags?: (
        start: number,
        end: number,
        flags: {
          global: boolean;
          ignoreCase: boolean;
          multiline: boolean;
          unicode: boolean;
          sticky: boolean;
          dotAll: boolean;
          hasIndices: boolean;
          unicodeSets: boolean;
        }
      ) => void;
      /**
       * A function that is called when the validator found flags.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       * @param global `g` flag.
       * @param ignoreCase `i` flag.
       * @param multiline `m` flag.
       * @param unicode `u` flag.
       * @param sticky `y` flag.
       * @param dotAll `s` flag.
       * @param hasIndices `d` flag.
       *
       * @deprecated Use `onRegExpFlags` instead.
       */
      onFlags?: (
        start: number,
        end: number,
        global: boolean,
        ignoreCase: boolean,
        multiline: boolean,
        unicode: boolean,
        sticky: boolean,
        dotAll: boolean,
        hasIndices: boolean
      ) => void;
      /**
       * A function that is called when the validator entered a pattern.
       * @param start The 0-based index of the first character.
       */
      onPatternEnter?: (start: number) => void;
      /**
       * A function that is called when the validator left a pattern.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       */
      onPatternLeave?: (start: number, end: number) => void;
      /**
       * A function that is called when the validator entered a disjunction.
       * @param start The 0-based index of the first character.
       */
      onDisjunctionEnter?: (start: number) => void;
      /**
       * A function that is called when the validator left a disjunction.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       */
      onDisjunctionLeave?: (start: number, end: number) => void;
      /**
       * A function that is called when the validator entered an alternative.
       * @param start The 0-based index of the first character.
       * @param index The 0-based index of alternatives in a disjunction.
       */
      onAlternativeEnter?: (start: number, index: number) => void;
      /**
       * A function that is called when the validator left an alternative.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       * @param index The 0-based index of alternatives in a disjunction.
       */
      onAlternativeLeave?: (start: number, end: number, index: number) => void;
      /**
       * A function that is called when the validator entered an uncapturing group.
       * @param start The 0-based index of the first character.
       */
      onGroupEnter?: (start: number) => void;
      /**
       * A function that is called when the validator left an uncapturing group.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       */
      onGroupLeave?: (start: number, end: number) => void;
      /**
       * A function that is called when the validator entered a capturing group.
       * @param start The 0-based index of the first character.
       * @param name The group name.
       */
      onCapturingGroupEnter?: (start: number, name: string | null) => void;
      /**
       * A function that is called when the validator left a capturing group.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       * @param name The group name.
       */
      onCapturingGroupLeave?: (
        start: number,
        end: number,
        name: string | null
      ) => void;
      /**
       * A function that is called when the validator found a quantifier.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       * @param min The minimum number of repeating.
       * @param max The maximum number of repeating.
       * @param greedy The flag to choose the longest matching.
       */
      onQuantifier?: (
        start: number,
        end: number,
        min: number,
        max: number,
        greedy: boolean
      ) => void;
      /**
       * A function that is called when the validator entered a lookahead/lookbehind assertion.
       * @param start The 0-based index of the first character.
       * @param kind The kind of the assertion.
       * @param negate The flag which represents that the assertion is negative.
       */
      onLookaroundAssertionEnter?: (
        start: number,
        kind: "lookahead" | "lookbehind",
        negate: boolean
      ) => void;
      /**
       * A function that is called when the validator left a lookahead/lookbehind assertion.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       * @param kind The kind of the assertion.
       * @param negate The flag which represents that the assertion is negative.
       */
      onLookaroundAssertionLeave?: (
        start: number,
        end: number,
        kind: "lookahead" | "lookbehind",
        negate: boolean
      ) => void;
      /**
       * A function that is called when the validator found an edge boundary assertion.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       * @param kind The kind of the assertion.
       */
      onEdgeAssertion?: (
        start: number,
        end: number,
        kind: "end" | "start"
      ) => void;
      /**
       * A function that is called when the validator found a word boundary assertion.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       * @param kind The kind of the assertion.
       * @param negate The flag which represents that the assertion is negative.
       */
      onWordBoundaryAssertion?: (
        start: number,
        end: number,
        kind: "word",
        negate: boolean
      ) => void;
      /**
       * A function that is called when the validator found a dot.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       * @param kind The kind of the character set.
       */
      onAnyCharacterSet?: (start: number, end: number, kind: "any") => void;
      /**
       * A function that is called when the validator found a character set escape.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       * @param kind The kind of the character set.
       * @param negate The flag which represents that the character set is negative.
       */
      onEscapeCharacterSet?: (
        start: number,
        end: number,
        kind: "digit" | "space" | "word",
        negate: boolean
      ) => void;
      /**
       * A function that is called when the validator found a Unicode proerty escape.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       * @param kind The kind of the character set.
       * @param key The property name.
       * @param value The property value.
       * @param negate The flag which represents that the character set is negative.
       * @param strings If true, the given property is property of strings.
       */
      onUnicodePropertyCharacterSet?: (
        start: number,
        end: number,
        kind: "property",
        key: string,
        value: string | null,
        negate: boolean,
        strings: boolean
      ) => void;
      /**
       * A function that is called when the validator found a character.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       * @param value The code point of the character.
       */
      onCharacter?: (start: number, end: number, value: number) => void;
      /**
       * A function that is called when the validator found a backreference.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       * @param ref The key of the referred capturing group.
       */
      onBackreference?: (
        start: number,
        end: number,
        ref: number | string
      ) => void;
      /**
       * A function that is called when the validator entered a character class.
       * @param start The 0-based index of the first character.
       * @param negate The flag which represents that the character class is negative.
       * @param unicodeSets `true` if unicodeSets mode.
       */
      onCharacterClassEnter?: (
        start: number,
        negate: boolean,
        unicodeSets: boolean
      ) => void;
      /**
       * A function that is called when the validator left a character class.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       * @param negate The flag which represents that the character class is negative.
       */
      onCharacterClassLeave?: (
        start: number,
        end: number,
        negate: boolean
      ) => void;
      /**
       * A function that is called when the validator found a character class range.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       * @param min The minimum code point of the range.
       * @param max The maximum code point of the range.
       */
      onCharacterClassRange?: (
        start: number,
        end: number,
        min: number,
        max: number
      ) => void;
      /**
       * A function that is called when the validator found a class intersection.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       */
      onClassIntersection?: (start: number, end: number) => void;
      /**
       * A function that is called when the validator found a class subtraction.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       */
      onClassSubtraction?: (start: number, end: number) => void;
      /**
       * A function that is called when the validator entered a class string disjunction.
       * @param start The 0-based index of the first character.
       */
      onClassStringDisjunctionEnter?: (start: number) => void;
      /**
       * A function that is called when the validator left a class string disjunction.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       */
      onClassStringDisjunctionLeave?: (start: number, end: number) => void;
      /**
       * A function that is called when the validator entered a string alternative.
       * @param start The 0-based index of the first character.
       * @param index The 0-based index of alternatives in a disjunction.
       */
      onStringAlternativeEnter?: (start: number, index: number) => void;
      /**
       * A function that is called when the validator left a string alternative.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       * @param index The 0-based index of alternatives in a disjunction.
       */
      onStringAlternativeLeave?: (
        start: number,
        end: number,
        index: number
      ) => void;
    }
  }
  /**
   * The regular expression validator.
   */
  export class RegExpValidator {
    /**
     * Initialize this validator.
     * @param options The options of validator.
     */
    constructor(options?: RegExpValidator.Options);
    /**
     * Validate a regular expression literal. E.g. "/abc/g"
     * @param source The source code to validate.
     * @param start The start index in the source code.
     * @param end The end index in the source code.
     */
    validateLiteral(source: string, start?: number, end?: number): void;
    /**
     * Validate a regular expression flags. E.g. "gim"
     * @param source The source code to validate.
     * @param start The start index in the source code.
     * @param end The end index in the source code.
     */
    validateFlags(source: string, start?: number, end?: number): void;
    /**
     * Validate a regular expression pattern. E.g. "abc"
     * @param source The source code to validate.
     * @param start The start index in the source code.
     * @param end The end index in the source code.
     * @param flags The flags.
     */
    validatePattern(
      source: string,
      start?: number,
      end?: number,
      flags?: {
        unicode?: boolean;
        unicodeSets?: boolean;
      }
    ): void;
    /**
     * @deprecated Backward compatibility
     * Use object `flags` instead of boolean `uFlag`.
     * @param source The source code to validate.
     * @param start The start index in the source code.
     * @param end The end index in the source code.
     * @param uFlag The flag to set unicode mode.
     */
    validatePattern(
      source: string,
      start?: number,
      end?: number,
      uFlag?: boolean
    ): void;
  }
}

declare module "@eslint-community/regexpp/visitor" {
  import type {
    Alternative,
    Assertion,
    Backreference,
    CapturingGroup,
    Character,
    CharacterClass,
    CharacterClassRange,
    CharacterSet,
    ClassIntersection,
    ClassStringDisjunction,
    ClassSubtraction,
    ExpressionCharacterClass,
    Flags,
    Group,
    Node,
    Pattern,
    Quantifier,
    RegExpLiteral,
    StringAlternative,
  } from "@eslint-community/regexpp/ast";
  /**
   * The visitor to walk on AST.
   */
  export class RegExpVisitor {
    /**
     * Initialize this visitor.
     * @param handlers Callbacks for each node.
     */
    constructor(handlers: RegExpVisitor.Handlers);
    /**
     * Visit a given node and descendant nodes.
     * @param node The root node to visit tree.
     */
    visit(node: Node): void;
  }
  export namespace RegExpVisitor {
    interface Handlers {
      onAlternativeEnter?: (node: Alternative) => void;
      onAlternativeLeave?: (node: Alternative) => void;
      onAssertionEnter?: (node: Assertion) => void;
      onAssertionLeave?: (node: Assertion) => void;
      onBackreferenceEnter?: (node: Backreference) => void;
      onBackreferenceLeave?: (node: Backreference) => void;
      onCapturingGroupEnter?: (node: CapturingGroup) => void;
      onCapturingGroupLeave?: (node: CapturingGroup) => void;
      onCharacterEnter?: (node: Character) => void;
      onCharacterLeave?: (node: Character) => void;
      onCharacterClassEnter?: (node: CharacterClass) => void;
      onCharacterClassLeave?: (node: CharacterClass) => void;
      onCharacterClassRangeEnter?: (node: CharacterClassRange) => void;
      onCharacterClassRangeLeave?: (node: CharacterClassRange) => void;
      onCharacterSetEnter?: (node: CharacterSet) => void;
      onCharacterSetLeave?: (node: CharacterSet) => void;
      onClassIntersectionEnter?: (node: ClassIntersection) => void;
      onClassIntersectionLeave?: (node: ClassIntersection) => void;
      onClassStringDisjunctionEnter?: (node: ClassStringDisjunction) => void;
      onClassStringDisjunctionLeave?: (node: ClassStringDisjunction) => void;
      onClassSubtractionEnter?: (node: ClassSubtraction) => void;
      onClassSubtractionLeave?: (node: ClassSubtraction) => void;
      onExpressionCharacterClassEnter?: (
        node: ExpressionCharacterClass
      ) => void;
      onExpressionCharacterClassLeave?: (
        node: ExpressionCharacterClass
      ) => void;
      onFlagsEnter?: (node: Flags) => void;
      onFlagsLeave?: (node: Flags) => void;
      onGroupEnter?: (node: Group) => void;
      onGroupLeave?: (node: Group) => void;
      onPatternEnter?: (node: Pattern) => void;
      onPatternLeave?: (node: Pattern) => void;
      onQuantifierEnter?: (node: Quantifier) => void;
      onQuantifierLeave?: (node: Quantifier) => void;
      onRegExpLiteralEnter?: (node: RegExpLiteral) => void;
      onRegExpLiteralLeave?: (node: RegExpLiteral) => void;
      onStringAlternativeEnter?: (node: StringAlternative) => void;
      onStringAlternativeLeave?: (node: StringAlternative) => void;
    }
  }
}

declare module "@eslint-community/regexpp/regexp-syntax-error" {
  import type { RegExpValidatorSourceContext } from "@eslint-community/regexpp/validator";
  export class RegExpSyntaxError extends SyntaxError {
    index: number;
    constructor(message: string, index: number);
  }
  export function newRegExpSyntaxError(
    srcCtx: RegExpValidatorSourceContext,
    flags: {
      unicode: boolean;
      unicodeSets: boolean;
    },
    index: number,
    message: string
  ): RegExpSyntaxError;
}

declare module "@eslint-community/regexpp/ecma-versions" {
  export type EcmaVersion =
    | 5
    | 2015
    | 2016
    | 2017
    | 2018
    | 2019
    | 2020
    | 2021
    | 2022
    | 2023
    | 2024
    | 2025;
  export const latestEcmaVersion = 2025;
}
export type IconFamily = "classic" | "duotone" | "sharp" | "sharp-duotone";
export type IconPrefix = "fas" | "fass" | "far" | "fasr" | "fal" | "fasl" | "fat" | "fast" | "fad" | "fasds" | "fab" | "fak" | "fakd";
export type CssStyleClass = "fa-solid" | "fa-regular" | "fa-light" | "fa-thin" | "fa-duotone" | "fa-brands";
export type IconStyle = "solid" | "regular" | "light" | "thin" | "duotone" | "brands";
export type IconPathData = string | string[]

export interface IconLookup {
  prefix: IconPrefix;
  // IconName is defined in the code that will be generated at build time and bundled with this file.
  iconName: IconName;
}

export interface IconDefinition extends IconLookup {
  icon: [
    number, // width
    number, // height
    string[], // ligatures
    string, // unicode
    IconPathData // svgPathData
  ];
}

export interface IconPack {
  [key: string]: IconDefinition;
}

export type IconName = '0' | 
  '00' | 
  '1' | 
  '100' | 
  '2' | 
  '3' | 
  '360-degrees' | 
  '4' | 
  '42-group' | 
  '5' | 
  '500px' | 
  '6' | 
  '7' | 
  '8' | 
  '9' | 
  'a' | 
  'abacus' | 
  'accent-grave' | 
  'accessible-icon' | 
  'accusoft' | 
  'acorn' | 
  'ad' | 
  'add' | 
  'address-book' | 
  'address-card' | 
  'adjust' | 
  'adn' | 
  'adversal' | 
  'affiliatetheme' | 
  'air-conditioner' | 
  'air-freshener' | 
  'airbnb' | 
  'airplay' | 
  'alarm-clock' | 
  'alarm-exclamation' | 
  'alarm-plus' | 
  'alarm-snooze' | 
  'album' | 
  'album-circle-plus' | 
  'album-circle-user' | 
  'album-collection' | 
  'album-collection-circle-plus' | 
  'album-collection-circle-user' | 
  'algolia' | 
  'alicorn' | 
  'alien' | 
  'alien-8bit' | 
  'alien-monster' | 
  'align-center' | 
  'align-justify' | 
  'align-left' | 
  'align-right' | 
  'align-slash' | 
  'alipay' | 
  'allergies' | 
  'alt' | 
  'amazon' | 
  'amazon-pay' | 
  'ambulance' | 
  'american-sign-language-interpreting' | 
  'amilia' | 
  'amp-guitar' | 
  'ampersand' | 
  'analytics' | 
  'anchor' | 
  'anchor-circle-check' | 
  'anchor-circle-exclamation' | 
  'anchor-circle-xmark' | 
  'anchor-lock' | 
  'android' | 
  'angel' | 
  'angellist' | 
  'angle' | 
  'angle-90' | 
  'angle-double-down' | 
  'angle-double-left' | 
  'angle-double-right' | 
  'angle-double-up' | 
  'angle-down' | 
  'angle-left' | 
  'angle-right' | 
  'angle-up' | 
  'angles-down' | 
  'angles-left' | 
  'angles-right' | 
  'angles-up' | 
  'angles-up-down' | 
  'angry' | 
  'angrycreative' | 
  'angular' | 
  'ankh' | 
  'ant' | 
  'apartment' | 
  'aperture' | 
  'apostrophe' | 
  'app-store' | 
  'app-store-ios' | 
  'apper' | 
  'apple' | 
  'apple-alt' | 
  'apple-core' | 
  'apple-crate' | 
  'apple-pay' | 
  'apple-whole' | 
  'archive' | 
  'archway' | 
  'area-chart' | 
  'arrow-alt-circle-down' | 
  'arrow-alt-circle-left' | 
  'arrow-alt-circle-right' | 
  'arrow-alt-circle-up' | 
  'arrow-alt-down' | 
  'arrow-alt-from-bottom' | 
  'arrow-alt-from-left' | 
  'arrow-alt-from-right' | 
  'arrow-alt-from-top' | 
  'arrow-alt-left' | 
  'arrow-alt-right' | 
  'arrow-alt-square-down' | 
  'arrow-alt-square-left' | 
  'arrow-alt-square-right' | 
  'arrow-alt-square-up' | 
  'arrow-alt-to-bottom' | 
  'arrow-alt-to-left' | 
  'arrow-alt-to-right' | 
  'arrow-alt-to-top' | 
  'arrow-alt-up' | 
  'arrow-circle-down' | 
  'arrow-circle-left' | 
  'arrow-circle-right' | 
  'arrow-circle-up' | 
  'arrow-down' | 
  'arrow-down-1-9' | 
  'arrow-down-9-1' | 
  'arrow-down-a-z' | 
  'arrow-down-arrow-up' | 
  'arrow-down-big-small' | 
  'arrow-down-from-arc' | 
  'arrow-down-from-bracket' | 
  'arrow-down-from-dotted-line' | 
  'arrow-down-from-line' | 
  'arrow-down-left' | 
  'arrow-down-left-and-arrow-up-right-to-center' | 
  'arrow-down-long' | 
  'arrow-down-right' | 
  'arrow-down-short-wide' | 
  'arrow-down-small-big' | 
  'arrow-down-square-triangle' | 
  'arrow-down-to-arc' | 
  'arrow-down-to-bracket' | 
  'arrow-down-to-dotted-line' | 
  'arrow-down-to-line' | 
  'arrow-down-to-square' | 
  'arrow-down-triangle-square' | 
  'arrow-down-up-across-line' | 
  'arrow-down-up-lock' | 
  'arrow-down-wide-short' | 
  'arrow-down-z-a' | 
  'arrow-from-bottom' | 
  'arrow-from-left' | 
  'arrow-from-right' | 
  'arrow-from-top' | 
  'arrow-left' | 
  'arrow-left-from-arc' | 
  'arrow-left-from-bracket' | 
  'arrow-left-from-line' | 
  'arrow-left-long' | 
  'arrow-left-long-to-line' | 
  'arrow-left-rotate' | 
  'arrow-left-to-arc' | 
  'arrow-left-to-bracket' | 
  'arrow-left-to-line' | 
  'arrow-pointer' | 
  'arrow-progress' | 
  'arrow-right' | 
  'arrow-right-arrow-left' | 
  'arrow-right-from-arc' | 
  'arrow-right-from-bracket' | 
  'arrow-right-from-file' | 
  'arrow-right-from-line' | 
  'arrow-right-long' | 
  'arrow-right-long-to-line' | 
  'arrow-right-rotate' | 
  'arrow-right-to-arc' | 
  'arrow-right-to-bracket' | 
  'arrow-right-to-city' | 
  'arrow-right-to-file' | 
  'arrow-right-to-line' | 
  'arrow-rotate-back' | 
  'arrow-rotate-backward' | 
  'arrow-rotate-forward' | 
  'arrow-rotate-left' | 
  'arrow-rotate-right' | 
  'arrow-square-down' | 
  'arrow-square-left' | 
  'arrow-square-right' | 
  'arrow-square-up' | 
  'arrow-to-bottom' | 
  'arrow-to-left' | 
  'arrow-to-right' | 
  'arrow-to-top' | 
  'arrow-trend-down' | 
  'arrow-trend-up' | 
  'arrow-turn-down' | 
  'arrow-turn-down-left' | 
  'arrow-turn-down-right' | 
  'arrow-turn-left' | 
  'arrow-turn-left-down' | 
  'arrow-turn-left-up' | 
  'arrow-turn-right' | 
  'arrow-turn-up' | 
  'arrow-up' | 
  'arrow-up-1-9' | 
  'arrow-up-9-1' | 
  'arrow-up-a-z' | 
  'arrow-up-arrow-down' | 
  'arrow-up-big-small' | 
  'arrow-up-from-arc' | 
  'arrow-up-from-bracket' | 
  'arrow-up-from-dotted-line' | 
  'arrow-up-from-ground-water' | 
  'arrow-up-from-line' | 
  'arrow-up-from-square' | 
  'arrow-up-from-water-pump' | 
  'arrow-up-left' | 
  'arrow-up-left-from-circle' | 
  'arrow-up-long' | 
  'arrow-up-right' | 
  'arrow-up-right-and-arrow-down-left-from-center' | 
  'arrow-up-right-dots' | 
  'arrow-up-right-from-square' | 
  'arrow-up-short-wide' | 
  'arrow-up-small-big' | 
  'arrow-up-square-triangle' | 
  'arrow-up-to-arc' | 
  'arrow-up-to-bracket' | 
  'arrow-up-to-dotted-line' | 
  'arrow-up-to-line' | 
  'arrow-up-triangle-square' | 
  'arrow-up-wide-short' | 
  'arrow-up-z-a' | 
  'arrows' | 
  'arrows-alt' | 
  'arrows-alt-h' | 
  'arrows-alt-v' | 
  'arrows-cross' | 
  'arrows-down-to-line' | 
  'arrows-down-to-people' | 
  'arrows-from-dotted-line' | 
  'arrows-from-line' | 
  'arrows-h' | 
  'arrows-left-right' | 
  'arrows-left-right-to-line' | 
  'arrows-maximize' | 
  'arrows-minimize' | 
  'arrows-repeat' | 
  'arrows-repeat-1' | 
  'arrows-retweet' | 
  'arrows-rotate' | 
  'arrows-rotate-reverse' | 
  'arrows-spin' | 
  'arrows-split-up-and-left' | 
  'arrows-to-circle' | 
  'arrows-to-dot' | 
  'arrows-to-dotted-line' | 
  'arrows-to-eye' | 
  'arrows-to-line' | 
  'arrows-turn-right' | 
  'arrows-turn-to-dots' | 
  'arrows-up-down' | 
  'arrows-up-down-left-right' | 
  'arrows-up-to-line' | 
  'arrows-v' | 
  'artstation' | 
  'asl-interpreting' | 
  'assistive-listening-systems' | 
  'asterisk' | 
  'asymmetrik' | 
  'at' | 
  'atlas' | 
  'atlassian' | 
  'atom' | 
  'atom-alt' | 
  'atom-simple' | 
  'audible' | 
  'audio-description' | 
  'audio-description-slash' | 
  'austral-sign' | 
  'automobile' | 
  'autoprefixer' | 
  'avianex' | 
  'aviato' | 
  'avocado' | 
  'award' | 
  'award-simple' | 
  'aws' | 
  'axe' | 
  'axe-battle' | 
  'b' | 
  'baby' | 
  'baby-carriage' | 
  'backpack' | 
  'backspace' | 
  'backward' | 
  'backward-fast' | 
  'backward-step' | 
  'bacon' | 
  'bacteria' | 
  'bacterium' | 
  'badge' | 
  'badge-check' | 
  'badge-dollar' | 
  'badge-percent' | 
  'badge-sheriff' | 
  'badger-honey' | 
  'badminton' | 
  'bag-seedling' | 
  'bag-shopping' | 
  'bag-shopping-minus' | 
  'bag-shopping-plus' | 
  'bagel' | 
  'bags-shopping' | 
  'baguette' | 
  'bahai' | 
  'baht-sign' | 
  'balance-scale' | 
  'balance-scale-left' | 
  'balance-scale-right' | 
  'ball-pile' | 
  'balloon' | 
  'balloons' | 
  'ballot' | 
  'ballot-check' | 
  'ban' | 
  'ban-bug' | 
  'ban-parking' | 
  'ban-smoking' | 
  'banana' | 
  'band-aid' | 
  'bandage' | 
  'bandcamp' | 
  'bangladeshi-taka-sign' | 
  'banjo' | 
  'bank' | 
  'bar-chart' | 
  'barcode' | 
  'barcode-alt' | 
  'barcode-read' | 
  'barcode-scan' | 
  'barn-silo' | 
  'bars' | 
  'bars-filter' | 
  'bars-progress' | 
  'bars-sort' | 
  'bars-staggered' | 
  'baseball' | 
  'baseball-ball' | 
  'baseball-bat-ball' | 
  'basket-shopping' | 
  'basket-shopping-minus' | 
  'basket-shopping-plus' | 
  'basket-shopping-simple' | 
  'basketball' | 
  'basketball-ball' | 
  'basketball-hoop' | 
  'bat' | 
  'bath' | 
  'bathtub' | 
  'battery' | 
  'battery-bolt' | 
  'battery-car' | 
  'battery-empty' | 
  'battery-exclamation' | 
  'battery-full' | 
  'battery-half' | 
  'battery-low' | 
  'battery-quarter' | 
  'battery-slash' | 
  'battery-three-quarters' | 
  'battery0' | 
  'battery1' | 
  'battery2' | 
  'battery3' | 
  'battery4' | 
  'battery5' | 
  'battle-net' | 
  'bed' | 
  'bed-alt' | 
  'bed-bunk' | 
  'bed-empty' | 
  'bed-front' | 
  'bed-pulse' | 
  'bee' | 
  'beer' | 
  'beer-foam' | 
  'beer-mug' | 
  'beer-mug-empty' | 
  'behance' | 
  'behance-square' | 
  'bell' | 
  'bell-concierge' | 
  'bell-exclamation' | 
  'bell-on' | 
  'bell-plus' | 
  'bell-ring' | 
  'bell-school' | 
  'bell-school-slash' | 
  'bell-slash' | 
  'bells' | 
  'bench-tree' | 
  'betamax' | 
  'bezier-curve' | 
  'bible' | 
  'bicycle' | 
  'biking' | 
  'biking-mountain' | 
  'bilibili' | 
  'billboard' | 
  'bimobject' | 
  'bin-bottles' | 
  'bin-bottles-recycle' | 
  'bin-recycle' | 
  'binary' | 
  'binary-circle-check' | 
  'binary-lock' | 
  'binary-slash' | 
  'binoculars' | 
  'biohazard' | 
  'bird' | 
  'birthday-cake' | 
  'bitbucket' | 
  'bitcoin' | 
  'bitcoin-sign' | 
  'bity' | 
  'black-tie' | 
  'blackberry' | 
  'blackboard' | 
  'blanket' | 
  'blanket-fire' | 
  'blender' | 
  'blender-phone' | 
  'blind' | 
  'blinds' | 
  'blinds-open' | 
  'blinds-raised' | 
  'block' | 
  'block-brick' | 
  'block-brick-fire' | 
  'block-question' | 
  'block-quote' | 
  'blog' | 
  'blogger' | 
  'blogger-b' | 
  'blueberries' | 
  'bluesky' | 
  'bluetooth' | 
  'bluetooth-b' | 
  'bold' | 
  'bolt' | 
  'bolt-auto' | 
  'bolt-lightning' | 
  'bolt-slash' | 
  'bomb' | 
  'bone' | 
  'bone-break' | 
  'bong' | 
  'book' | 
  'book-alt' | 
  'book-arrow-right' | 
  'book-arrow-up' | 
  'book-atlas' | 
  'book-bible' | 
  'book-blank' | 
  'book-bookmark' | 
  'book-circle' | 
  'book-circle-arrow-right' | 
  'book-circle-arrow-up' | 
  'book-copy' | 
  'book-dead' | 
  'book-font' | 
  'book-heart' | 
  'book-journal-whills' | 
  'book-law' | 
  'book-medical' | 
  'book-open' | 
  'book-open-alt' | 
  'book-open-cover' | 
  'book-open-reader' | 
  'book-quran' | 
  'book-reader' | 
  'book-section' | 
  'book-skull' | 
  'book-sparkles' | 
  'book-spells' | 
  'book-tanakh' | 
  'book-user' | 
  'bookmark' | 
  'bookmark-circle' | 
  'bookmark-slash' | 
  'books' | 
  'books-medical' | 
  'boombox' | 
  'boot' | 
  'boot-heeled' | 
  'booth-curtain' | 
  'bootstrap' | 
  'border-all' | 
  'border-bottom' | 
  'border-bottom-right' | 
  'border-center-h' | 
  'border-center-v' | 
  'border-inner' | 
  'border-left' | 
  'border-none' | 
  'border-outer' | 
  'border-right' | 
  'border-style' | 
  'border-style-alt' | 
  'border-top' | 
  'border-top-left' | 
  'bore-hole' | 
  'bots' | 
  'bottle-baby' | 
  'bottle-droplet' | 
  'bottle-water' | 
  'bow-arrow' | 
  'bowl-chopsticks' | 
  'bowl-chopsticks-noodles' | 
  'bowl-food' | 
  'bowl-hot' | 
  'bowl-rice' | 
  'bowl-salad' | 
  'bowl-scoop' | 
  'bowl-scoops' | 
  'bowl-shaved-ice' | 
  'bowl-soft-serve' | 
  'bowl-spoon' | 
  'bowling-ball' | 
  'bowling-ball-pin' | 
  'bowling-pins' | 
  'box' | 
  'box-alt' | 
  'box-archive' | 
  'box-ballot' | 
  'box-check' | 
  'box-circle-check' | 
  'box-dollar' | 
  'box-fragile' | 
  'box-full' | 
  'box-heart' | 
  'box-open' | 
  'box-open-full' | 
  'box-taped' | 
  'box-tissue' | 
  'box-up' | 
  'box-usd' | 
  'boxes' | 
  'boxes-alt' | 
  'boxes-packing' | 
  'boxes-stacked' | 
  'boxing-glove' | 
  'bracket' | 
  'bracket-curly' | 
  'bracket-curly-left' | 
  'bracket-curly-right' | 
  'bracket-left' | 
  'bracket-round' | 
  'bracket-round-right' | 
  'bracket-square' | 
  'bracket-square-right' | 
  'brackets' | 
  'brackets-curly' | 
  'brackets-round' | 
  'brackets-square' | 
  'braille' | 
  'brain' | 
  'brain-arrow-curved-right' | 
  'brain-circuit' | 
  'brake-warning' | 
  'brave' | 
  'brave-reverse' | 
  'brazilian-real-sign' | 
  'bread-loaf' | 
  'bread-slice' | 
  'bread-slice-butter' | 
  'bridge' | 
  'bridge-circle-check' | 
  'bridge-circle-exclamation' | 
  'bridge-circle-xmark' | 
  'bridge-lock' | 
  'bridge-suspension' | 
  'bridge-water' | 
  'briefcase' | 
  'briefcase-arrow-right' | 
  'briefcase-blank' | 
  'briefcase-clock' | 
  'briefcase-medical' | 
  'brightness' | 
  'brightness-low' | 
  'bring-forward' | 
  'bring-front' | 
  'broadcast-tower' | 
  'broccoli' | 
  'broom' | 
  'broom-ball' | 
  'broom-wide' | 
  'browser' | 
  'browsers' | 
  'brush' | 
  'btc' | 
  'bucket' | 
  'buffer' | 
  'bug' | 
  'bug-slash' | 
  'bugs' | 
  'building' | 
  'building-circle-arrow-right' | 
  'building-circle-check' | 
  'building-circle-exclamation' | 
  'building-circle-xmark' | 
  'building-columns' | 
  'building-flag' | 
  'building-lock' | 
  'building-magnifying-glass' | 
  'building-memo' | 
  'building-ngo' | 
  'building-shield' | 
  'building-un' | 
  'building-user' | 
  'building-wheat' | 
  'buildings' | 
  'bulldozer' | 
  'bullhorn' | 
  'bullseye' | 
  'bullseye-arrow' | 
  'bullseye-pointer' | 
  'buoy' | 
  'buoy-mooring' | 
  'burger' | 
  'burger-cheese' | 
  'burger-fries' | 
  'burger-glass' | 
  'burger-lettuce' | 
  'burger-soda' | 
  'burn' | 
  'buromobelexperte' | 
  'burrito' | 
  'burst' | 
  'bus' | 
  'bus-alt' | 
  'bus-school' | 
  'bus-simple' | 
  'business-front' | 
  'business-time' | 
  'butter' | 
  'buy-n-large' | 
  'buysellads' | 
  'c' | 
  'cab' | 
  'cabin' | 
  'cabinet-filing' | 
  'cable-car' | 
  'cactus' | 
  'caduceus' | 
  'cake' | 
  'cake-candles' | 
  'cake-slice' | 
  'calculator' | 
  'calculator-alt' | 
  'calculator-simple' | 
  'calendar' | 
  'calendar-alt' | 
  'calendar-arrow-down' | 
  'calendar-arrow-up' | 
  'calendar-check' | 
  'calendar-circle' | 
  'calendar-circle-exclamation' | 
  'calendar-circle-minus' | 
  'calendar-circle-plus' | 
  'calendar-circle-user' | 
  'calendar-clock' | 
  'calendar-day' | 
  'calendar-days' | 
  'calendar-download' | 
  'calendar-edit' | 
  'calendar-exclamation' | 
  'calendar-heart' | 
  'calendar-image' | 
  'calendar-lines' | 
  'calendar-lines-pen' | 
  'calendar-minus' | 
  'calendar-note' | 
  'calendar-pen' | 
  'calendar-plus' | 
  'calendar-range' | 
  'calendar-star' | 
  'calendar-time' | 
  'calendar-times' | 
  'calendar-upload' | 
  'calendar-users' | 
  'calendar-week' | 
  'calendar-xmark' | 
  'calendars' | 
  'camcorder' | 
  'camera' | 
  'camera-alt' | 
  'camera-cctv' | 
  'camera-circle' | 
  'camera-home' | 
  'camera-movie' | 
  'camera-polaroid' | 
  'camera-retro' | 
  'camera-rotate' | 
  'camera-security' | 
  'camera-slash' | 
  'camera-viewfinder' | 
  'camera-web' | 
  'camera-web-slash' | 
  'campfire' | 
  'campground' | 
  'can-food' | 
  'canadian-maple-leaf' | 
  'cancel' | 
  'candle-holder' | 
  'candy' | 
  'candy-bar' | 
  'candy-cane' | 
  'candy-corn' | 
  'cannabis' | 
  'cannon' | 
  'capsules' | 
  'car' | 
  'car-alt' | 
  'car-battery' | 
  'car-bolt' | 
  'car-building' | 
  'car-bump' | 
  'car-burst' | 
  'car-bus' | 
  'car-circle-bolt' | 
  'car-crash' | 
  'car-garage' | 
  'car-mechanic' | 
  'car-mirrors' | 
  'car-on' | 
  'car-rear' | 
  'car-side' | 
  'car-side-bolt' | 
  'car-tilt' | 
  'car-tunnel' | 
  'car-wash' | 
  'car-wrench' | 
  'caravan' | 
  'caravan-alt' | 
  'caravan-simple' | 
  'card-club' | 
  'card-diamond' | 
  'card-heart' | 
  'card-spade' | 
  'cards' | 
  'cards-blank' | 
  'caret-circle-down' | 
  'caret-circle-left' | 
  'caret-circle-right' | 
  'caret-circle-up' | 
  'caret-down' | 
  'caret-left' | 
  'caret-right' | 
  'caret-square-down' | 
  'caret-square-left' | 
  'caret-square-right' | 
  'caret-square-up' | 
  'caret-up' | 
  'carriage-baby' | 
  'carrot' | 
  'cars' | 
  'cart-arrow-down' | 
  'cart-arrow-up' | 
  'cart-circle-arrow-down' | 
  'cart-circle-arrow-up' | 
  'cart-circle-check' | 
  'cart-circle-exclamation' | 
  'cart-circle-plus' | 
  'cart-circle-xmark' | 
  'cart-flatbed' | 
  'cart-flatbed-boxes' | 
  'cart-flatbed-empty' | 
  'cart-flatbed-suitcase' | 
  'cart-minus' | 
  'cart-plus' | 
  'cart-shopping' | 
  'cart-shopping-fast' | 
  'cart-xmark' | 
  'cash-register' | 
  'cassette-betamax' | 
  'cassette-tape' | 
  'cassette-vhs' | 
  'castle' | 
  'cat' | 
  'cat-space' | 
  'cauldron' | 
  'cc-amazon-pay' | 
  'cc-amex' | 
  'cc-apple-pay' | 
  'cc-diners-club' | 
  'cc-discover' | 
  'cc-jcb' | 
  'cc-mastercard' | 
  'cc-paypal' | 
  'cc-stripe' | 
  'cc-visa' | 
  'cctv' | 
  'cedi-sign' | 
  'cent-sign' | 
  'centercode' | 
  'centos' | 
  'certificate' | 
  'chain' | 
  'chain-broken' | 
  'chain-horizontal' | 
  'chain-horizontal-slash' | 
  'chain-slash' | 
  'chair' | 
  'chair-office' | 
  'chalkboard' | 
  'chalkboard-teacher' | 
  'chalkboard-user' | 
  'champagne-glass' | 
  'champagne-glasses' | 
  'charging-station' | 
  'chart-area' | 
  'chart-bar' | 
  'chart-bullet' | 
  'chart-candlestick' | 
  'chart-column' | 
  'chart-gantt' | 
  'chart-kanban' | 
  'chart-line' | 
  'chart-line-down' | 
  'chart-line-up' | 
  'chart-line-up-down' | 
  'chart-mixed' | 
  'chart-mixed-up-circle-currency' | 
  'chart-mixed-up-circle-dollar' | 
  'chart-network' | 
  'chart-pie' | 
  'chart-pie-alt' | 
  'chart-pie-simple' | 
  'chart-pie-simple-circle-currency' | 
  'chart-pie-simple-circle-dollar' | 
  'chart-pyramid' | 
  'chart-radar' | 
  'chart-scatter' | 
  'chart-scatter-3d' | 
  'chart-scatter-bubble' | 
  'chart-simple' | 
  'chart-simple-horizontal' | 
  'chart-tree-map' | 
  'chart-user' | 
  'chart-waterfall' | 
  'check' | 
  'check-circle' | 
  'check-double' | 
  'check-square' | 
  'check-to-slot' | 
  'cheese' | 
  'cheese-swiss' | 
  'cheeseburger' | 
  'cherries' | 
  'chess' | 
  'chess-bishop' | 
  'chess-bishop-alt' | 
  'chess-bishop-piece' | 
  'chess-board' | 
  'chess-clock' | 
  'chess-clock-alt' | 
  'chess-clock-flip' | 
  'chess-king' | 
  'chess-king-alt' | 
  'chess-king-piece' | 
  'chess-knight' | 
  'chess-knight-alt' | 
  'chess-knight-piece' | 
  'chess-pawn' | 
  'chess-pawn-alt' | 
  'chess-pawn-piece' | 
  'chess-queen' | 
  'chess-queen-alt' | 
  'chess-queen-piece' | 
  'chess-rook' | 
  'chess-rook-alt' | 
  'chess-rook-piece' | 
  'chestnut' | 
  'chevron-circle-down' | 
  'chevron-circle-left' | 
  'chevron-circle-right' | 
  'chevron-circle-up' | 
  'chevron-double-down' | 
  'chevron-double-left' | 
  'chevron-double-right' | 
  'chevron-double-up' | 
  'chevron-down' | 
  'chevron-left' | 
  'chevron-right' | 
  'chevron-square-down' | 
  'chevron-square-left' | 
  'chevron-square-right' | 
  'chevron-square-up' | 
  'chevron-up' | 
  'chevrons-down' | 
  'chevrons-left' | 
  'chevrons-right' | 
  'chevrons-up' | 
  'chf-sign' | 
  'child' | 
  'child-combatant' | 
  'child-dress' | 
  'child-reaching' | 
  'child-rifle' | 
  'children' | 
  'chimney' | 
  'chocolate-bar' | 
  'chopsticks' | 
  'chrome' | 
  'chromecast' | 
  'church' | 
  'circle' | 
  'circle-0' | 
  'circle-1' | 
  'circle-2' | 
  'circle-3' | 
  'circle-4' | 
  'circle-5' | 
  'circle-6' | 
  'circle-7' | 
  'circle-8' | 
  'circle-9' | 
  'circle-a' | 
  'circle-ampersand' | 
  'circle-arrow-down' | 
  'circle-arrow-down-left' | 
  'circle-arrow-down-right' | 
  'circle-arrow-left' | 
  'circle-arrow-right' | 
  'circle-arrow-up' | 
  'circle-arrow-up-left' | 
  'circle-arrow-up-right' | 
  'circle-b' | 
  'circle-bolt' | 
  'circle-book-open' | 
  'circle-bookmark' | 
  'circle-c' | 
  'circle-calendar' | 
  'circle-camera' | 
  'circle-caret-down' | 
  'circle-caret-left' | 
  'circle-caret-right' | 
  'circle-caret-up' | 
  'circle-check' | 
  'circle-chevron-down' | 
  'circle-chevron-left' | 
  'circle-chevron-right' | 
  'circle-chevron-up' | 
  'circle-d' | 
  'circle-dashed' | 
  'circle-divide' | 
  'circle-dollar' | 
  'circle-dollar-to-slot' | 
  'circle-dot' | 
  'circle-down' | 
  'circle-down-left' | 
  'circle-down-right' | 
  'circle-e' | 
  'circle-ellipsis' | 
  'circle-ellipsis-vertical' | 
  'circle-envelope' | 
  'circle-euro' | 
  'circle-exclamation' | 
  'circle-exclamation-check' | 
  'circle-f' | 
  'circle-g' | 
  'circle-gf' | 
  'circle-h' | 
  'circle-half' | 
  'circle-half-stroke' | 
  'circle-heart' | 
  'circle-i' | 
  'circle-info' | 
  'circle-j' | 
  'circle-k' | 
  'circle-l' | 
  'circle-left' | 
  'circle-location-arrow' | 
  'circle-m' | 
  'circle-microphone' | 
  'circle-microphone-lines' | 
  'circle-minus' | 
  'circle-n' | 
  'circle-nodes' | 
  'circle-notch' | 
  'circle-o' | 
  'circle-p' | 
  'circle-parking' | 
  'circle-pause' | 
  'circle-phone' | 
  'circle-phone-flip' | 
  'circle-phone-hangup' | 
  'circle-play' | 
  'circle-plus' | 
  'circle-q' | 
  'circle-quarter' | 
  'circle-quarter-stroke' | 
  'circle-quarters' | 
  'circle-question' | 
  'circle-r' | 
  'circle-radiation' | 
  'circle-right' | 
  'circle-s' | 
  'circle-small' | 
  'circle-sort' | 
  'circle-sort-down' | 
  'circle-sort-up' | 
  'circle-star' | 
  'circle-sterling' | 
  'circle-stop' | 
  'circle-t' | 
  'circle-three-quarters' | 
  'circle-three-quarters-stroke' | 
  'circle-trash' | 
  'circle-u' | 
  'circle-up' | 
  'circle-up-left' | 
  'circle-up-right' | 
  'circle-user' | 
  'circle-v' | 
  'circle-video' | 
  'circle-w' | 
  'circle-waveform-lines' | 
  'circle-wifi' | 
  'circle-wifi-circle-wifi' | 
  'circle-wifi-group' | 
  'circle-x' | 
  'circle-xmark' | 
  'circle-y' | 
  'circle-yen' | 
  'circle-z' | 
  'circles-overlap' | 
  'citrus' | 
  'citrus-slice' | 
  'city' | 
  'clapperboard' | 
  'clapperboard-play' | 
  'clarinet' | 
  'claw-marks' | 
  'clinic-medical' | 
  'clipboard' | 
  'clipboard-check' | 
  'clipboard-list' | 
  'clipboard-list-check' | 
  'clipboard-medical' | 
  'clipboard-prescription' | 
  'clipboard-question' | 
  'clipboard-user' | 
  'clock' | 
  'clock-desk' | 
  'clock-eight' | 
  'clock-eight-thirty' | 
  'clock-eleven' | 
  'clock-eleven-thirty' | 
  'clock-five' | 
  'clock-five-thirty' | 
  'clock-four' | 
  'clock-four-thirty' | 
  'clock-nine' | 
  'clock-nine-thirty' | 
  'clock-one' | 
  'clock-one-thirty' | 
  'clock-rotate-left' | 
  'clock-seven' | 
  'clock-seven-thirty' | 
  'clock-six' | 
  'clock-six-thirty' | 
  'clock-ten' | 
  'clock-ten-thirty' | 
  'clock-three' | 
  'clock-three-thirty' | 
  'clock-twelve' | 
  'clock-twelve-thirty' | 
  'clock-two' | 
  'clock-two-thirty' | 
  'clone' | 
  'close' | 
  'closed-captioning' | 
  'closed-captioning-slash' | 
  'clothes-hanger' | 
  'cloud' | 
  'cloud-arrow-down' | 
  'cloud-arrow-up' | 
  'cloud-binary' | 
  'cloud-bolt' | 
  'cloud-bolt-moon' | 
  'cloud-bolt-sun' | 
  'cloud-check' | 
  'cloud-download' | 
  'cloud-download-alt' | 
  'cloud-drizzle' | 
  'cloud-exclamation' | 
  'cloud-fog' | 
  'cloud-hail' | 
  'cloud-hail-mixed' | 
  'cloud-meatball' | 
  'cloud-minus' | 
  'cloud-moon' | 
  'cloud-moon-rain' | 
  'cloud-music' | 
  'cloud-plus' | 
  'cloud-question' | 
  'cloud-rain' | 
  'cloud-rainbow' | 
  'cloud-showers' | 
  'cloud-showers-heavy' | 
  'cloud-showers-water' | 
  'cloud-slash' | 
  'cloud-sleet' | 
  'cloud-snow' | 
  'cloud-sun' | 
  'cloud-sun-rain' | 
  'cloud-upload' | 
  'cloud-upload-alt' | 
  'cloud-word' | 
  'cloud-xmark' | 
  'cloudflare' | 
  'clouds' | 
  'clouds-moon' | 
  'clouds-sun' | 
  'cloudscale' | 
  'cloudsmith' | 
  'cloudversify' | 
  'clover' | 
  'club' | 
  'cmplid' | 
  'cny' | 
  'cocktail' | 
  'coconut' | 
  'code' | 
  'code-branch' | 
  'code-commit' | 
  'code-compare' | 
  'code-fork' | 
  'code-merge' | 
  'code-pull-request' | 
  'code-pull-request-closed' | 
  'code-pull-request-draft' | 
  'code-simple' | 
  'codepen' | 
  'codiepie' | 
  'coffee' | 
  'coffee-bean' | 
  'coffee-beans' | 
  'coffee-pot' | 
  'coffee-togo' | 
  'coffin' | 
  'coffin-cross' | 
  'cog' | 
  'cogs' | 
  'coin' | 
  'coin-blank' | 
  'coin-front' | 
  'coin-vertical' | 
  'coins' | 
  'colon' | 
  'colon-sign' | 
  'columns' | 
  'columns-3' | 
  'comet' | 
  'comma' | 
  'command' | 
  'comment' | 
  'comment-alt' | 
  'comment-alt-arrow-down' | 
  'comment-alt-arrow-up' | 
  'comment-alt-captions' | 
  'comment-alt-check' | 
  'comment-alt-dollar' | 
  'comment-alt-dots' | 
  'comment-alt-edit' | 
  'comment-alt-exclamation' | 
  'comment-alt-image' | 
  'comment-alt-lines' | 
  'comment-alt-medical' | 
  'comment-alt-minus' | 
  'comment-alt-music' | 
  'comment-alt-plus' | 
  'comment-alt-quote' | 
  'comment-alt-slash' | 
  'comment-alt-smile' | 
  'comment-alt-text' | 
  'comment-alt-times' | 
  'comment-arrow-down' | 
  'comment-arrow-up' | 
  'comment-arrow-up-right' | 
  'comment-captions' | 
  'comment-check' | 
  'comment-code' | 
  'comment-dollar' | 
  'comment-dots' | 
  'comment-edit' | 
  'comment-exclamation' | 
  'comment-heart' | 
  'comment-image' | 
  'comment-lines' | 
  'comment-medical' | 
  'comment-middle' | 
  'comment-middle-alt' | 
  'comment-middle-top' | 
  'comment-middle-top-alt' | 
  'comment-minus' | 
  'comment-music' | 
  'comment-pen' | 
  'comment-plus' | 
  'comment-question' | 
  'comment-quote' | 
  'comment-slash' | 
  'comment-smile' | 
  'comment-sms' | 
  'comment-text' | 
  'comment-times' | 
  'comment-xmark' | 
  'commenting' | 
  'comments' | 
  'comments-alt' | 
  'comments-alt-dollar' | 
  'comments-dollar' | 
  'comments-question' | 
  'comments-question-check' | 
  'compact-disc' | 
  'compass' | 
  'compass-drafting' | 
  'compass-slash' | 
  'compress' | 
  'compress-alt' | 
  'compress-arrows' | 
  'compress-arrows-alt' | 
  'compress-wide' | 
  'computer' | 
  'computer-classic' | 
  'computer-mouse' | 
  'computer-mouse-scrollwheel' | 
  'computer-speaker' | 
  'concierge-bell' | 
  'confluence' | 
  'connectdevelop' | 
  'construction' | 
  'contact-book' | 
  'contact-card' | 
  'container-storage' | 
  'contao' | 
  'conveyor-belt' | 
  'conveyor-belt-alt' | 
  'conveyor-belt-arm' | 
  'conveyor-belt-boxes' | 
  'conveyor-belt-empty' | 
  'cookie' | 
  'cookie-bite' | 
  'copy' | 
  'copyright' | 
  'corn' | 
  'corner' | 
  'cotton-bureau' | 
  'couch' | 
  'couch-small' | 
  'court-sport' | 
  'cow' | 
  'cowbell' | 
  'cowbell-circle-plus' | 
  'cowbell-more' | 
  'cpanel' | 
  'crab' | 
  'crate-apple' | 
  'crate-empty' | 
  'creative-commons' | 
  'creative-commons-by' | 
  'creative-commons-nc' | 
  'creative-commons-nc-eu' | 
  'creative-commons-nc-jp' | 
  'creative-commons-nd' | 
  'creative-commons-pd' | 
  'creative-commons-pd-alt' | 
  'creative-commons-remix' | 
  'creative-commons-sa' | 
  'creative-commons-sampling' | 
  'creative-commons-sampling-plus' | 
  'creative-commons-share' | 
  'creative-commons-zero' | 
  'credit-card' | 
  'credit-card-alt' | 
  'credit-card-blank' | 
  'credit-card-front' | 
  'creemee' | 
  'cricket' | 
  'cricket-bat-ball' | 
  'critical-role' | 
  'croissant' | 
  'crop' | 
  'crop-alt' | 
  'crop-simple' | 
  'cross' | 
  'crosshairs' | 
  'crosshairs-simple' | 
  'crow' | 
  'crown' | 
  'crutch' | 
  'crutches' | 
  'cruzeiro-sign' | 
  'crystal-ball' | 
  'css3' | 
  'css3-alt' | 
  'cube' | 
  'cubes' | 
  'cubes-stacked' | 
  'cucumber' | 
  'cup-straw' | 
  'cup-straw-swoosh' | 
  'cup-togo' | 
  'cupcake' | 
  'curling' | 
  'curling-stone' | 
  'custard' | 
  'cut' | 
  'cutlery' | 
  'cuttlefish' | 
  'd' | 
  'd-and-d' | 
  'd-and-d-beyond' | 
  'dagger' | 
  'dailymotion' | 
  'dart-lang' | 
  'dash' | 
  'dashboard' | 
  'dashcube' | 
  'database' | 
  'deaf' | 
  'deafness' | 
  'debian' | 
  'debug' | 
  'dedent' | 
  'deer' | 
  'deer-rudolph' | 
  'deezer' | 
  'delete-left' | 
  'delete-right' | 
  'delicious' | 
  'democrat' | 
  'deploydog' | 
  'deskpro' | 
  'desktop' | 
  'desktop-alt' | 
  'desktop-arrow-down' | 
  'desktop-code' | 
  'desktop-medical' | 
  'desktop-slash' | 
  'dev' | 
  'deviantart' | 
  'dewpoint' | 
  'dharmachakra' | 
  'dhl' | 
  'diagnoses' | 
  'diagram-cells' | 
  'diagram-lean-canvas' | 
  'diagram-nested' | 
  'diagram-next' | 
  'diagram-predecessor' | 
  'diagram-previous' | 
  'diagram-project' | 
  'diagram-sankey' | 
  'diagram-subtask' | 
  'diagram-successor' | 
  'diagram-venn' | 
  'dial' | 
  'dial-high' | 
  'dial-low' | 
  'dial-max' | 
  'dial-med' | 
  'dial-med-high' | 
  'dial-med-low' | 
  'dial-min' | 
  'dial-off' | 
  'diamond' | 
  'diamond-exclamation' | 
  'diamond-half' | 
  'diamond-half-stroke' | 
  'diamond-turn-right' | 
  'diamonds-4' | 
  'diaspora' | 
  'dice' | 
  'dice-d10' | 
  'dice-d12' | 
  'dice-d20' | 
  'dice-d4' | 
  'dice-d6' | 
  'dice-d8' | 
  'dice-five' | 
  'dice-four' | 
  'dice-one' | 
  'dice-six' | 
  'dice-three' | 
  'dice-two' | 
  'digg' | 
  'digging' | 
  'digital-ocean' | 
  'digital-tachograph' | 
  'dinosaur' | 
  'diploma' | 
  'directions' | 
  'disc-drive' | 
  'discord' | 
  'discourse' | 
  'disease' | 
  'display' | 
  'display-arrow-down' | 
  'display-chart-up' | 
  'display-chart-up-circle-currency' | 
  'display-chart-up-circle-dollar' | 
  'display-code' | 
  'display-medical' | 
  'display-slash' | 
  'distribute-spacing-horizontal' | 
  'distribute-spacing-vertical' | 
  'ditto' | 
  'divide' | 
  'dizzy' | 
  'dna' | 
  'do-not-enter' | 
  'dochub' | 
  'docker' | 
  'dog' | 
  'dog-leashed' | 
  'dollar' | 
  'dollar-circle' | 
  'dollar-sign' | 
  'dollar-square' | 
  'dolly' | 
  'dolly-box' | 
  'dolly-empty' | 
  'dolly-flatbed' | 
  'dolly-flatbed-alt' | 
  'dolly-flatbed-empty' | 
  'dolphin' | 
  'donate' | 
  'dong-sign' | 
  'donut' | 
  'door-closed' | 
  'door-open' | 
  'dot-circle' | 
  'doughnut' | 
  'dove' | 
  'down' | 
  'down-from-bracket' | 
  'down-from-dotted-line' | 
  'down-from-line' | 
  'down-left' | 
  'down-left-and-up-right-to-center' | 
  'down-long' | 
  'down-right' | 
  'down-to-bracket' | 
  'down-to-dotted-line' | 
  'down-to-line' | 
  'download' | 
  'draft2digital' | 
  'drafting-compass' | 
  'dragon' | 
  'draw-circle' | 
  'draw-polygon' | 
  'draw-square' | 
  'dreidel' | 
  'dribbble' | 
  'dribbble-square' | 
  'drivers-license' | 
  'drone' | 
  'drone-alt' | 
  'drone-front' | 
  'dropbox' | 
  'droplet' | 
  'droplet-degree' | 
  'droplet-percent' | 
  'droplet-slash' | 
  'drum' | 
  'drum-steelpan' | 
  'drumstick' | 
  'drumstick-bite' | 
  'drupal' | 
  'dryer' | 
  'dryer-alt' | 
  'dryer-heat' | 
  'duck' | 
  'dumbbell' | 
  'dumpster' | 
  'dumpster-fire' | 
  'dungeon' | 
  'dyalog' | 
  'e' | 
  'ear' | 
  'ear-deaf' | 
  'ear-listen' | 
  'ear-muffs' | 
  'earlybirds' | 
  'earth' | 
  'earth-africa' | 
  'earth-america' | 
  'earth-americas' | 
  'earth-asia' | 
  'earth-europe' | 
  'earth-oceania' | 
  'ebay' | 
  'eclipse' | 
  'eclipse-alt' | 
  'edge' | 
  'edge-legacy' | 
  'edit' | 
  'egg' | 
  'egg-fried' | 
  'eggplant' | 
  'eject' | 
  'elementor' | 
  'elephant' | 
  'elevator' | 
  'ellipsis' | 
  'ellipsis-h' | 
  'ellipsis-h-alt' | 
  'ellipsis-stroke' | 
  'ellipsis-stroke-vertical' | 
  'ellipsis-v' | 
  'ellipsis-v-alt' | 
  'ellipsis-vertical' | 
  'ello' | 
  'ember' | 
  'empire' | 
  'empty-set' | 
  'engine' | 
  'engine-exclamation' | 
  'engine-warning' | 
  'envelope' | 
  'envelope-badge' | 
  'envelope-circle' | 
  'envelope-circle-check' | 
  'envelope-dot' | 
  'envelope-open' | 
  'envelope-open-dollar' | 
  'envelope-open-text' | 
  'envelope-square' | 
  'envelopes' | 
  'envelopes-bulk' | 
  'envira' | 
  'equals' | 
  'eraser' | 
  'erlang' | 
  'escalator' | 
  'ethereum' | 
  'ethernet' | 
  'etsy' | 
  'eur' | 
  'euro' | 
  'euro-sign' | 
  'evernote' | 
  'excavator' | 
  'exchange' | 
  'exchange-alt' | 
  'exclamation' | 
  'exclamation-circle' | 
  'exclamation-square' | 
  'exclamation-triangle' | 
  'expand' | 
  'expand-alt' | 
  'expand-arrows' | 
  'expand-arrows-alt' | 
  'expand-wide' | 
  'expeditedssl' | 
  'exploding-head' | 
  'explosion' | 
  'external-link' | 
  'external-link-alt' | 
  'external-link-square' | 
  'external-link-square-alt' | 
  'eye' | 
  'eye-dropper' | 
  'eye-dropper-empty' | 
  'eye-dropper-full' | 
  'eye-dropper-half' | 
  'eye-evil' | 
  'eye-low-vision' | 
  'eye-slash' | 
  'eyedropper' | 
  'eyes' | 
  'f' | 
  'face-angry' | 
  'face-angry-horns' | 
  'face-anguished' | 
  'face-anxious-sweat' | 
  'face-astonished' | 
  'face-awesome' | 
  'face-beam-hand-over-mouth' | 
  'face-clouds' | 
  'face-confounded' | 
  'face-confused' | 
  'face-cowboy-hat' | 
  'face-diagonal-mouth' | 
  'face-disappointed' | 
  'face-disguise' | 
  'face-dizzy' | 
  'face-dotted' | 
  'face-downcast-sweat' | 
  'face-drooling' | 
  'face-exhaling' | 
  'face-explode' | 
  'face-expressionless' | 
  'face-eyes-xmarks' | 
  'face-fearful' | 
  'face-flushed' | 
  'face-frown' | 
  'face-frown-open' | 
  'face-frown-slight' | 
  'face-glasses' | 
  'face-grimace' | 
  'face-grin' | 
  'face-grin-beam' | 
  'face-grin-beam-sweat' | 
  'face-grin-hearts' | 
  'face-grin-squint' | 
  'face-grin-squint-tears' | 
  'face-grin-stars' | 
  'face-grin-tears' | 
  'face-grin-tongue' | 
  'face-grin-tongue-squint' | 
  'face-grin-tongue-wink' | 
  'face-grin-wide' | 
  'face-grin-wink' | 
  'face-hand-over-mouth' | 
  'face-hand-peeking' | 
  'face-hand-yawn' | 
  'face-head-bandage' | 
  'face-holding-back-tears' | 
  'face-hushed' | 
  'face-icicles' | 
  'face-kiss' | 
  'face-kiss-beam' | 
  'face-kiss-closed-eyes' | 
  'face-kiss-wink-heart' | 
  'face-laugh' | 
  'face-laugh-beam' | 
  'face-laugh-squint' | 
  'face-laugh-wink' | 
  'face-lying' | 
  'face-mask' | 
  'face-meh' | 
  'face-meh-blank' | 
  'face-melting' | 
  'face-monocle' | 
  'face-nauseated' | 
  'face-nose-steam' | 
  'face-party' | 
  'face-pensive' | 
  'face-persevering' | 
  'face-pleading' | 
  'face-pouting' | 
  'face-raised-eyebrow' | 
  'face-relieved' | 
  'face-rolling-eyes' | 
  'face-sad-cry' | 
  'face-sad-sweat' | 
  'face-sad-tear' | 
  'face-saluting' | 
  'face-scream' | 
  'face-shush' | 
  'face-sleeping' | 
  'face-sleepy' | 
  'face-smile' | 
  'face-smile-beam' | 
  'face-smile-halo' | 
  'face-smile-hearts' | 
  'face-smile-horns' | 
  'face-smile-plus' | 
  'face-smile-relaxed' | 
  'face-smile-tear' | 
  'face-smile-tongue' | 
  'face-smile-upside-down' | 
  'face-smile-wink' | 
  'face-smiling-hands' | 
  'face-smirking' | 
  'face-spiral-eyes' | 
  'face-sunglasses' | 
  'face-surprise' | 
  'face-swear' | 
  'face-thermometer' | 
  'face-thinking' | 
  'face-tired' | 
  'face-tissue' | 
  'face-tongue-money' | 
  'face-tongue-sweat' | 
  'face-unamused' | 
  'face-viewfinder' | 
  'face-vomit' | 
  'face-weary' | 
  'face-woozy' | 
  'face-worried' | 
  'face-zany' | 
  'face-zipper' | 
  'facebook' | 
  'facebook-f' | 
  'facebook-messenger' | 
  'facebook-square' | 
  'falafel' | 
  'family' | 
  'family-dress' | 
  'family-pants' | 
  'fan' | 
  'fan-table' | 
  'fantasy-flight-games' | 
  'farm' | 
  'fast-backward' | 
  'fast-forward' | 
  'faucet' | 
  'faucet-drip' | 
  'fax' | 
  'feather' | 
  'feather-alt' | 
  'feather-pointed' | 
  'fedex' | 
  'fedora' | 
  'feed' | 
  'female' | 
  'fence' | 
  'ferris-wheel' | 
  'ferry' | 
  'field-hockey' | 
  'field-hockey-stick-ball' | 
  'fighter-jet' | 
  'figma' | 
  'file' | 
  'file-alt' | 
  'file-archive' | 
  'file-arrow-down' | 
  'file-arrow-up' | 
  'file-audio' | 
  'file-award' | 
  'file-binary' | 
  'file-cad' | 
  'file-caret-down' | 
  'file-caret-up' | 
  'file-certificate' | 
  'file-chart-column' | 
  'file-chart-line' | 
  'file-chart-pie' | 
  'file-check' | 
  'file-circle-check' | 
  'file-circle-exclamation' | 
  'file-circle-info' | 
  'file-circle-minus' | 
  'file-circle-plus' | 
  'file-circle-question' | 
  'file-circle-xmark' | 
  'file-clipboard' | 
  'file-code' | 
  'file-contract' | 
  'file-csv' | 
  'file-dashed-line' | 
  'file-doc' | 
  'file-download' | 
  'file-edit' | 
  'file-eps' | 
  'file-excel' | 
  'file-exclamation' | 
  'file-export' | 
  'file-gif' | 
  'file-heart' | 
  'file-image' | 
  'file-import' | 
  'file-invoice' | 
  'file-invoice-dollar' | 
  'file-jpg' | 
  'file-lines' | 
  'file-lock' | 
  'file-magnifying-glass' | 
  'file-medical' | 
  'file-medical-alt' | 
  'file-minus' | 
  'file-mov' | 
  'file-mp3' | 
  'file-mp4' | 
  'file-music' | 
  'file-pdf' | 
  'file-pen' | 
  'file-plus' | 
  'file-plus-minus' | 
  'file-png' | 
  'file-powerpoint' | 
  'file-ppt' | 
  'file-prescription' | 
  'file-search' | 
  'file-shield' | 
  'file-signature' | 
  'file-slash' | 
  'file-spreadsheet' | 
  'file-svg' | 
  'file-text' | 
  'file-times' | 
  'file-upload' | 
  'file-user' | 
  'file-vector' | 
  'file-video' | 
  'file-waveform' | 
  'file-word' | 
  'file-xls' | 
  'file-xmark' | 
  'file-xml' | 
  'file-zip' | 
  'file-zipper' | 
  'files' | 
  'files-medical' | 
  'fill' | 
  'fill-drip' | 
  'film' | 
  'film-alt' | 
  'film-canister' | 
  'film-cannister' | 
  'film-simple' | 
  'film-slash' | 
  'films' | 
  'filter' | 
  'filter-circle-dollar' | 
  'filter-circle-xmark' | 
  'filter-list' | 
  'filter-slash' | 
  'filters' | 
  'fingerprint' | 
  'fire' | 
  'fire-alt' | 
  'fire-burner' | 
  'fire-extinguisher' | 
  'fire-flame' | 
  'fire-flame-curved' | 
  'fire-flame-simple' | 
  'fire-hydrant' | 
  'fire-smoke' | 
  'firefox' | 
  'firefox-browser' | 
  'fireplace' | 
  'firewall' | 
  'first-aid' | 
  'first-order' | 
  'first-order-alt' | 
  'firstdraft' | 
  'fish' | 
  'fish-bones' | 
  'fish-cooked' | 
  'fish-fins' | 
  'fishing-rod' | 
  'fist-raised' | 
  'flag' | 
  'flag-alt' | 
  'flag-checkered' | 
  'flag-pennant' | 
  'flag-swallowtail' | 
  'flag-usa' | 
  'flame' | 
  'flashlight' | 
  'flask' | 
  'flask-gear' | 
  'flask-poison' | 
  'flask-potion' | 
  'flask-round-poison' | 
  'flask-round-potion' | 
  'flask-vial' | 
  'flatbread' | 
  'flatbread-stuffed' | 
  'flickr' | 
  'flipboard' | 
  'floppy-disk' | 
  'floppy-disk-circle-arrow-right' | 
  'floppy-disk-circle-xmark' | 
  'floppy-disk-pen' | 
  'floppy-disk-times' | 
  'floppy-disks' | 
  'florin-sign' | 
  'flower' | 
  'flower-daffodil' | 
  'flower-tulip' | 
  'flushed' | 
  'flute' | 
  'flutter' | 
  'flux-capacitor' | 
  'fly' | 
  'flying-disc' | 
  'fog' | 
  'folder' | 
  'folder-arrow-down' | 
  'folder-arrow-up' | 
  'folder-blank' | 
  'folder-bookmark' | 
  'folder-check' | 
  'folder-closed' | 
  'folder-cog' | 
  'folder-download' | 
  'folder-gear' | 
  'folder-grid' | 
  'folder-heart' | 
  'folder-image' | 
  'folder-magnifying-glass' | 
  'folder-medical' | 
  'folder-minus' | 
  'folder-music' | 
  'folder-open' | 
  'folder-plus' | 
  'folder-search' | 
  'folder-times' | 
  'folder-tree' | 
  'folder-upload' | 
  'folder-user' | 
  'folder-xmark' | 
  'folders' | 
  'fondue-pot' | 
  'font' | 
  'font-awesome' | 
  'font-awesome-alt' | 
  'font-awesome-flag' | 
  'font-awesome-logo-full' | 
  'font-case' | 
  'fonticons' | 
  'fonticons-fi' | 
  'football' | 
  'football-ball' | 
  'football-helmet' | 
  'fork' | 
  'fork-knife' | 
  'forklift' | 
  'fort' | 
  'fort-awesome' | 
  'fort-awesome-alt' | 
  'forumbee' | 
  'forward' | 
  'forward-fast' | 
  'forward-step' | 
  'foursquare' | 
  'fragile' | 
  'frame' | 
  'franc-sign' | 
  'free-code-camp' | 
  'freebsd' | 
  'french-fries' | 
  'frog' | 
  'frosty-head' | 
  'frown' | 
  'frown-open' | 
  'fulcrum' | 
  'function' | 
  'funnel-dollar' | 
  'futbol' | 
  'futbol-ball' | 
  'g' | 
  'galactic-republic' | 
  'galactic-senate' | 
  'galaxy' | 
  'gallery-thumbnails' | 
  'game-board' | 
  'game-board-alt' | 
  'game-board-simple' | 
  'game-console-handheld' | 
  'game-console-handheld-crank' | 
  'gamepad' | 
  'gamepad-alt' | 
  'gamepad-modern' | 
  'garage' | 
  'garage-car' | 
  'garage-open' | 
  'garlic' | 
  'gas-pump' | 
  'gas-pump-slash' | 
  'gauge' | 
  'gauge-circle-bolt' | 
  'gauge-circle-minus' | 
  'gauge-circle-plus' | 
  'gauge-high' | 
  'gauge-low' | 
  'gauge-max' | 
  'gauge-med' | 
  'gauge-min' | 
  'gauge-simple' | 
  'gauge-simple-high' | 
  'gauge-simple-low' | 
  'gauge-simple-max' | 
  'gauge-simple-med' | 
  'gauge-simple-min' | 
  'gave-dandy' | 
  'gavel' | 
  'gbp' | 
  'gear' | 
  'gear-code' | 
  'gear-complex' | 
  'gear-complex-code' | 
  'gears' | 
  'gem' | 
  'genderless' | 
  'get-pocket' | 
  'gg' | 
  'gg-circle' | 
  'ghost' | 
  'gif' | 
  'gift' | 
  'gift-card' | 
  'gifts' | 
  'gingerbread-man' | 
  'git' | 
  'git-alt' | 
  'git-square' | 
  'github' | 
  'github-alt' | 
  'github-square' | 
  'gitkraken' | 
  'gitlab' | 
  'gitlab-square' | 
  'gitter' | 
  'glass' | 
  'glass-champagne' | 
  'glass-cheers' | 
  'glass-citrus' | 
  'glass-empty' | 
  'glass-half' | 
  'glass-half-empty' | 
  'glass-half-full' | 
  'glass-martini' | 
  'glass-martini-alt' | 
  'glass-water' | 
  'glass-water-droplet' | 
  'glass-whiskey' | 
  'glass-whiskey-rocks' | 
  'glasses' | 
  'glasses-alt' | 
  'glasses-round' | 
  'glide' | 
  'glide-g' | 
  'globe' | 
  'globe-africa' | 
  'globe-americas' | 
  'globe-asia' | 
  'globe-europe' | 
  'globe-oceania' | 
  'globe-pointer' | 
  'globe-snow' | 
  'globe-stand' | 
  'globe-wifi' | 
  'glove-boxing' | 
  'goal-net' | 
  'gofore' | 
  'golang' | 
  'golf-ball' | 
  'golf-ball-tee' | 
  'golf-club' | 
  'golf-flag-hole' | 
  'goodreads' | 
  'goodreads-g' | 
  'google' | 
  'google-drive' | 
  'google-pay' | 
  'google-play' | 
  'google-plus' | 
  'google-plus-g' | 
  'google-plus-square' | 
  'google-scholar' | 
  'google-wallet' | 
  'gopuram' | 
  'graduation-cap' | 
  'gramophone' | 
  'grapes' | 
  'grate' | 
  'grate-droplet' | 
  'gratipay' | 
  'grav' | 
  'greater-than' | 
  'greater-than-equal' | 
  'grid' | 
  'grid-2' | 
  'grid-2-plus' | 
  'grid-4' | 
  'grid-5' | 
  'grid-dividers' | 
  'grid-horizontal' | 
  'grid-round' | 
  'grid-round-2' | 
  'grid-round-2-plus' | 
  'grid-round-4' | 
  'grid-round-5' | 
  'grid3' | 
  'grill' | 
  'grill-fire' | 
  'grill-hot' | 
  'grimace' | 
  'grin' | 
  'grin-alt' | 
  'grin-beam' | 
  'grin-beam-sweat' | 
  'grin-hearts' | 
  'grin-squint' | 
  'grin-squint-tears' | 
  'grin-stars' | 
  'grin-tears' | 
  'grin-tongue' | 
  'grin-tongue-squint' | 
  'grin-tongue-wink' | 
  'grin-wink' | 
  'grip' | 
  'grip-dots' | 
  'grip-dots-vertical' | 
  'grip-horizontal' | 
  'grip-lines' | 
  'grip-lines-vertical' | 
  'grip-vertical' | 
  'gripfire' | 
  'group-arrows-rotate' | 
  'grunt' | 
  'guarani-sign' | 
  'guilded' | 
  'guitar' | 
  'guitar-electric' | 
  'guitars' | 
  'gulp' | 
  'gun' | 
  'gun-slash' | 
  'gun-squirt' | 
  'h' | 
  'h-square' | 
  'h1' | 
  'h2' | 
  'h3' | 
  'h4' | 
  'h5' | 
  'h6' | 
  'hacker-news' | 
  'hacker-news-square' | 
  'hackerrank' | 
  'hamburger' | 
  'hammer' | 
  'hammer-brush' | 
  'hammer-crash' | 
  'hammer-war' | 
  'hamsa' | 
  'hand' | 
  'hand-back-fist' | 
  'hand-back-point-down' | 
  'hand-back-point-left' | 
  'hand-back-point-ribbon' | 
  'hand-back-point-right' | 
  'hand-back-point-up' | 
  'hand-dots' | 
  'hand-fingers-crossed' | 
  'hand-fist' | 
  'hand-heart' | 
  'hand-holding' | 
  'hand-holding-box' | 
  'hand-holding-circle-dollar' | 
  'hand-holding-dollar' | 
  'hand-holding-droplet' | 
  'hand-holding-hand' | 
  'hand-holding-heart' | 
  'hand-holding-magic' | 
  'hand-holding-medical' | 
  'hand-holding-seedling' | 
  'hand-holding-skull' | 
  'hand-holding-usd' | 
  'hand-holding-water' | 
  'hand-horns' | 
  'hand-lizard' | 
  'hand-love' | 
  'hand-middle-finger' | 
  'hand-paper' | 
  'hand-peace' | 
  'hand-point-down' | 
  'hand-point-left' | 
  'hand-point-ribbon' | 
  'hand-point-right' | 
  'hand-point-up' | 
  'hand-pointer' | 
  'hand-receiving' | 
  'hand-rock' | 
  'hand-scissors' | 
  'hand-sparkles' | 
  'hand-spock' | 
  'hand-wave' | 
  'handcuffs' | 
  'hands' | 
  'hands-american-sign-language-interpreting' | 
  'hands-asl-interpreting' | 
  'hands-bound' | 
  'hands-bubbles' | 
  'hands-clapping' | 
  'hands-heart' | 
  'hands-helping' | 
  'hands-holding' | 
  'hands-holding-child' | 
  'hands-holding-circle' | 
  'hands-holding-diamond' | 
  'hands-holding-dollar' | 
  'hands-holding-heart' | 
  'hands-praying' | 
  'hands-usd' | 
  'hands-wash' | 
  'handshake' | 
  'handshake-alt' | 
  'handshake-alt-slash' | 
  'handshake-angle' | 
  'handshake-simple' | 
  'handshake-simple-slash' | 
  'handshake-slash' | 
  'hanukiah' | 
  'hard-drive' | 
  'hard-hat' | 
  'hard-of-hearing' | 
  'hashnode' | 
  'hashtag' | 
  'hashtag-lock' | 
  'hat-beach' | 
  'hat-chef' | 
  'hat-cowboy' | 
  'hat-cowboy-side' | 
  'hat-hard' | 
  'hat-santa' | 
  'hat-winter' | 
  'hat-witch' | 
  'hat-wizard' | 
  'haykal' | 
  'hdd' | 
  'head-side' | 
  'head-side-brain' | 
  'head-side-cough' | 
  'head-side-cough-slash' | 
  'head-side-gear' | 
  'head-side-goggles' | 
  'head-side-headphones' | 
  'head-side-heart' | 
  'head-side-mask' | 
  'head-side-medical' | 
  'head-side-virus' | 
  'head-vr' | 
  'header' | 
  'heading' | 
  'headphones' | 
  'headphones-alt' | 
  'headphones-simple' | 
  'headset' | 
  'heart' | 
  'heart-broken' | 
  'heart-circle' | 
  'heart-circle-bolt' | 
  'heart-circle-check' | 
  'heart-circle-exclamation' | 
  'heart-circle-minus' | 
  'heart-circle-plus' | 
  'heart-circle-xmark' | 
  'heart-crack' | 
  'heart-half' | 
  'heart-half-alt' | 
  'heart-half-stroke' | 
  'heart-music-camera-bolt' | 
  'heart-pulse' | 
  'heart-rate' | 
  'heart-square' | 
  'heartbeat' | 
  'heat' | 
  'helicopter' | 
  'helicopter-symbol' | 
  'helmet-battle' | 
  'helmet-safety' | 
  'helmet-un' | 
  'hexagon' | 
  'hexagon-check' | 
  'hexagon-divide' | 
  'hexagon-exclamation' | 
  'hexagon-image' | 
  'hexagon-minus' | 
  'hexagon-plus' | 
  'hexagon-vertical-nft' | 
  'hexagon-vertical-nft-slanted' | 
  'hexagon-xmark' | 
  'high-definition' | 
  'highlighter' | 
  'highlighter-line' | 
  'hiking' | 
  'hill-avalanche' | 
  'hill-rockslide' | 
  'hippo' | 
  'hips' | 
  'hire-a-helper' | 
  'history' | 
  'hive' | 
  'hockey-mask' | 
  'hockey-puck' | 
  'hockey-stick-puck' | 
  'hockey-sticks' | 
  'holly-berry' | 
  'home' | 
  'home-alt' | 
  'home-blank' | 
  'home-heart' | 
  'home-lg' | 
  'home-lg-alt' | 
  'home-user' | 
  'honey-pot' | 
  'hood-cloak' | 
  'hooli' | 
  'horizontal-rule' | 
  'hornbill' | 
  'horse' | 
  'horse-head' | 
  'horse-saddle' | 
  'hose' | 
  'hose-reel' | 
  'hospital' | 
  'hospital-alt' | 
  'hospital-symbol' | 
  'hospital-user' | 
  'hospital-wide' | 
  'hospitals' | 
  'hot-tub' | 
  'hot-tub-person' | 
  'hotdog' | 
  'hotel' | 
  'hotjar' | 
  'hourglass' | 
  'hourglass-clock' | 
  'hourglass-empty' | 
  'hourglass-end' | 
  'hourglass-half' | 
  'hourglass-start' | 
  'hourglass1' | 
  'hourglass2' | 
  'hourglass3' | 
  'house' | 
  'house-blank' | 
  'house-building' | 
  'house-chimney' | 
  'house-chimney-blank' | 
  'house-chimney-crack' | 
  'house-chimney-heart' | 
  'house-chimney-medical' | 
  'house-chimney-user' | 
  'house-chimney-window' | 
  'house-circle-check' | 
  'house-circle-exclamation' | 
  'house-circle-xmark' | 
  'house-crack' | 
  'house-damage' | 
  'house-day' | 
  'house-fire' | 
  'house-flag' | 
  'house-flood' | 
  'house-flood-water' | 
  'house-flood-water-circle-arrow-right' | 
  'house-heart' | 
  'house-laptop' | 
  'house-leave' | 
  'house-lock' | 
  'house-medical' | 
  'house-medical-circle-check' | 
  'house-medical-circle-exclamation' | 
  'house-medical-circle-xmark' | 
  'house-medical-flag' | 
  'house-night' | 
  'house-person-arrive' | 
  'house-person-depart' | 
  'house-person-leave' | 
  'house-person-return' | 
  'house-return' | 
  'house-signal' | 
  'house-tree' | 
  'house-tsunami' | 
  'house-turret' | 
  'house-user' | 
  'house-water' | 
  'house-window' | 
  'houzz' | 
  'hryvnia' | 
  'hryvnia-sign' | 
  'html5' | 
  'hubspot' | 
  'humidity' | 
  'hundred-points' | 
  'hurricane' | 
  'hydra' | 
  'hyphen' | 
  'i' | 
  'i-cursor' | 
  'ice-cream' | 
  'ice-skate' | 
  'icicles' | 
  'icons' | 
  'icons-alt' | 
  'id-badge' | 
  'id-card' | 
  'id-card-alt' | 
  'id-card-clip' | 
  'ideal' | 
  'igloo' | 
  'ils' | 
  'image' | 
  'image-landscape' | 
  'image-polaroid' | 
  'image-polaroid-user' | 
  'image-portrait' | 
  'image-slash' | 
  'image-user' | 
  'images' | 
  'images-user' | 
  'imdb' | 
  'inbox' | 
  'inbox-arrow-down' | 
  'inbox-arrow-up' | 
  'inbox-full' | 
  'inbox-in' | 
  'inbox-out' | 
  'inboxes' | 
  'indent' | 
  'indian-rupee' | 
  'indian-rupee-sign' | 
  'industry' | 
  'industry-alt' | 
  'industry-windows' | 
  'infinity' | 
  'info' | 
  'info-circle' | 
  'info-square' | 
  'inhaler' | 
  'innosoft' | 
  'input-numeric' | 
  'input-pipe' | 
  'input-text' | 
  'inr' | 
  'instagram' | 
  'instagram-square' | 
  'instalod' | 
  'institution' | 
  'integral' | 
  'intercom' | 
  'internet-explorer' | 
  'interrobang' | 
  'intersection' | 
  'inventory' | 
  'invision' | 
  'ioxhost' | 
  'island-tree-palm' | 
  'island-tropical' | 
  'italic' | 
  'itch-io' | 
  'itunes' | 
  'itunes-note' | 
  'j' | 
  'jack-o-lantern' | 
  'jar' | 
  'jar-wheat' | 
  'java' | 
  'jedi' | 
  'jedi-order' | 
  'jenkins' | 
  'jet-fighter' | 
  'jet-fighter-up' | 
  'jira' | 
  'joget' | 
  'joint' | 
  'joomla' | 
  'journal-whills' | 
  'joystick' | 
  'jpy' | 
  'js' | 
  'js-square' | 
  'jsfiddle' | 
  'jug' | 
  'jug-bottle' | 
  'jug-detergent' | 
  'jxl' | 
  'k' | 
  'kaaba' | 
  'kaggle' | 
  'kazoo' | 
  'kerning' | 
  'key' | 
  'key-skeleton' | 
  'key-skeleton-left-right' | 
  'keybase' | 
  'keyboard' | 
  'keyboard-brightness' | 
  'keyboard-brightness-low' | 
  'keyboard-down' | 
  'keyboard-left' | 
  'keycdn' | 
  'keynote' | 
  'khanda' | 
  'kickstarter' | 
  'kickstarter-k' | 
  'kidneys' | 
  'kip-sign' | 
  'kiss' | 
  'kiss-beam' | 
  'kiss-wink-heart' | 
  'kit-medical' | 
  'kitchen-set' | 
  'kite' | 
  'kiwi-bird' | 
  'kiwi-fruit' | 
  'knife' | 
  'knife-kitchen' | 
  'korvue' | 
  'krw' | 
  'l' | 
  'lacrosse-stick' | 
  'lacrosse-stick-ball' | 
  'ladder-water' | 
  'lambda' | 
  'lamp' | 
  'lamp-desk' | 
  'lamp-floor' | 
  'lamp-street' | 
  'land-mine-on' | 
  'landmark' | 
  'landmark-alt' | 
  'landmark-dome' | 
  'landmark-flag' | 
  'landmark-magnifying-glass' | 
  'landscape' | 
  'language' | 
  'laptop' | 
  'laptop-arrow-down' | 
  'laptop-binary' | 
  'laptop-code' | 
  'laptop-file' | 
  'laptop-house' | 
  'laptop-medical' | 
  'laptop-mobile' | 
  'laptop-slash' | 
  'laravel' | 
  'lari-sign' | 
  'lasso' | 
  'lasso-sparkles' | 
  'lastfm' | 
  'lastfm-square' | 
  'laugh' | 
  'laugh-beam' | 
  'laugh-squint' | 
  'laugh-wink' | 
  'layer-group' | 
  'layer-group-minus' | 
  'layer-group-plus' | 
  'layer-minus' | 
  'layer-plus' | 
  'leaf' | 
  'leaf-heart' | 
  'leaf-maple' | 
  'leaf-oak' | 
  'leafy-green' | 
  'leanpub' | 
  'left' | 
  'left-from-bracket' | 
  'left-from-line' | 
  'left-long' | 
  'left-long-to-line' | 
  'left-right' | 
  'left-to-bracket' | 
  'left-to-line' | 
  'legal' | 
  'lemon' | 
  'less' | 
  'less-than' | 
  'less-than-equal' | 
  'letterboxd' | 
  'level-down' | 
  'level-down-alt' | 
  'level-up' | 
  'level-up-alt' | 
  'life-ring' | 
  'light-ceiling' | 
  'light-emergency' | 
  'light-emergency-on' | 
  'light-switch' | 
  'light-switch-off' | 
  'light-switch-on' | 
  'lightbulb' | 
  'lightbulb-cfl' | 
  'lightbulb-cfl-on' | 
  'lightbulb-dollar' | 
  'lightbulb-exclamation' | 
  'lightbulb-exclamation-on' | 
  'lightbulb-gear' | 
  'lightbulb-message' | 
  'lightbulb-on' | 
  'lightbulb-slash' | 
  'lighthouse' | 
  'lights-holiday' | 
  'line' | 
  'line-chart' | 
  'line-columns' | 
  'line-height' | 
  'lines-leaning' | 
  'link' | 
  'link-horizontal' | 
  'link-horizontal-slash' | 
  'link-simple' | 
  'link-simple-slash' | 
  'link-slash' | 
  'linkedin' | 
  'linkedin-in' | 
  'linode' | 
  'linux' | 
  'lips' | 
  'lira-sign' | 
  'list' | 
  'list-alt' | 
  'list-check' | 
  'list-dots' | 
  'list-dropdown' | 
  'list-music' | 
  'list-numeric' | 
  'list-ol' | 
  'list-radio' | 
  'list-squares' | 
  'list-timeline' | 
  'list-tree' | 
  'list-ul' | 
  'list12' | 
  'litecoin-sign' | 
  'loader' | 
  'lobster' | 
  'location' | 
  'location-arrow' | 
  'location-arrow-up' | 
  'location-check' | 
  'location-circle' | 
  'location-crosshairs' | 
  'location-crosshairs-slash' | 
  'location-dot' | 
  'location-dot-slash' | 
  'location-exclamation' | 
  'location-minus' | 
  'location-pen' | 
  'location-pin' | 
  'location-pin-lock' | 
  'location-pin-slash' | 
  'location-plus' | 
  'location-question' | 
  'location-slash' | 
  'location-smile' | 
  'location-xmark' | 
  'lock' | 
  'lock-a' | 
  'lock-alt' | 
  'lock-hashtag' | 
  'lock-keyhole' | 
  'lock-keyhole-open' | 
  'lock-open' | 
  'lock-open-alt' | 
  'locust' | 
  'lollipop' | 
  'lollypop' | 
  'long-arrow-alt-down' | 
  'long-arrow-alt-left' | 
  'long-arrow-alt-right' | 
  'long-arrow-alt-up' | 
  'long-arrow-down' | 
  'long-arrow-left' | 
  'long-arrow-right' | 
  'long-arrow-up' | 
  'loveseat' | 
  'low-vision' | 
  'luchador' | 
  'luchador-mask' | 
  'luggage-cart' | 
  'lungs' | 
  'lungs-virus' | 
  'lyft' | 
  'm' | 
  'mace' | 
  'magento' | 
  'magic' | 
  'magic-wand-sparkles' | 
  'magnet' | 
  'magnifying-glass' | 
  'magnifying-glass-arrow-right' | 
  'magnifying-glass-arrows-rotate' | 
  'magnifying-glass-chart' | 
  'magnifying-glass-dollar' | 
  'magnifying-glass-location' | 
  'magnifying-glass-minus' | 
  'magnifying-glass-music' | 
  'magnifying-glass-play' | 
  'magnifying-glass-plus' | 
  'magnifying-glass-waveform' | 
  'mail-bulk' | 
  'mail-forward' | 
  'mail-reply' | 
  'mail-reply-all' | 
  'mailbox' | 
  'mailbox-flag-up' | 
  'mailchimp' | 
  'maki-roll' | 
  'makizushi' | 
  'male' | 
  'manat-sign' | 
  'mandalorian' | 
  'mandolin' | 
  'mango' | 
  'manhole' | 
  'map' | 
  'map-location' | 
  'map-location-dot' | 
  'map-marked' | 
  'map-marked-alt' | 
  'map-marker' | 
  'map-marker-alt' | 
  'map-marker-alt-slash' | 
  'map-marker-check' | 
  'map-marker-edit' | 
  'map-marker-exclamation' | 
  'map-marker-minus' | 
  'map-marker-plus' | 
  'map-marker-question' | 
  'map-marker-slash' | 
  'map-marker-smile' | 
  'map-marker-times' | 
  'map-marker-xmark' | 
  'map-pin' | 
  'map-signs' | 
  'markdown' | 
  'marker' | 
  'mars' | 
  'mars-and-venus' | 
  'mars-and-venus-burst' | 
  'mars-double' | 
  'mars-stroke' | 
  'mars-stroke-h' | 
  'mars-stroke-right' | 
  'mars-stroke-up' | 
  'mars-stroke-v' | 
  'martini-glass' | 
  'martini-glass-citrus' | 
  'martini-glass-empty' | 
  'mask' | 
  'mask-face' | 
  'mask-luchador' | 
  'mask-snorkel' | 
  'mask-ventilator' | 
  'masks-theater' | 
  'mastodon' | 
  'mattress-pillow' | 
  'maxcdn' | 
  'maximize' | 
  'mdb' | 
  'meat' | 
  'medal' | 
  'medapps' | 
  'medium' | 
  'medium-m' | 
  'medkit' | 
  'medrt' | 
  'meetup' | 
  'megaphone' | 
  'megaport' | 
  'meh' | 
  'meh-blank' | 
  'meh-rolling-eyes' | 
  'melon' | 
  'melon-slice' | 
  'memo' | 
  'memo-circle-check' | 
  'memo-circle-info' | 
  'memo-pad' | 
  'memory' | 
  'mendeley' | 
  'menorah' | 
  'mercury' | 
  'merge' | 
  'message' | 
  'message-arrow-down' | 
  'message-arrow-up' | 
  'message-arrow-up-right' | 
  'message-bot' | 
  'message-captions' | 
  'message-check' | 
  'message-code' | 
  'message-dollar' | 
  'message-dots' | 
  'message-edit' | 
  'message-exclamation' | 
  'message-heart' | 
  'message-image' | 
  'message-lines' | 
  'message-medical' | 
  'message-middle' | 
  'message-middle-top' | 
  'message-minus' | 
  'message-music' | 
  'message-pen' | 
  'message-plus' | 
  'message-question' | 
  'message-quote' | 
  'message-slash' | 
  'message-smile' | 
  'message-sms' | 
  'message-text' | 
  'message-times' | 
  'message-xmark' | 
  'messages' | 
  'messages-dollar' | 
  'messages-question' | 
  'messaging' | 
  'meta' | 
  'meteor' | 
  'meter' | 
  'meter-bolt' | 
  'meter-droplet' | 
  'meter-fire' | 
  'microblog' | 
  'microchip' | 
  'microchip-ai' | 
  'microphone' | 
  'microphone-alt' | 
  'microphone-alt-slash' | 
  'microphone-circle' | 
  'microphone-circle-alt' | 
  'microphone-lines' | 
  'microphone-lines-slash' | 
  'microphone-slash' | 
  'microphone-stand' | 
  'microscope' | 
  'microsoft' | 
  'microwave' | 
  'mill-sign' | 
  'mind-share' | 
  'minimize' | 
  'mintbit' | 
  'minus' | 
  'minus-circle' | 
  'minus-hexagon' | 
  'minus-large' | 
  'minus-octagon' | 
  'minus-square' | 
  'mistletoe' | 
  'mitten' | 
  'mix' | 
  'mixcloud' | 
  'mixer' | 
  'mizuni' | 
  'mobile' | 
  'mobile-alt' | 
  'mobile-android' | 
  'mobile-android-alt' | 
  'mobile-button' | 
  'mobile-iphone' | 
  'mobile-notch' | 
  'mobile-phone' | 
  'mobile-retro' | 
  'mobile-screen' | 
  'mobile-screen-button' | 
  'mobile-signal' | 
  'mobile-signal-out' | 
  'modx' | 
  'monero' | 
  'money-bill' | 
  'money-bill-1' | 
  'money-bill-1-wave' | 
  'money-bill-alt' | 
  'money-bill-simple' | 
  'money-bill-simple-wave' | 
  'money-bill-transfer' | 
  'money-bill-trend-up' | 
  'money-bill-wave' | 
  'money-bill-wave-alt' | 
  'money-bill-wheat' | 
  'money-bills' | 
  'money-bills-alt' | 
  'money-bills-simple' | 
  'money-check' | 
  'money-check-alt' | 
  'money-check-dollar' | 
  'money-check-dollar-pen' | 
  'money-check-edit' | 
  'money-check-edit-alt' | 
  'money-check-pen' | 
  'money-from-bracket' | 
  'money-simple-from-bracket' | 
  'monitor-heart-rate' | 
  'monitor-waveform' | 
  'monkey' | 
  'monument' | 
  'moon' | 
  'moon-cloud' | 
  'moon-over-sun' | 
  'moon-stars' | 
  'moped' | 
  'mortar-board' | 
  'mortar-pestle' | 
  'mosque' | 
  'mosquito' | 
  'mosquito-net' | 
  'motorcycle' | 
  'mound' | 
  'mountain' | 
  'mountain-city' | 
  'mountain-sun' | 
  'mountains' | 
  'mouse' | 
  'mouse-alt' | 
  'mouse-field' | 
  'mouse-pointer' | 
  'mp3-player' | 
  'mug' | 
  'mug-hot' | 
  'mug-marshmallows' | 
  'mug-saucer' | 
  'mug-tea' | 
  'mug-tea-saucer' | 
  'multiply' | 
  'museum' | 
  'mushroom' | 
  'music' | 
  'music-alt' | 
  'music-alt-slash' | 
  'music-magnifying-glass' | 
  'music-note' | 
  'music-note-slash' | 
  'music-slash' | 
  'mustache' | 
  'n' | 
  'naira-sign' | 
  'napster' | 
  'narwhal' | 
  'navicon' | 
  'neos' | 
  'nesting-dolls' | 
  'network-wired' | 
  'neuter' | 
  'newspaper' | 
  'nfc' | 
  'nfc-directional' | 
  'nfc-lock' | 
  'nfc-magnifying-glass' | 
  'nfc-pen' | 
  'nfc-signal' | 
  'nfc-slash' | 
  'nfc-symbol' | 
  'nfc-trash' | 
  'nigiri' | 
  'nimblr' | 
  'node' | 
  'node-js' | 
  'nose' | 
  'not-equal' | 
  'notdef' | 
  'note' | 
  'note-medical' | 
  'note-sticky' | 
  'notebook' | 
  'notes' | 
  'notes-medical' | 
  'npm' | 
  'ns8' | 
  'nutritionix' | 
  'o' | 
  'object-exclude' | 
  'object-group' | 
  'object-intersect' | 
  'object-subtract' | 
  'object-ungroup' | 
  'object-union' | 
  'objects-align-bottom' | 
  'objects-align-center-horizontal' | 
  'objects-align-center-vertical' | 
  'objects-align-left' | 
  'objects-align-right' | 
  'objects-align-top' | 
  'objects-column' | 
  'octagon' | 
  'octagon-check' | 
  'octagon-divide' | 
  'octagon-exclamation' | 
  'octagon-minus' | 
  'octagon-plus' | 
  'octagon-xmark' | 
  'octopus' | 
  'octopus-deploy' | 
  'odnoklassniki' | 
  'odnoklassniki-square' | 
  'odysee' | 
  'oil-can' | 
  'oil-can-drip' | 
  'oil-temp' | 
  'oil-temperature' | 
  'oil-well' | 
  'old-republic' | 
  'olive' | 
  'olive-branch' | 
  'om' | 
  'omega' | 
  'onion' | 
  'opencart' | 
  'openid' | 
  'opensuse' | 
  'opera' | 
  'optin-monster' | 
  'option' | 
  'orcid' | 
  'ornament' | 
  'osi' | 
  'otter' | 
  'outdent' | 
  'outlet' | 
  'oven' | 
  'overline' | 
  'p' | 
  'padlet' | 
  'page' | 
  'page-break' | 
  'page-caret-down' | 
  'page-caret-up' | 
  'page4' | 
  'pagelines' | 
  'pager' | 
  'paint-brush' | 
  'paint-brush-alt' | 
  'paint-brush-fine' | 
  'paint-roller' | 
  'paintbrush' | 
  'paintbrush-alt' | 
  'paintbrush-fine' | 
  'paintbrush-pencil' | 
  'palette' | 
  'palette-boxes' | 
  'palfed' | 
  'pallet' | 
  'pallet-alt' | 
  'pallet-box' | 
  'pallet-boxes' | 
  'pan-food' | 
  'pan-frying' | 
  'pancakes' | 
  'panel-ews' | 
  'panel-fire' | 
  'panorama' | 
  'paper-plane' | 
  'paper-plane-alt' | 
  'paper-plane-top' | 
  'paperclip' | 
  'paperclip-vertical' | 
  'parachute-box' | 
  'paragraph' | 
  'paragraph-left' | 
  'paragraph-rtl' | 
  'parentheses' | 
  'parenthesis' | 
  'parking' | 
  'parking-circle' | 
  'parking-circle-slash' | 
  'parking-slash' | 
  'party-back' | 
  'party-bell' | 
  'party-horn' | 
  'passport' | 
  'pastafarianism' | 
  'paste' | 
  'patreon' | 
  'pause' | 
  'pause-circle' | 
  'paw' | 
  'paw-alt' | 
  'paw-claws' | 
  'paw-simple' | 
  'paypal' | 
  'peace' | 
  'peach' | 
  'peanut' | 
  'peanuts' | 
  'peapod' | 
  'pear' | 
  'pedestal' | 
  'pegasus' | 
  'pen' | 
  'pen-alt' | 
  'pen-alt-slash' | 
  'pen-circle' | 
  'pen-clip' | 
  'pen-clip-slash' | 
  'pen-fancy' | 
  'pen-fancy-slash' | 
  'pen-field' | 
  'pen-line' | 
  'pen-nib' | 
  'pen-nib-slash' | 
  'pen-paintbrush' | 
  'pen-ruler' | 
  'pen-slash' | 
  'pen-square' | 
  'pen-swirl' | 
  'pen-to-square' | 
  'pencil' | 
  'pencil-alt' | 
  'pencil-mechanical' | 
  'pencil-paintbrush' | 
  'pencil-ruler' | 
  'pencil-slash' | 
  'pencil-square' | 
  'pennant' | 
  'people' | 
  'people-arrows' | 
  'people-arrows-left-right' | 
  'people-carry' | 
  'people-carry-box' | 
  'people-dress' | 
  'people-dress-simple' | 
  'people-group' | 
  'people-line' | 
  'people-pants' | 
  'people-pants-simple' | 
  'people-pulling' | 
  'people-robbery' | 
  'people-roof' | 
  'people-simple' | 
  'pepper' | 
  'pepper-hot' | 
  'perbyte' | 
  'percent' | 
  'percentage' | 
  'period' | 
  'periscope' | 
  'person' | 
  'person-arrow-down-to-line' | 
  'person-arrow-up-from-line' | 
  'person-biking' | 
  'person-biking-mountain' | 
  'person-booth' | 
  'person-breastfeeding' | 
  'person-burst' | 
  'person-cane' | 
  'person-carry' | 
  'person-carry-box' | 
  'person-chalkboard' | 
  'person-circle-check' | 
  'person-circle-exclamation' | 
  'person-circle-minus' | 
  'person-circle-plus' | 
  'person-circle-question' | 
  'person-circle-xmark' | 
  'person-digging' | 
  'person-dolly' | 
  'person-dolly-empty' | 
  'person-dots-from-line' | 
  'person-dress' | 
  'person-dress-burst' | 
  'person-dress-fairy' | 
  'person-dress-simple' | 
  'person-drowning' | 
  'person-fairy' | 
  'person-falling' | 
  'person-falling-burst' | 
  'person-from-portal' | 
  'person-half-dress' | 
  'person-harassing' | 
  'person-hiking' | 
  'person-military-pointing' | 
  'person-military-rifle' | 
  'person-military-to-person' | 
  'person-pinball' | 
  'person-praying' | 
  'person-pregnant' | 
  'person-rays' | 
  'person-rifle' | 
  'person-running' | 
  'person-running-fast' | 
  'person-seat' | 
  'person-seat-reclined' | 
  'person-shelter' | 
  'person-sign' | 
  'person-simple' | 
  'person-skating' | 
  'person-ski-jumping' | 
  'person-ski-lift' | 
  'person-skiing' | 
  'person-skiing-nordic' | 
  'person-sledding' | 
  'person-snowboarding' | 
  'person-snowmobiling' | 
  'person-swimming' | 
  'person-through-window' | 
  'person-to-door' | 
  'person-to-portal' | 
  'person-walking' | 
  'person-walking-arrow-loop-left' | 
  'person-walking-arrow-right' | 
  'person-walking-dashed-line-arrow-right' | 
  'person-walking-luggage' | 
  'person-walking-with-cane' | 
  'peseta-sign' | 
  'peso-sign' | 
  'phabricator' | 
  'phoenix-framework' | 
  'phoenix-squadron' | 
  'phone' | 
  'phone-alt' | 
  'phone-arrow-down' | 
  'phone-arrow-down-left' | 
  'phone-arrow-right' | 
  'phone-arrow-up' | 
  'phone-arrow-up-right' | 
  'phone-circle' | 
  'phone-circle-alt' | 
  'phone-circle-down' | 
  'phone-flip' | 
  'phone-hangup' | 
  'phone-incoming' | 
  'phone-intercom' | 
  'phone-laptop' | 
  'phone-missed' | 
  'phone-office' | 
  'phone-outgoing' | 
  'phone-plus' | 
  'phone-rotary' | 
  'phone-slash' | 
  'phone-square' | 
  'phone-square-alt' | 
  'phone-square-down' | 
  'phone-volume' | 
  'phone-xmark' | 
  'photo-film' | 
  'photo-film-music' | 
  'photo-video' | 
  'php' | 
  'pi' | 
  'piano' | 
  'piano-keyboard' | 
  'pickaxe' | 
  'pickleball' | 
  'pie' | 
  'pie-chart' | 
  'pied-piper' | 
  'pied-piper-alt' | 
  'pied-piper-hat' | 
  'pied-piper-pp' | 
  'pied-piper-square' | 
  'pig' | 
  'piggy-bank' | 
  'pills' | 
  'pinata' | 
  'pinball' | 
  'pineapple' | 
  'ping-pong-paddle-ball' | 
  'pinterest' | 
  'pinterest-p' | 
  'pinterest-square' | 
  'pipe' | 
  'pipe-circle-check' | 
  'pipe-collar' | 
  'pipe-section' | 
  'pipe-smoking' | 
  'pipe-valve' | 
  'pix' | 
  'pixiv' | 
  'pizza' | 
  'pizza-slice' | 
  'place-of-worship' | 
  'plane' | 
  'plane-alt' | 
  'plane-arrival' | 
  'plane-circle-check' | 
  'plane-circle-exclamation' | 
  'plane-circle-xmark' | 
  'plane-departure' | 
  'plane-engines' | 
  'plane-lock' | 
  'plane-prop' | 
  'plane-slash' | 
  'plane-tail' | 
  'plane-up' | 
  'plane-up-slash' | 
  'planet-moon' | 
  'planet-ringed' | 
  'plant-wilt' | 
  'plate-utensils' | 
  'plate-wheat' | 
  'play' | 
  'play-circle' | 
  'play-pause' | 
  'playstation' | 
  'plug' | 
  'plug-circle-bolt' | 
  'plug-circle-check' | 
  'plug-circle-exclamation' | 
  'plug-circle-minus' | 
  'plug-circle-plus' | 
  'plug-circle-xmark' | 
  'plus' | 
  'plus-circle' | 
  'plus-hexagon' | 
  'plus-large' | 
  'plus-minus' | 
  'plus-octagon' | 
  'plus-square' | 
  'podcast' | 
  'podium' | 
  'podium-star' | 
  'police-box' | 
  'poll' | 
  'poll-h' | 
  'poll-people' | 
  'pompebled' | 
  'poo' | 
  'poo-bolt' | 
  'poo-storm' | 
  'pool-8-ball' | 
  'poop' | 
  'popcorn' | 
  'popsicle' | 
  'portal-enter' | 
  'portal-exit' | 
  'portrait' | 
  'pot-food' | 
  'potato' | 
  'pound-sign' | 
  'power-off' | 
  'pray' | 
  'praying-hands' | 
  'prescription' | 
  'prescription-bottle' | 
  'prescription-bottle-alt' | 
  'prescription-bottle-medical' | 
  'prescription-bottle-pill' | 
  'presentation' | 
  'presentation-screen' | 
  'pretzel' | 
  'print' | 
  'print-magnifying-glass' | 
  'print-search' | 
  'print-slash' | 
  'pro' | 
  'procedures' | 
  'product-hunt' | 
  'project-diagram' | 
  'projector' | 
  'pump' | 
  'pump-medical' | 
  'pump-soap' | 
  'pumpkin' | 
  'pushed' | 
  'puzzle' | 
  'puzzle-piece' | 
  'puzzle-piece-alt' | 
  'puzzle-piece-simple' | 
  'python' | 
  'q' | 
  'qq' | 
  'qrcode' | 
  'question' | 
  'question-circle' | 
  'question-square' | 
  'quidditch' | 
  'quidditch-broom-ball' | 
  'quinscape' | 
  'quora' | 
  'quote-left' | 
  'quote-left-alt' | 
  'quote-right' | 
  'quote-right-alt' | 
  'quotes' | 
  'quran' | 
  'r' | 
  'r-project' | 
  'rabbit' | 
  'rabbit-fast' | 
  'rabbit-running' | 
  'raccoon' | 
  'racquet' | 
  'radar' | 
  'radiation' | 
  'radiation-alt' | 
  'radio' | 
  'radio-alt' | 
  'radio-tuner' | 
  'rainbow' | 
  'raindrops' | 
  'ram' | 
  'ramp-loading' | 
  'random' | 
  'ranking-star' | 
  'raspberry-pi' | 
  'ravelry' | 
  'raygun' | 
  'react' | 
  'reacteurope' | 
  'readme' | 
  'rebel' | 
  'receipt' | 
  'record-vinyl' | 
  'rectangle' | 
  'rectangle-ad' | 
  'rectangle-barcode' | 
  'rectangle-code' | 
  'rectangle-hd' | 
  'rectangle-history' | 
  'rectangle-history-circle-plus' | 
  'rectangle-history-circle-user' | 
  'rectangle-landscape' | 
  'rectangle-list' | 
  'rectangle-portrait' | 
  'rectangle-pro' | 
  'rectangle-sd' | 
  'rectangle-terminal' | 
  'rectangle-times' | 
  'rectangle-vertical' | 
  'rectangle-vertical-history' | 
  'rectangle-wide' | 
  'rectangle-xmark' | 
  'rectangles-mixed' | 
  'recycle' | 
  'red-river' | 
  'reddit' | 
  'reddit-alien' | 
  'reddit-square' | 
  'redhat' | 
  'redo' | 
  'redo-alt' | 
  'reel' | 
  'reflect-both' | 
  'reflect-horizontal' | 
  'reflect-vertical' | 
  'refresh' | 
  'refrigerator' | 
  'registered' | 
  'remove' | 
  'remove-format' | 
  'rendact' | 
  'renren' | 
  'reorder' | 
  'repeat' | 
  'repeat-1' | 
  'repeat-alt' | 
  'repeat1-alt' | 
  'reply' | 
  'reply-all' | 
  'reply-clock' | 
  'reply-time' | 
  'replyd' | 
  'republican' | 
  'researchgate' | 
  'resolving' | 
  'restroom' | 
  'restroom-simple' | 
  'retweet' | 
  'retweet-alt' | 
  'rev' | 
  'rhombus' | 
  'ribbon' | 
  'right' | 
  'right-from-bracket' | 
  'right-from-line' | 
  'right-left' | 
  'right-left-large' | 
  'right-long' | 
  'right-long-to-line' | 
  'right-to-bracket' | 
  'right-to-line' | 
  'ring' | 
  'ring-diamond' | 
  'rings-wedding' | 
  'rmb' | 
  'road' | 
  'road-barrier' | 
  'road-bridge' | 
  'road-circle-check' | 
  'road-circle-exclamation' | 
  'road-circle-xmark' | 
  'road-lock' | 
  'road-spikes' | 
  'robot' | 
  'robot-astromech' | 
  'rocket' | 
  'rocket-launch' | 
  'rocketchat' | 
  'rockrms' | 
  'rod-asclepius' | 
  'rod-snake' | 
  'roller-coaster' | 
  'rotate' | 
  'rotate-back' | 
  'rotate-backward' | 
  'rotate-exclamation' | 
  'rotate-forward' | 
  'rotate-left' | 
  'rotate-reverse' | 
  'rotate-right' | 
  'rouble' | 
  'route' | 
  'route-highway' | 
  'route-interstate' | 
  'router' | 
  'rows' | 
  'rss' | 
  'rss-square' | 
  'rub' | 
  'ruble' | 
  'ruble-sign' | 
  'rug' | 
  'rugby-ball' | 
  'ruler' | 
  'ruler-combined' | 
  'ruler-horizontal' | 
  'ruler-triangle' | 
  'ruler-vertical' | 
  'running' | 
  'rupee' | 
  'rupee-sign' | 
  'rupiah-sign' | 
  'rust' | 
  'rv' | 
  's' | 
  'sack' | 
  'sack-dollar' | 
  'sack-xmark' | 
  'sad-cry' | 
  'sad-tear' | 
  'safari' | 
  'sailboat' | 
  'salad' | 
  'salesforce' | 
  'salt-shaker' | 
  'sandwich' | 
  'sass' | 
  'satellite' | 
  'satellite-dish' | 
  'sausage' | 
  'save' | 
  'save-circle-arrow-right' | 
  'save-circle-xmark' | 
  'save-times' | 
  'sax-hot' | 
  'saxophone' | 
  'saxophone-fire' | 
  'scale-balanced' | 
  'scale-unbalanced' | 
  'scale-unbalanced-flip' | 
  'scalpel' | 
  'scalpel-line-dashed' | 
  'scalpel-path' | 
  'scanner' | 
  'scanner-gun' | 
  'scanner-image' | 
  'scanner-keyboard' | 
  'scanner-touchscreen' | 
  'scarecrow' | 
  'scarf' | 
  'schlix' | 
  'school' | 
  'school-circle-check' | 
  'school-circle-exclamation' | 
  'school-circle-xmark' | 
  'school-flag' | 
  'school-lock' | 
  'scissors' | 
  'screen-users' | 
  'screencast' | 
  'screenpal' | 
  'screenshot' | 
  'screwdriver' | 
  'screwdriver-wrench' | 
  'scribble' | 
  'scribd' | 
  'scroll' | 
  'scroll-old' | 
  'scroll-ribbon' | 
  'scroll-torah' | 
  'scrubber' | 
  'scythe' | 
  'sd-card' | 
  'sd-cards' | 
  'seal' | 
  'seal-exclamation' | 
  'seal-question' | 
  'search' | 
  'search-dollar' | 
  'search-location' | 
  'search-minus' | 
  'search-plus' | 
  'searchengin' | 
  'seat-airline' | 
  'section' | 
  'seedling' | 
  'sellcast' | 
  'sellsy' | 
  'semicolon' | 
  'send' | 
  'send-back' | 
  'send-backward' | 
  'sensor' | 
  'sensor-alert' | 
  'sensor-cloud' | 
  'sensor-fire' | 
  'sensor-on' | 
  'sensor-smoke' | 
  'sensor-triangle-exclamation' | 
  'server' | 
  'servicestack' | 
  'shapes' | 
  'share' | 
  'share-all' | 
  'share-alt' | 
  'share-alt-square' | 
  'share-from-square' | 
  'share-nodes' | 
  'share-square' | 
  'sheep' | 
  'sheet-plastic' | 
  'shekel' | 
  'shekel-sign' | 
  'shelves' | 
  'shelves-empty' | 
  'sheqel' | 
  'sheqel-sign' | 
  'shield' | 
  'shield-alt' | 
  'shield-blank' | 
  'shield-cat' | 
  'shield-check' | 
  'shield-cross' | 
  'shield-dog' | 
  'shield-exclamation' | 
  'shield-halved' | 
  'shield-heart' | 
  'shield-keyhole' | 
  'shield-minus' | 
  'shield-plus' | 
  'shield-quartered' | 
  'shield-slash' | 
  'shield-times' | 
  'shield-virus' | 
  'shield-xmark' | 
  'ship' | 
  'shipping-fast' | 
  'shipping-timed' | 
  'shirt' | 
  'shirt-long-sleeve' | 
  'shirt-running' | 
  'shirt-tank-top' | 
  'shirtsinbulk' | 
  'shish-kebab' | 
  'shoe-prints' | 
  'shoelace' | 
  'shop' | 
  'shop-lock' | 
  'shop-slash' | 
  'shopify' | 
  'shopping-bag' | 
  'shopping-basket' | 
  'shopping-basket-alt' | 
  'shopping-cart' | 
  'shopware' | 
  'shortcake' | 
  'shovel' | 
  'shovel-snow' | 
  'shower' | 
  'shower-alt' | 
  'shower-down' | 
  'shredder' | 
  'shrimp' | 
  'shuffle' | 
  'shutters' | 
  'shuttle-space' | 
  'shuttle-van' | 
  'shuttlecock' | 
  'sickle' | 
  'sidebar' | 
  'sidebar-flip' | 
  'sigma' | 
  'sign' | 
  'sign-hanging' | 
  'sign-in' | 
  'sign-in-alt' | 
  'sign-language' | 
  'sign-out' | 
  'sign-out-alt' | 
  'sign-post' | 
  'sign-posts' | 
  'sign-posts-wrench' | 
  'signal' | 
  'signal-alt' | 
  'signal-alt-slash' | 
  'signal-alt1' | 
  'signal-alt2' | 
  'signal-alt3' | 
  'signal-alt4' | 
  'signal-bars' | 
  'signal-bars-fair' | 
  'signal-bars-good' | 
  'signal-bars-slash' | 
  'signal-bars-strong' | 
  'signal-bars-weak' | 
  'signal-fair' | 
  'signal-good' | 
  'signal-messenger' | 
  'signal-perfect' | 
  'signal-slash' | 
  'signal-stream' | 
  'signal-stream-slash' | 
  'signal-strong' | 
  'signal-weak' | 
  'signal1' | 
  'signal2' | 
  'signal3' | 
  'signal4' | 
  'signal5' | 
  'signature' | 
  'signature-lock' | 
  'signature-slash' | 
  'signing' | 
  'signs-post' | 
  'sim-card' | 
  'sim-cards' | 
  'simplybuilt' | 
  'sink' | 
  'siren' | 
  'siren-on' | 
  'sistrix' | 
  'sitemap' | 
  'sith' | 
  'sitrox' | 
  'skating' | 
  'skeleton' | 
  'skeleton-ribs' | 
  'sketch' | 
  'ski-boot' | 
  'ski-boot-ski' | 
  'ski-jump' | 
  'ski-lift' | 
  'skiing' | 
  'skiing-nordic' | 
  'skull' | 
  'skull-cow' | 
  'skull-crossbones' | 
  'skyatlas' | 
  'skype' | 
  'slack' | 
  'slack-hash' | 
  'slash' | 
  'slash-back' | 
  'slash-forward' | 
  'sledding' | 
  'sleigh' | 
  'slider' | 
  'sliders' | 
  'sliders-h' | 
  'sliders-h-square' | 
  'sliders-simple' | 
  'sliders-up' | 
  'sliders-v' | 
  'sliders-v-square' | 
  'slideshare' | 
  'slot-machine' | 
  'smile' | 
  'smile-beam' | 
  'smile-plus' | 
  'smile-wink' | 
  'smog' | 
  'smoke' | 
  'smoking' | 
  'smoking-ban' | 
  'sms' | 
  'snake' | 
  'snapchat' | 
  'snapchat-ghost' | 
  'snapchat-square' | 
  'snooze' | 
  'snow-blowing' | 
  'snowboarding' | 
  'snowflake' | 
  'snowflake-droplets' | 
  'snowflakes' | 
  'snowman' | 
  'snowman-head' | 
  'snowmobile' | 
  'snowplow' | 
  'soap' | 
  'soccer-ball' | 
  'socks' | 
  'soft-serve' | 
  'solar-panel' | 
  'solar-system' | 
  'sort' | 
  'sort-alpha-asc' | 
  'sort-alpha-desc' | 
  'sort-alpha-down' | 
  'sort-alpha-down-alt' | 
  'sort-alpha-up' | 
  'sort-alpha-up-alt' | 
  'sort-alt' | 
  'sort-amount-asc' | 
  'sort-amount-desc' | 
  'sort-amount-down' | 
  'sort-amount-down-alt' | 
  'sort-amount-up' | 
  'sort-amount-up-alt' | 
  'sort-asc' | 
  'sort-circle' | 
  'sort-circle-down' | 
  'sort-circle-up' | 
  'sort-desc' | 
  'sort-down' | 
  'sort-numeric-asc' | 
  'sort-numeric-desc' | 
  'sort-numeric-down' | 
  'sort-numeric-down-alt' | 
  'sort-numeric-up' | 
  'sort-numeric-up-alt' | 
  'sort-shapes-down' | 
  'sort-shapes-down-alt' | 
  'sort-shapes-up' | 
  'sort-shapes-up-alt' | 
  'sort-size-down' | 
  'sort-size-down-alt' | 
  'sort-size-up' | 
  'sort-size-up-alt' | 
  'sort-up' | 
  'sort-up-down' | 
  'soundcloud' | 
  'soup' | 
  'sourcetree' | 
  'spa' | 
  'space-awesome' | 
  'space-shuttle' | 
  'space-station-moon' | 
  'space-station-moon-alt' | 
  'space-station-moon-construction' | 
  'spade' | 
  'spaghetti-monster-flying' | 
  'sparkle' | 
  'sparkles' | 
  'speakap' | 
  'speaker' | 
  'speaker-deck' | 
  'speakers' | 
  'spell-check' | 
  'spider' | 
  'spider-black-widow' | 
  'spider-web' | 
  'spinner' | 
  'spinner-scale' | 
  'spinner-third' | 
  'split' | 
  'splotch' | 
  'spoon' | 
  'sportsball' | 
  'spotify' | 
  'spray-can' | 
  'spray-can-sparkles' | 
  'sprinkler' | 
  'sprinkler-ceiling' | 
  'sprout' | 
  'square' | 
  'square-0' | 
  'square-1' | 
  'square-2' | 
  'square-3' | 
  'square-4' | 
  'square-5' | 
  'square-6' | 
  'square-7' | 
  'square-8' | 
  'square-9' | 
  'square-a' | 
  'square-a-lock' | 
  'square-ampersand' | 
  'square-arrow-down' | 
  'square-arrow-down-left' | 
  'square-arrow-down-right' | 
  'square-arrow-left' | 
  'square-arrow-right' | 
  'square-arrow-up' | 
  'square-arrow-up-left' | 
  'square-arrow-up-right' | 
  'square-b' | 
  'square-behance' | 
  'square-bolt' | 
  'square-c' | 
  'square-caret-down' | 
  'square-caret-left' | 
  'square-caret-right' | 
  'square-caret-up' | 
  'square-check' | 
  'square-chevron-down' | 
  'square-chevron-left' | 
  'square-chevron-right' | 
  'square-chevron-up' | 
  'square-code' | 
  'square-d' | 
  'square-dashed' | 
  'square-dashed-circle-plus' | 
  'square-divide' | 
  'square-dollar' | 
  'square-down' | 
  'square-down-left' | 
  'square-down-right' | 
  'square-dribbble' | 
  'square-e' | 
  'square-ellipsis' | 
  'square-ellipsis-vertical' | 
  'square-envelope' | 
  'square-exclamation' | 
  'square-f' | 
  'square-facebook' | 
  'square-font-awesome' | 
  'square-font-awesome-stroke' | 
  'square-fragile' | 
  'square-full' | 
  'square-g' | 
  'square-git' | 
  'square-github' | 
  'square-gitlab' | 
  'square-google-plus' | 
  'square-h' | 
  'square-hacker-news' | 
  'square-heart' | 
  'square-i' | 
  'square-info' | 
  'square-instagram' | 
  'square-j' | 
  'square-js' | 
  'square-k' | 
  'square-kanban' | 
  'square-kickstarter' | 
  'square-l' | 
  'square-lastfm' | 
  'square-left' | 
  'square-letterboxd' | 
  'square-list' | 
  'square-m' | 
  'square-minus' | 
  'square-n' | 
  'square-nfi' | 
  'square-o' | 
  'square-odnoklassniki' | 
  'square-p' | 
  'square-parking' | 
  'square-parking-slash' | 
  'square-pen' | 
  'square-person-confined' | 
  'square-phone' | 
  'square-phone-flip' | 
  'square-phone-hangup' | 
  'square-pied-piper' | 
  'square-pinterest' | 
  'square-plus' | 
  'square-poll-horizontal' | 
  'square-poll-vertical' | 
  'square-q' | 
  'square-quarters' | 
  'square-question' | 
  'square-quote' | 
  'square-r' | 
  'square-reddit' | 
  'square-right' | 
  'square-ring' | 
  'square-root' | 
  'square-root-alt' | 
  'square-root-variable' | 
  'square-rss' | 
  'square-s' | 
  'square-share-nodes' | 
  'square-sliders' | 
  'square-sliders-vertical' | 
  'square-small' | 
  'square-snapchat' | 
  'square-star' | 
  'square-steam' | 
  'square-t' | 
  'square-terminal' | 
  'square-this-way-up' | 
  'square-threads' | 
  'square-tumblr' | 
  'square-twitter' | 
  'square-u' | 
  'square-up' | 
  'square-up-left' | 
  'square-up-right' | 
  'square-upwork' | 
  'square-user' | 
  'square-v' | 
  'square-viadeo' | 
  'square-vimeo' | 
  'square-virus' | 
  'square-w' | 
  'square-web-awesome' | 
  'square-web-awesome-stroke' | 
  'square-whatsapp' | 
  'square-wine-glass-crack' | 
  'square-x' | 
  'square-x-twitter' | 
  'square-xing' | 
  'square-xmark' | 
  'square-y' | 
  'square-youtube' | 
  'square-z' | 
  'squarespace' | 
  'squid' | 
  'squirrel' | 
  'stack-exchange' | 
  'stack-overflow' | 
  'stackpath' | 
  'staff' | 
  'staff-aesculapius' | 
  'staff-snake' | 
  'stairs' | 
  'stamp' | 
  'standard-definition' | 
  'stapler' | 
  'star' | 
  'star-and-crescent' | 
  'star-christmas' | 
  'star-circle' | 
  'star-exclamation' | 
  'star-half' | 
  'star-half-alt' | 
  'star-half-stroke' | 
  'star-of-david' | 
  'star-of-life' | 
  'star-sharp' | 
  'star-sharp-half' | 
  'star-sharp-half-alt' | 
  'star-sharp-half-stroke' | 
  'star-shooting' | 
  'starfighter' | 
  'starfighter-alt' | 
  'starfighter-alt-advanced' | 
  'starfighter-twin-ion-engine' | 
  'starfighter-twin-ion-engine-advanced' | 
  'stars' | 
  'starship' | 
  'starship-freighter' | 
  'staylinked' | 
  'steak' | 
  'steam' | 
  'steam-square' | 
  'steam-symbol' | 
  'steering-wheel' | 
  'step-backward' | 
  'step-forward' | 
  'sterling-sign' | 
  'stethoscope' | 
  'sticker-mule' | 
  'sticky-note' | 
  'stocking' | 
  'stomach' | 
  'stop' | 
  'stop-circle' | 
  'stopwatch' | 
  'stopwatch-20' | 
  'store' | 
  'store-alt' | 
  'store-alt-slash' | 
  'store-lock' | 
  'store-slash' | 
  'strava' | 
  'strawberry' | 
  'stream' | 
  'street-view' | 
  'stretcher' | 
  'strikethrough' | 
  'stripe' | 
  'stripe-s' | 
  'stroopwafel' | 
  'stubber' | 
  'studiovinari' | 
  'stumbleupon' | 
  'stumbleupon-circle' | 
  'subscript' | 
  'subtitles' | 
  'subtitles-slash' | 
  'subtract' | 
  'subway' | 
  'subway-tunnel' | 
  'suitcase' | 
  'suitcase-medical' | 
  'suitcase-rolling' | 
  'sun' | 
  'sun-alt' | 
  'sun-bright' | 
  'sun-cloud' | 
  'sun-dust' | 
  'sun-haze' | 
  'sun-plant-wilt' | 
  'sunglasses' | 
  'sunrise' | 
  'sunset' | 
  'superpowers' | 
  'superscript' | 
  'supple' | 
  'surprise' | 
  'suse' | 
  'sushi' | 
  'sushi-roll' | 
  'swap' | 
  'swap-arrows' | 
  'swatchbook' | 
  'swift' | 
  'swimmer' | 
  'swimming-pool' | 
  'sword' | 
  'sword-laser' | 
  'sword-laser-alt' | 
  'swords' | 
  'swords-laser' | 
  'symbols' | 
  'symfony' | 
  'synagogue' | 
  'sync' | 
  'sync-alt' | 
  'syringe' | 
  't' | 
  't-rex' | 
  't-shirt' | 
  'table' | 
  'table-cells' | 
  'table-cells-column-lock' | 
  'table-cells-column-unlock' | 
  'table-cells-large' | 
  'table-cells-lock' | 
  'table-cells-row-lock' | 
  'table-cells-row-unlock' | 
  'table-cells-unlock' | 
  'table-columns' | 
  'table-layout' | 
  'table-list' | 
  'table-picnic' | 
  'table-pivot' | 
  'table-rows' | 
  'table-tennis' | 
  'table-tennis-paddle-ball' | 
  'table-tree' | 
  'tablet' | 
  'tablet-alt' | 
  'tablet-android' | 
  'tablet-android-alt' | 
  'tablet-button' | 
  'tablet-rugged' | 
  'tablet-screen' | 
  'tablet-screen-button' | 
  'tablets' | 
  'tachograph-digital' | 
  'tachometer' | 
  'tachometer-alt' | 
  'tachometer-alt-average' | 
  'tachometer-alt-fast' | 
  'tachometer-alt-fastest' | 
  'tachometer-alt-slow' | 
  'tachometer-alt-slowest' | 
  'tachometer-average' | 
  'tachometer-fast' | 
  'tachometer-fastest' | 
  'tachometer-slow' | 
  'tachometer-slowest' | 
  'taco' | 
  'tag' | 
  'tags' | 
  'tally' | 
  'tally-1' | 
  'tally-2' | 
  'tally-3' | 
  'tally-4' | 
  'tally5' | 
  'tamale' | 
  'tanakh' | 
  'tank-water' | 
  'tape' | 
  'tarp' | 
  'tarp-droplet' | 
  'tasks' | 
  'tasks-alt' | 
  'taxi' | 
  'taxi-bus' | 
  'teamspeak' | 
  'teddy-bear' | 
  'teeth' | 
  'teeth-open' | 
  'telegram' | 
  'telegram-plane' | 
  'telescope' | 
  'teletype' | 
  'teletype-answer' | 
  'television' | 
  'temperature-arrow-down' | 
  'temperature-arrow-up' | 
  'temperature-down' | 
  'temperature-empty' | 
  'temperature-frigid' | 
  'temperature-full' | 
  'temperature-half' | 
  'temperature-high' | 
  'temperature-hot' | 
  'temperature-list' | 
  'temperature-low' | 
  'temperature-quarter' | 
  'temperature-snow' | 
  'temperature-sun' | 
  'temperature-three-quarters' | 
  'temperature-up' | 
  'temperature0' | 
  'temperature1' | 
  'temperature2' | 
  'temperature3' | 
  'temperature4' | 
  'tencent-weibo' | 
  'tenge' | 
  'tenge-sign' | 
  'tennis-ball' | 
  'tent' | 
  'tent-arrow-down-to-line' | 
  'tent-arrow-left-right' | 
  'tent-arrow-turn-left' | 
  'tent-arrows-down' | 
  'tent-double-peak' | 
  'tents' | 
  'terminal' | 
  'text' | 
  'text-height' | 
  'text-size' | 
  'text-slash' | 
  'text-width' | 
  'th' | 
  'th-large' | 
  'th-list' | 
  'the-red-yeti' | 
  'theater-masks' | 
  'themeco' | 
  'themeisle' | 
  'thermometer' | 
  'thermometer-empty' | 
  'thermometer-full' | 
  'thermometer-half' | 
  'thermometer-quarter' | 
  'thermometer-three-quarters' | 
  'thermometer0' | 
  'thermometer1' | 
  'thermometer2' | 
  'thermometer3' | 
  'thermometer4' | 
  'theta' | 
  'think-peaks' | 
  'thought-bubble' | 
  'threads' | 
  'thumb-tack' | 
  'thumb-tack-slash' | 
  'thumbs-down' | 
  'thumbs-up' | 
  'thumbtack' | 
  'thumbtack-slash' | 
  'thunderstorm' | 
  'thunderstorm-moon' | 
  'thunderstorm-sun' | 
  'tick' | 
  'ticket' | 
  'ticket-airline' | 
  'ticket-alt' | 
  'ticket-perforated' | 
  'ticket-perforated-plane' | 
  'ticket-plane' | 
  'ticket-simple' | 
  'tickets' | 
  'tickets-airline' | 
  'tickets-perforated' | 
  'tickets-perforated-plane' | 
  'tickets-plane' | 
  'tickets-simple' | 
  'tiktok' | 
  'tilde' | 
  'timeline' | 
  'timeline-arrow' | 
  'timer' | 
  'times' | 
  'times-circle' | 
  'times-hexagon' | 
  'times-octagon' | 
  'times-rectangle' | 
  'times-square' | 
  'times-to-slot' | 
  'tint' | 
  'tint-slash' | 
  'tire' | 
  'tire-flat' | 
  'tire-pressure-warning' | 
  'tire-rugged' | 
  'tired' | 
  'toggle-large-off' | 
  'toggle-large-on' | 
  'toggle-off' | 
  'toggle-on' | 
  'toilet' | 
  'toilet-paper' | 
  'toilet-paper-alt' | 
  'toilet-paper-blank' | 
  'toilet-paper-blank-under' | 
  'toilet-paper-check' | 
  'toilet-paper-reverse' | 
  'toilet-paper-reverse-alt' | 
  'toilet-paper-reverse-slash' | 
  'toilet-paper-slash' | 
  'toilet-paper-under' | 
  'toilet-paper-under-slash' | 
  'toilet-paper-xmark' | 
  'toilet-portable' | 
  'toilets-portable' | 
  'tomato' | 
  'tombstone' | 
  'tombstone-alt' | 
  'tombstone-blank' | 
  'toolbox' | 
  'tools' | 
  'tooth' | 
  'toothbrush' | 
  'torah' | 
  'torii-gate' | 
  'tornado' | 
  'tower-broadcast' | 
  'tower-cell' | 
  'tower-control' | 
  'tower-observation' | 
  'tractor' | 
  'trade-federation' | 
  'trademark' | 
  'traffic-cone' | 
  'traffic-light' | 
  'traffic-light-go' | 
  'traffic-light-slow' | 
  'traffic-light-stop' | 
  'trailer' | 
  'train' | 
  'train-subway' | 
  'train-subway-tunnel' | 
  'train-track' | 
  'train-tram' | 
  'train-tunnel' | 
  'tram' | 
  'transformer-bolt' | 
  'transgender' | 
  'transgender-alt' | 
  'transporter' | 
  'transporter-1' | 
  'transporter-2' | 
  'transporter-3' | 
  'transporter-4' | 
  'transporter-5' | 
  'transporter-6' | 
  'transporter-7' | 
  'transporter-empty' | 
  'trash' | 
  'trash-alt' | 
  'trash-alt-slash' | 
  'trash-arrow-turn-left' | 
  'trash-arrow-up' | 
  'trash-can' | 
  'trash-can-arrow-turn-left' | 
  'trash-can-arrow-up' | 
  'trash-can-check' | 
  'trash-can-clock' | 
  'trash-can-list' | 
  'trash-can-plus' | 
  'trash-can-slash' | 
  'trash-can-undo' | 
  'trash-can-xmark' | 
  'trash-check' | 
  'trash-circle' | 
  'trash-clock' | 
  'trash-list' | 
  'trash-plus' | 
  'trash-restore' | 
  'trash-restore-alt' | 
  'trash-slash' | 
  'trash-undo' | 
  'trash-undo-alt' | 
  'trash-xmark' | 
  'treasure-chest' | 
  'tree' | 
  'tree-alt' | 
  'tree-christmas' | 
  'tree-city' | 
  'tree-deciduous' | 
  'tree-decorated' | 
  'tree-large' | 
  'tree-palm' | 
  'trees' | 
  'trello' | 
  'trian-balbot' | 
  'triangle' | 
  'triangle-circle-square' | 
  'triangle-exclamation' | 
  'triangle-instrument' | 
  'triangle-music' | 
  'triangle-person-digging' | 
  'tricycle' | 
  'tricycle-adult' | 
  'trillium' | 
  'trophy' | 
  'trophy-alt' | 
  'trophy-star' | 
  'trowel' | 
  'trowel-bricks' | 
  'truck' | 
  'truck-arrow-right' | 
  'truck-bolt' | 
  'truck-clock' | 
  'truck-container' | 
  'truck-container-empty' | 
  'truck-couch' | 
  'truck-droplet' | 
  'truck-fast' | 
  'truck-field' | 
  'truck-field-un' | 
  'truck-fire' | 
  'truck-flatbed' | 
  'truck-front' | 
  'truck-ladder' | 
  'truck-loading' | 
  'truck-medical' | 
  'truck-monster' | 
  'truck-moving' | 
  'truck-pickup' | 
  'truck-plane' | 
  'truck-plow' | 
  'truck-ramp' | 
  'truck-ramp-box' | 
  'truck-ramp-couch' | 
  'truck-tow' | 
  'truck-utensils' | 
  'trumpet' | 
  'try' | 
  'tshirt' | 
  'tty' | 
  'tty-answer' | 
  'tugrik-sign' | 
  'tumblr' | 
  'tumblr-square' | 
  'turkey' | 
  'turkish-lira' | 
  'turkish-lira-sign' | 
  'turn-down' | 
  'turn-down-left' | 
  'turn-down-right' | 
  'turn-left' | 
  'turn-left-down' | 
  'turn-left-up' | 
  'turn-right' | 
  'turn-up' | 
  'turntable' | 
  'turtle' | 
  'tv' | 
  'tv-alt' | 
  'tv-music' | 
  'tv-retro' | 
  'twitch' | 
  'twitter' | 
  'twitter-square' | 
  'typewriter' | 
  'typo3' | 
  'u' | 
  'uber' | 
  'ubuntu' | 
  'ufo' | 
  'ufo-beam' | 
  'uikit' | 
  'umbraco' | 
  'umbrella' | 
  'umbrella-alt' | 
  'umbrella-beach' | 
  'umbrella-simple' | 
  'uncharted' | 
  'underline' | 
  'undo' | 
  'undo-alt' | 
  'unicorn' | 
  'uniform-martial-arts' | 
  'union' | 
  'uniregistry' | 
  'unity' | 
  'universal-access' | 
  'university' | 
  'unlink' | 
  'unlock' | 
  'unlock-alt' | 
  'unlock-keyhole' | 
  'unsorted' | 
  'unsplash' | 
  'untappd' | 
  'up' | 
  'up-down' | 
  'up-down-left-right' | 
  'up-from-bracket' | 
  'up-from-dotted-line' | 
  'up-from-line' | 
  'up-left' | 
  'up-long' | 
  'up-right' | 
  'up-right-and-down-left-from-center' | 
  'up-right-from-square' | 
  'up-to-bracket' | 
  'up-to-dotted-line' | 
  'up-to-line' | 
  'upload' | 
  'ups' | 
  'upwork' | 
  'usb' | 
  'usb-drive' | 
  'usd' | 
  'usd-circle' | 
  'usd-square' | 
  'user' | 
  'user-alien' | 
  'user-alt' | 
  'user-alt-slash' | 
  'user-astronaut' | 
  'user-beard-bolt' | 
  'user-bounty-hunter' | 
  'user-chart' | 
  'user-check' | 
  'user-chef' | 
  'user-circle' | 
  'user-clock' | 
  'user-cog' | 
  'user-construction' | 
  'user-cowboy' | 
  'user-crown' | 
  'user-doctor' | 
  'user-doctor-hair' | 
  'user-doctor-hair-long' | 
  'user-doctor-message' | 
  'user-edit' | 
  'user-friends' | 
  'user-gear' | 
  'user-graduate' | 
  'user-group' | 
  'user-group-crown' | 
  'user-group-simple' | 
  'user-hair' | 
  'user-hair-buns' | 
  'user-hair-long' | 
  'user-hair-mullet' | 
  'user-hard-hat' | 
  'user-headset' | 
  'user-helmet-safety' | 
  'user-hoodie' | 
  'user-injured' | 
  'user-large' | 
  'user-large-slash' | 
  'user-lock' | 
  'user-magnifying-glass' | 
  'user-md' | 
  'user-md-chat' | 
  'user-minus' | 
  'user-music' | 
  'user-ninja' | 
  'user-nurse' | 
  'user-nurse-hair' | 
  'user-nurse-hair-long' | 
  'user-pen' | 
  'user-pilot' | 
  'user-pilot-tie' | 
  'user-plus' | 
  'user-police' | 
  'user-police-tie' | 
  'user-robot' | 
  'user-robot-xmarks' | 
  'user-secret' | 
  'user-shakespeare' | 
  'user-shield' | 
  'user-slash' | 
  'user-tag' | 
  'user-tie' | 
  'user-tie-hair' | 
  'user-tie-hair-long' | 
  'user-times' | 
  'user-unlock' | 
  'user-visor' | 
  'user-vneck' | 
  'user-vneck-hair' | 
  'user-vneck-hair-long' | 
  'user-xmark' | 
  'users' | 
  'users-between-lines' | 
  'users-class' | 
  'users-cog' | 
  'users-crown' | 
  'users-gear' | 
  'users-line' | 
  'users-medical' | 
  'users-rays' | 
  'users-rectangle' | 
  'users-slash' | 
  'users-viewfinder' | 
  'usps' | 
  'ussunnah' | 
  'utensil-fork' | 
  'utensil-knife' | 
  'utensil-spoon' | 
  'utensils' | 
  'utensils-alt' | 
  'utensils-slash' | 
  'utility-pole' | 
  'utility-pole-double' | 
  'v' | 
  'vaadin' | 
  'vacuum' | 
  'vacuum-robot' | 
  'value-absolute' | 
  'van-shuttle' | 
  'vault' | 
  'vcard' | 
  'vector-circle' | 
  'vector-polygon' | 
  'vector-square' | 
  'vent-damper' | 
  'venus' | 
  'venus-double' | 
  'venus-mars' | 
  'vest' | 
  'vest-patches' | 
  'vhs' | 
  'viacoin' | 
  'viadeo' | 
  'viadeo-square' | 
  'vial' | 
  'vial-circle-check' | 
  'vial-virus' | 
  'vials' | 
  'viber' | 
  'video' | 
  'video-arrow-down-left' | 
  'video-arrow-up-right' | 
  'video-camera' | 
  'video-circle' | 
  'video-handheld' | 
  'video-plus' | 
  'video-slash' | 
  'vihara' | 
  'vimeo' | 
  'vimeo-square' | 
  'vimeo-v' | 
  'vine' | 
  'violin' | 
  'virus' | 
  'virus-covid' | 
  'virus-covid-slash' | 
  'virus-slash' | 
  'viruses' | 
  'vk' | 
  'vnv' | 
  'voicemail' | 
  'volcano' | 
  'volleyball' | 
  'volleyball-ball' | 
  'volume' | 
  'volume-control-phone' | 
  'volume-down' | 
  'volume-high' | 
  'volume-low' | 
  'volume-medium' | 
  'volume-mute' | 
  'volume-off' | 
  'volume-slash' | 
  'volume-times' | 
  'volume-up' | 
  'volume-xmark' | 
  'vote-nay' | 
  'vote-yea' | 
  'vr-cardboard' | 
  'vuejs' | 
  'w' | 
  'waffle' | 
  'wagon-covered' | 
  'walker' | 
  'walkie-talkie' | 
  'walking' | 
  'wall-brick' | 
  'wallet' | 
  'wand' | 
  'wand-magic' | 
  'wand-magic-sparkles' | 
  'wand-sparkles' | 
  'warehouse' | 
  'warehouse-alt' | 
  'warehouse-full' | 
  'warning' | 
  'washer' | 
  'washing-machine' | 
  'watch' | 
  'watch-apple' | 
  'watch-calculator' | 
  'watch-fitness' | 
  'watch-smart' | 
  'watchman-monitoring' | 
  'water' | 
  'water-arrow-down' | 
  'water-arrow-up' | 
  'water-ladder' | 
  'water-lower' | 
  'water-rise' | 
  'watermelon-slice' | 
  'wave' | 
  'wave-pulse' | 
  'wave-sine' | 
  'wave-square' | 
  'wave-triangle' | 
  'waveform' | 
  'waveform-circle' | 
  'waveform-lines' | 
  'waveform-path' | 
  'waves-sine' | 
  'waze' | 
  'web-awesome' | 
  'webcam' | 
  'webcam-slash' | 
  'webflow' | 
  'webhook' | 
  'weebly' | 
  'weibo' | 
  'weight' | 
  'weight-hanging' | 
  'weight-scale' | 
  'weixin' | 
  'whale' | 
  'whatsapp' | 
  'whatsapp-square' | 
  'wheat' | 
  'wheat-alt' | 
  'wheat-awn' | 
  'wheat-awn-circle-exclamation' | 
  'wheat-awn-slash' | 
  'wheat-slash' | 
  'wheelchair' | 
  'wheelchair-alt' | 
  'wheelchair-move' | 
  'whiskey-glass' | 
  'whiskey-glass-ice' | 
  'whistle' | 
  'whmcs' | 
  'wifi' | 
  'wifi-exclamation' | 
  'wifi-fair' | 
  'wifi-slash' | 
  'wifi-strong' | 
  'wifi-weak' | 
  'wifi1' | 
  'wifi2' | 
  'wifi3' | 
  'wikipedia-w' | 
  'wind' | 
  'wind-circle-exclamation' | 
  'wind-turbine' | 
  'wind-warning' | 
  'window' | 
  'window-alt' | 
  'window-close' | 
  'window-flip' | 
  'window-frame' | 
  'window-frame-open' | 
  'window-maximize' | 
  'window-minimize' | 
  'window-restore' | 
  'windows' | 
  'windsock' | 
  'wine-bottle' | 
  'wine-glass' | 
  'wine-glass-alt' | 
  'wine-glass-crack' | 
  'wine-glass-empty' | 
  'wirsindhandwerk' | 
  'wix' | 
  'wizards-of-the-coast' | 
  'wodu' | 
  'wolf-pack-battalion' | 
  'won' | 
  'won-sign' | 
  'wordpress' | 
  'wordpress-simple' | 
  'worm' | 
  'wpbeginner' | 
  'wpexplorer' | 
  'wpforms' | 
  'wpressr' | 
  'wreath' | 
  'wreath-laurel' | 
  'wrench' | 
  'wrench-simple' | 
  'wsh' | 
  'x' | 
  'x-ray' | 
  'x-twitter' | 
  'xbox' | 
  'xing' | 
  'xing-square' | 
  'xmark' | 
  'xmark-circle' | 
  'xmark-hexagon' | 
  'xmark-large' | 
  'xmark-octagon' | 
  'xmark-square' | 
  'xmark-to-slot' | 
  'xmarks-lines' | 
  'y' | 
  'y-combinator' | 
  'yahoo' | 
  'yammer' | 
  'yandex' | 
  'yandex-international' | 
  'yarn' | 
  'yelp' | 
  'yen' | 
  'yen-sign' | 
  'yin-yang' | 
  'yoast' | 
  'youtube' | 
  'youtube-square' | 
  'z' | 
  'zap' | 
  'zhihu' | 
  'zzz';
import {
    IconDefinition,
    IconName,
    IconStyle,
    IconFamily
} from '@fortawesome/fontawesome-common-types';

export type IconMacroParams = {
    name: IconName,
    style?: IconStyle,
    family?: IconFamily
};

export function brands(iconName: IconName): IconDefinition;
export function duotone(iconName: IconName): IconDefinition;
export function light(iconName: IconName): IconDefinition;
export function regular(iconName: IconName): IconDefinition;
export function solid(iconName: IconName): IconDefinition;
export function thin(iconName: IconName): IconDefinition;
export function icon(params: IconMacroParams): IconDefinition;import {IconDefinition, IconLookup, IconName, IconFamily, IconPrefix, CssStyleClass, IconStyle, IconPathData, IconPack} from '@fortawesome/fontawesome-common-types';
export {IconDefinition, IconLookup, IconName, IconFamily, IconPrefix, CssStyleClass, IconStyle, IconPathData, IconPack} from '@fortawesome/fontawesome-common-types';
export const dom: DOM;
export const library: Library;
export const parse: { transform(transformString: string): Transform, icon(parseIconString: string): IconLookup };
export const config: Config;
export function noAuto():void;
export function findIconDefinition(iconLookup: IconLookup): IconDefinition;
export function text(content: string, params?: TextParams): Text;
export function counter(content: string | number, params?: CounterParams): Counter;
export function toHtml(content: any): string;
export function toHtml(abstractNodes: AbstractElement): string;
export function layer(
  assembler: (
    addLayerCallback: (layerToAdd: IconOrText | IconOrText[]) => void
  ) => void,
  params?: LayerParams
): Layer;
export function icon(icon: IconName | IconLookup, params?: IconParams): Icon;
export type IconProp = IconName | [IconPrefix, IconName] | IconLookup;
export type FlipProp = "horizontal" | "vertical" | "both";
export type SizeProp =
  | "2xs"
  | "xs"
  | "sm"
  | "lg"
  | "xl"
  | "2xl"
  | "1x"
  | "2x"
  | "3x"
  | "4x"
  | "5x"
  | "6x"
  | "7x"
  | "8x"
  | "9x"
  | "10x";
export type PullProp = "left" | "right";
export type RotateProp = 90 | 180 | 270;
export type FaSymbol = string | boolean;
export interface Config {
  familyPrefix: string;
  cssPrefix: string;
  styleDefault: IconPrefix | CssStyleClass | IconStyle;
  familyDefault: IconFamily;
  replacementClass: string;
  autoReplaceSvg: boolean | 'nest';
  autoAddCss: boolean;
  autoA11y: boolean;
  searchPseudoElements: boolean;
  observeMutations: boolean;
  keepOriginalSource: boolean;
  measurePerformance: boolean;
  mutateApproach: "async" | "sync";
  showMissingIcons: boolean;
}
export interface AbstractElement {
  tag: string;
  attributes: any;
  children?: AbstractElement[];
}
export interface FontawesomeObject {
  readonly abstract: AbstractElement[];
  readonly html: string[];
  readonly node: HTMLCollection;
}
export interface Icon extends FontawesomeObject, IconDefinition {
  readonly type: "icon";
}
export interface Text extends FontawesomeObject {
  readonly type: "text";
}
export interface Counter extends FontawesomeObject {
  readonly type: "counter";
}
export interface Layer extends FontawesomeObject {
  readonly type: "layer";
}
type IconOrText = Icon | Text;
export interface Attributes {
  [key: string]: number | string;
}
export interface Styles {
  [key: string]: string;
}
export interface Transform {
  size?: number;
  x?: number;
  y?: number;
  rotate?: number;
  flipX?: boolean;
  flipY?: boolean;
}
export interface Params {
  title?: string;
  titleId?: string;
  classes?: string | string[];
  attributes?: Attributes;
  styles?: Styles;
}
export interface CounterParams extends Params {
}
export interface LayerParams {
  classes?: string | string[];
}
export interface TextParams extends Params {
  transform?: Transform;
}
export interface IconParams extends Params {
  transform?: Transform;
  symbol?: FaSymbol;
  mask?: IconLookup;
  maskId?: string;
}
export interface DOM {
  i2svg(params?: { node: Node; callback?: () => void }): Promise<void>;
  css(): string;
  insertCss(): string;
  watch(): void;
}
type IconDefinitionOrPack = IconDefinition | IconPack;
export interface Library {
  add(...definitions: IconDefinitionOrPack[] | IconDefinitionOrPack[][]): void;
  reset(): void;
}
import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const fa0: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const fa1: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const fa2: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const fa3: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const fa4: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const fa5: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const fa6: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const fa7: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const fa8: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const fa9: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faA: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAd: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAdd: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAddressBook: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAddressCard: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAdjust: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAirFreshener: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAlignCenter: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAlignJustify: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAlignLeft: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAlignRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAllergies: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAmbulance: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAmericanSignLanguageInterpreting: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAnchor: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAnchorCircleCheck: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAnchorCircleExclamation: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAnchorCircleXmark: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAnchorLock: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAngleDoubleDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAngleDoubleLeft: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAngleDoubleRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAngleDoubleUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAngleDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAngleLeft: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAngleRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAnglesDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAnglesLeft: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAnglesRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAnglesUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAngleUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAngry: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAnkh: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAppleAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAppleWhole: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArchive: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArchway: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAreaChart: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowAltCircleDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowAltCircleLeft: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowAltCircleRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowAltCircleUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowCircleDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowCircleLeft: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowCircleRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowCircleUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowDown19: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowDown91: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowDownAZ: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowDownLong: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowDownShortWide: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowDownUpAcrossLine: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowDownUpLock: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowDownWideShort: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowDownZA: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowLeft: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowLeftLong: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowLeftRotate: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowPointer: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowRightArrowLeft: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowRightFromBracket: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowRightFromFile: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowRightLong: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowRightRotate: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowRightToBracket: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowRightToCity: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowRightToFile: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowRotateBack: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowRotateBackward: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowRotateForward: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowRotateLeft: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowRotateRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrows: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowsAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowsAltH: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowsAltV: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowsDownToLine: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowsDownToPeople: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowsH: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowsLeftRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowsLeftRightToLine: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowsRotate: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowsSpin: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowsSplitUpAndLeft: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowsToCircle: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowsToDot: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowsToEye: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowsTurnRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowsTurnToDots: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowsUpDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowsUpDownLeftRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowsUpToLine: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowsV: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowTrendDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowTrendUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowTurnDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowTurnUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowUp19: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowUp91: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowUpAZ: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowUpFromBracket: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowUpFromGroundWater: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowUpFromWaterPump: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowUpLong: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowUpRightDots: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowUpRightFromSquare: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowUpShortWide: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowUpWideShort: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faArrowUpZA: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAslInterpreting: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAssistiveListeningSystems: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAsterisk: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAtlas: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAtom: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAudioDescription: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAustralSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAutomobile: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faAward: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faB: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBaby: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBabyCarriage: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBackspace: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBackward: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBackwardFast: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBackwardStep: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBacon: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBacteria: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBacterium: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBagShopping: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBahai: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBahtSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBalanceScale: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBalanceScaleLeft: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBalanceScaleRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBan: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBandage: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBandAid: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBangladeshiTakaSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBank: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBanSmoking: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBarChart: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBarcode: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBars: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBarsProgress: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBarsStaggered: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBaseball: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBaseballBall: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBaseballBatBall: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBasketball: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBasketballBall: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBasketShopping: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBath: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBathtub: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBattery: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBattery0: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBattery2: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBattery3: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBattery4: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBattery5: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBatteryCar: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBatteryEmpty: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBatteryFull: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBatteryHalf: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBatteryQuarter: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBatteryThreeQuarters: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBed: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBedPulse: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBeer: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBeerMugEmpty: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBell: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBellConcierge: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBellSlash: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBezierCurve: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBible: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBicycle: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBiking: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBinoculars: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBiohazard: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBirthdayCake: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBitcoinSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBlackboard: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBlender: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBlenderPhone: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBlind: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBlog: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBold: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBolt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBoltLightning: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBomb: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBone: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBong: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBook: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBookAtlas: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBookBible: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBookBookmark: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBookDead: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBookJournalWhills: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBookmark: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBookMedical: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBookOpen: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBookOpenReader: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBookQuran: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBookReader: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBookSkull: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBookTanakh: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBorderAll: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBorderNone: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBorderStyle: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBorderTopLeft: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBoreHole: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBottleDroplet: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBottleWater: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBowlFood: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBowlingBall: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBowlRice: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBox: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBoxArchive: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBoxes: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBoxesAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBoxesPacking: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBoxesStacked: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBoxOpen: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBoxTissue: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBraille: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBrain: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBrazilianRealSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBreadSlice: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBridge: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBridgeCircleCheck: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBridgeCircleExclamation: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBridgeCircleXmark: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBridgeLock: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBridgeWater: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBriefcase: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBriefcaseClock: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBriefcaseMedical: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBroadcastTower: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBroom: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBroomBall: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBrush: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBucket: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBug: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBugs: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBugSlash: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBuilding: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBuildingCircleArrowRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBuildingCircleCheck: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBuildingCircleExclamation: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBuildingCircleXmark: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBuildingColumns: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBuildingFlag: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBuildingLock: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBuildingNgo: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBuildingShield: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBuildingUn: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBuildingUser: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBuildingWheat: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBullhorn: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBullseye: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBurger: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBurn: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBurst: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBusAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBusinessTime: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faBusSimple: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faC: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCab: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCableCar: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCake: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCakeCandles: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCalculator: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCalendar: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCalendarAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCalendarCheck: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCalendarDay: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCalendarDays: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCalendarMinus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCalendarPlus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCalendarTimes: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCalendarWeek: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCalendarXmark: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCamera: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCameraAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCameraRetro: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCameraRotate: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCampground: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCancel: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCandyCane: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCannabis: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCapsules: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCar: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCarAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCaravan: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCarBattery: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCarBurst: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCarCrash: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCaretDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCaretLeft: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCaretRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCaretSquareDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCaretSquareLeft: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCaretSquareRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCaretSquareUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCaretUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCarOn: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCarRear: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCarriageBaby: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCarrot: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCarSide: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCartArrowDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCartFlatbed: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCartFlatbedSuitcase: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCartPlus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCartShopping: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCarTunnel: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCashRegister: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCat: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCediSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCentSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCertificate: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChain: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChainBroken: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChainSlash: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChair: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChalkboard: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChalkboardTeacher: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChalkboardUser: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChampagneGlasses: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChargingStation: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChartArea: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChartBar: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChartColumn: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChartGantt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChartLine: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChartPie: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChartSimple: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCheck: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCheckCircle: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCheckDouble: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCheckSquare: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCheckToSlot: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCheese: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChess: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChessBishop: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChessBoard: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChessKing: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChessKnight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChessPawn: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChessQueen: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChessRook: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChevronCircleDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChevronCircleLeft: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChevronCircleRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChevronCircleUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChevronDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChevronLeft: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChevronRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChevronUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChild: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChildCombatant: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChildDress: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChildReaching: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChildren: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChildRifle: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faChurch: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCircle: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCircleArrowDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCircleArrowLeft: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCircleArrowRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCircleArrowUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCircleCheck: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCircleChevronDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCircleChevronLeft: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCircleChevronRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCircleChevronUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCircleDollarToSlot: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCircleDot: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCircleDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCircleExclamation: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCircleH: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCircleHalfStroke: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCircleInfo: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCircleLeft: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCircleMinus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCircleNodes: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCircleNotch: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCirclePause: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCirclePlay: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCirclePlus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCircleQuestion: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCircleRadiation: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCircleRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCircleStop: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCircleUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCircleUser: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCircleXmark: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCity: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faClapperboard: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faClinicMedical: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faClipboard: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faClipboardCheck: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faClipboardList: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faClipboardQuestion: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faClipboardUser: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faClock: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faClockFour: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faClockRotateLeft: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faClone: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faClose: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faClosedCaptioning: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCloud: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCloudArrowDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCloudArrowUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCloudBolt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCloudDownload: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCloudDownloadAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCloudMeatball: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCloudMoon: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCloudMoonRain: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCloudRain: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCloudShowersHeavy: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCloudShowersWater: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCloudSun: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCloudSunRain: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCloudUpload: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCloudUploadAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faClover: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCny: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCocktail: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCode: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCodeBranch: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCodeCommit: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCodeCompare: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCodeFork: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCodeMerge: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCodePullRequest: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCoffee: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCog: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCogs: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCoins: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faColonSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faColumns: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faComment: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCommentAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCommentDollar: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCommentDots: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCommenting: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCommentMedical: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faComments: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCommentsDollar: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCommentSlash: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCommentSms: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCompactDisc: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCompass: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCompassDrafting: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCompress: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCompressAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCompressArrowsAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faComputer: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faComputerMouse: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faConciergeBell: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faContactBook: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faContactCard: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCookie: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCookieBite: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCopy: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCopyright: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCouch: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCow: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCreditCard: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCreditCardAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCrop: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCropAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCropSimple: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCross: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCrosshairs: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCrow: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCrown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCrutch: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCruzeiroSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCube: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCubes: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCubesStacked: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCut: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faCutlery: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faD: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDashboard: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDatabase: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDeaf: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDeafness: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDedent: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDeleteLeft: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDemocrat: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDesktop: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDesktopAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDharmachakra: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDiagnoses: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDiagramNext: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDiagramPredecessor: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDiagramProject: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDiagramSuccessor: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDiamond: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDiamondTurnRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDice: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDiceD20: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDiceD6: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDiceFive: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDiceFour: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDiceOne: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDiceSix: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDiceThree: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDiceTwo: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDigging: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDigitalTachograph: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDirections: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDisease: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDisplay: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDivide: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDizzy: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDna: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDog: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDollar: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDollarSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDolly: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDollyBox: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDollyFlatbed: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDonate: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDongSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDoorClosed: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDoorOpen: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDotCircle: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDove: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDownLeftAndUpRightToCenter: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDownload: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDownLong: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDraftingCompass: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDragon: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDrawPolygon: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDriversLicense: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDroplet: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDropletSlash: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDrum: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDrumSteelpan: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDrumstickBite: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDumbbell: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDumpster: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDumpsterFire: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faDungeon: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faE: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faEarDeaf: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faEarListen: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faEarth: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faEarthAfrica: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faEarthAmerica: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faEarthAmericas: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faEarthAsia: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faEarthEurope: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faEarthOceania: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faEdit: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faEgg: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faEject: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faElevator: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faEllipsis: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faEllipsisH: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faEllipsisV: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faEllipsisVertical: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faEnvelope: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faEnvelopeCircleCheck: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faEnvelopeOpen: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faEnvelopeOpenText: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faEnvelopesBulk: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faEnvelopeSquare: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faEquals: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faEraser: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faEthernet: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faEur: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faEuro: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faEuroSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faExchange: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faExchangeAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faExclamation: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faExclamationCircle: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faExclamationTriangle: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faExpand: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faExpandAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faExpandArrowsAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faExplosion: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faExternalLink: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faExternalLinkAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faExternalLinkSquare: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faExternalLinkSquareAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faEye: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faEyeDropper: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faEyeDropperEmpty: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faEyeLowVision: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faEyeSlash: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faF: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceAngry: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceDizzy: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceFlushed: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceFrown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceFrownOpen: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceGrimace: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceGrin: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceGrinBeam: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceGrinBeamSweat: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceGrinHearts: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceGrinSquint: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceGrinSquintTears: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceGrinStars: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceGrinTears: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceGrinTongue: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceGrinTongueSquint: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceGrinTongueWink: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceGrinWide: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceGrinWink: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceKiss: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceKissBeam: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceKissWinkHeart: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceLaugh: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceLaughBeam: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceLaughSquint: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceLaughWink: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceMeh: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceMehBlank: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceRollingEyes: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceSadCry: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceSadTear: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceSmile: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceSmileBeam: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceSmileWink: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceSurprise: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaceTired: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFan: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFastBackward: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFastForward: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaucet: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFaucetDrip: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFax: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFeather: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFeatherAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFeatherPointed: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFeed: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFemale: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFerry: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFighterJet: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFile: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFileAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFileArchive: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFileArrowDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFileArrowUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFileAudio: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFileCircleCheck: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFileCircleExclamation: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFileCircleMinus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFileCirclePlus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFileCircleQuestion: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFileCircleXmark: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFileClipboard: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFileCode: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFileContract: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFileCsv: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFileDownload: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFileEdit: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFileExcel: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFileExport: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFileImage: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFileImport: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFileInvoice: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFileInvoiceDollar: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFileLines: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFileMedical: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFileMedicalAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFilePdf: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFilePen: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFilePowerpoint: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFilePrescription: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFileShield: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFileSignature: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFileText: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFileUpload: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFileVideo: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFileWaveform: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFileWord: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFileZipper: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFill: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFillDrip: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFilm: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFilter: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFilterCircleDollar: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFilterCircleXmark: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFingerprint: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFire: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFireAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFireBurner: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFireExtinguisher: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFireFlameCurved: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFireFlameSimple: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFirstAid: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFish: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFishFins: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFistRaised: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFlag: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFlagCheckered: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFlagUsa: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFlask: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFlaskVial: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFloppyDisk: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFlorinSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFlushed: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFolder: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFolderBlank: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFolderClosed: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFolderMinus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFolderOpen: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFolderPlus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFolderTree: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFont: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFontAwesome: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFontAwesomeFlag: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFontAwesomeLogoFull: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFootball: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFootballBall: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faForward: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faForwardFast: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faForwardStep: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFrancSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFrog: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFrown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFrownOpen: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFunnelDollar: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFutbol: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faFutbolBall: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faG: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGamepad: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGasPump: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGauge: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGaugeHigh: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGaugeMed: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGaugeSimple: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGaugeSimpleHigh: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGaugeSimpleMed: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGavel: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGbp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGear: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGears: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGem: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGenderless: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGhost: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGift: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGifts: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGlassCheers: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGlasses: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGlassMartini: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGlassMartiniAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGlassWater: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGlassWaterDroplet: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGlassWhiskey: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGlobe: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGlobeAfrica: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGlobeAmericas: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGlobeAsia: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGlobeEurope: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGlobeOceania: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGolfBall: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGolfBallTee: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGopuram: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGraduationCap: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGreaterThan: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGreaterThanEqual: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGrimace: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGrin: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGrinAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGrinBeam: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGrinBeamSweat: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGrinHearts: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGrinSquint: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGrinSquintTears: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGrinStars: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGrinTears: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGrinTongue: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGrinTongueSquint: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGrinTongueWink: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGrinWink: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGrip: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGripHorizontal: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGripLines: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGripLinesVertical: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGripVertical: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGroupArrowsRotate: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGuaraniSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGuitar: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faGun: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faH: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHamburger: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHammer: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHamsa: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHand: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandBackFist: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandcuffs: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandDots: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandFist: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandHolding: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandHoldingDollar: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandHoldingDroplet: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandHoldingHand: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandHoldingHeart: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandHoldingMedical: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandHoldingUsd: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandHoldingWater: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandLizard: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandMiddleFinger: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandPaper: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandPeace: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandPointDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandPointer: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandPointLeft: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandPointRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandPointUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandRock: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHands: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandsAmericanSignLanguageInterpreting: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandsAslInterpreting: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandsBound: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandsBubbles: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandScissors: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandsClapping: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandshake: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandshakeAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandshakeAltSlash: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandshakeAngle: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandshakeSimple: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandshakeSimpleSlash: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandshakeSlash: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandsHelping: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandsHolding: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandsHoldingChild: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandsHoldingCircle: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandSparkles: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandSpock: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandsPraying: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHandsWash: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHanukiah: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHardDrive: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHardHat: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHardOfHearing: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHashtag: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHatCowboy: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHatCowboySide: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHatHard: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHatWizard: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHaykal: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHdd: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHeader: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHeading: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHeadphones: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHeadphonesAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHeadphonesSimple: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHeadset: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHeadSideCough: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHeadSideCoughSlash: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHeadSideMask: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHeadSideVirus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHeart: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHeartbeat: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHeartBroken: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHeartCircleBolt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHeartCircleCheck: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHeartCircleExclamation: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHeartCircleMinus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHeartCirclePlus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHeartCircleXmark: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHeartCrack: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHeartMusicCameraBolt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHeartPulse: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHelicopter: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHelicopterSymbol: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHelmetSafety: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHelmetUn: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHighlighter: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHiking: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHillAvalanche: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHillRockslide: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHippo: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHistory: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHockeyPuck: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHollyBerry: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHome: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHomeAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHomeLg: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHomeLgAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHomeUser: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHorse: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHorseHead: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHospital: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHospitalAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHospitalSymbol: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHospitalUser: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHospitalWide: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHotdog: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHotel: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHotTub: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHotTubPerson: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHourglass: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHourglass1: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHourglass2: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHourglass3: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHourglassEmpty: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHourglassEnd: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHourglassHalf: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHourglassStart: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHouse: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHouseChimney: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHouseChimneyCrack: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHouseChimneyMedical: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHouseChimneyUser: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHouseChimneyWindow: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHouseCircleCheck: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHouseCircleExclamation: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHouseCircleXmark: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHouseCrack: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHouseDamage: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHouseFire: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHouseFlag: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHouseFloodWater: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHouseFloodWaterCircleArrowRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHouseLaptop: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHouseLock: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHouseMedical: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHouseMedicalCircleCheck: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHouseMedicalCircleExclamation: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHouseMedicalCircleXmark: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHouseMedicalFlag: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHouseSignal: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHouseTsunami: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHouseUser: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHryvnia: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHryvniaSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHSquare: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faHurricane: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faI: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faIceCream: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faIcicles: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faIcons: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faICursor: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faIdBadge: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faIdCard: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faIdCardAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faIdCardClip: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faIgloo: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faIls: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faImage: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faImagePortrait: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faImages: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faInbox: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faIndent: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faIndianRupee: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faIndianRupeeSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faIndustry: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faInfinity: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faInfo: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faInfoCircle: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faInr: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faInstitution: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faItalic: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faJ: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faJar: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faJarWheat: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faJedi: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faJetFighter: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faJetFighterUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faJoint: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faJournalWhills: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faJpy: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faJugDetergent: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faK: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faKaaba: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faKey: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faKeyboard: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faKhanda: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faKipSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faKiss: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faKissBeam: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faKissWinkHeart: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faKitchenSet: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faKitMedical: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faKiwiBird: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faKrw: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faL: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLadderWater: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLandmark: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLandmarkAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLandmarkDome: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLandmarkFlag: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLandMineOn: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLanguage: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLaptop: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLaptopCode: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLaptopFile: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLaptopHouse: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLaptopMedical: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLariSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLaugh: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLaughBeam: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLaughSquint: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLaughWink: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLayerGroup: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLeaf: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLeftLong: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLeftRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLegal: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLemon: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLessThan: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLessThanEqual: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLevelDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLevelDownAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLevelUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLevelUpAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLifeRing: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLightbulb: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLineChart: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLinesLeaning: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLink: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLinkSlash: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLiraSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faList: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faList12: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faListAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faListCheck: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faListDots: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faListNumeric: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faListOl: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faListSquares: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faListUl: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLitecoinSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLocation: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLocationArrow: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLocationCrosshairs: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLocationDot: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLocationPin: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLocationPinLock: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLock: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLockOpen: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLocust: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLongArrowAltDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLongArrowAltLeft: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLongArrowAltRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLongArrowAltUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLongArrowDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLongArrowLeft: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLongArrowRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLongArrowUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLowVision: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLuggageCart: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLungs: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faLungsVirus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faM: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMagic: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMagicWandSparkles: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMagnet: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMagnifyingGlass: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMagnifyingGlassArrowRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMagnifyingGlassChart: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMagnifyingGlassDollar: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMagnifyingGlassLocation: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMagnifyingGlassMinus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMagnifyingGlassPlus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMailBulk: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMailForward: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMailReply: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMailReplyAll: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMale: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faManatSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMap: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMapLocation: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMapLocationDot: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMapMarked: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMapMarkedAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMapMarker: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMapMarkerAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMapPin: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMapSigns: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMarker: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMars: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMarsAndVenus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMarsAndVenusBurst: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMarsDouble: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMarsStroke: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMarsStrokeH: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMarsStrokeRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMarsStrokeUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMarsStrokeV: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMartiniGlass: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMartiniGlassCitrus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMartiniGlassEmpty: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMask: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMaskFace: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMasksTheater: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMaskVentilator: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMattressPillow: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMaximize: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMedal: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMedkit: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMeh: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMehBlank: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMehRollingEyes: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMemory: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMenorah: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMercury: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMessage: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMeteor: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMicrochip: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMicrophone: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMicrophoneAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMicrophoneAltSlash: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMicrophoneLines: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMicrophoneLinesSlash: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMicrophoneSlash: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMicroscope: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMillSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMinimize: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMinus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMinusCircle: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMinusSquare: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMitten: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMobile: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMobileAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMobileAndroid: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMobileAndroidAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMobileButton: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMobilePhone: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMobileRetro: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMobileScreen: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMobileScreenButton: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMoneyBill: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMoneyBill1: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMoneyBill1Wave: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMoneyBillAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMoneyBills: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMoneyBillTransfer: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMoneyBillTrendUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMoneyBillWave: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMoneyBillWaveAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMoneyBillWheat: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMoneyCheck: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMoneyCheckAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMoneyCheckDollar: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMonument: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMoon: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMortarBoard: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMortarPestle: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMosque: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMosquito: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMosquitoNet: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMotorcycle: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMound: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMountain: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMountainCity: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMountainSun: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMouse: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMousePointer: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMugHot: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMugSaucer: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMultiply: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMuseum: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faMusic: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faN: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faNairaSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faNavicon: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faNetworkWired: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faNeuter: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faNewspaper: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faNotdef: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faNotEqual: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faNotesMedical: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faNoteSticky: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faO: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faObjectGroup: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faObjectUngroup: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faOilCan: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faOilWell: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faOm: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faOtter: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faOutdent: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faP: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPager: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPaintbrush: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPaintRoller: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPalette: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPallet: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPanorama: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPaperclip: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPaperPlane: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faParachuteBox: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faParagraph: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faParking: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPassport: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPastafarianism: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPaste: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPause: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPauseCircle: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPaw: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPeace: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPen: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPenAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPencil: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPencilAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPencilRuler: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPencilSquare: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPenClip: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPenFancy: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPenNib: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPenRuler: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPenSquare: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPenToSquare: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPeopleArrows: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPeopleArrowsLeftRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPeopleCarry: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPeopleCarryBox: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPeopleGroup: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPeopleLine: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPeoplePulling: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPeopleRobbery: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPeopleRoof: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPepperHot: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPercent: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPercentage: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPerson: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonArrowDownToLine: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonArrowUpFromLine: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonBiking: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonBooth: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonBreastfeeding: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonBurst: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonCane: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonChalkboard: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonCircleCheck: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonCircleExclamation: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonCircleMinus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonCirclePlus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonCircleQuestion: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonCircleXmark: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonDigging: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonDotsFromLine: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonDress: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonDressBurst: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonDrowning: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonFalling: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonFallingBurst: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonHalfDress: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonHarassing: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonHiking: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonMilitaryPointing: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonMilitaryRifle: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonMilitaryToPerson: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonPraying: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonPregnant: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonRays: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonRifle: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonRunning: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonShelter: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonSkating: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonSkiing: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonSkiingNordic: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonSnowboarding: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonSwimming: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonThroughWindow: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonWalking: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonWalkingArrowLoopLeft: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonWalkingArrowRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonWalkingDashedLineArrowRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonWalkingLuggage: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPersonWalkingWithCane: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPesetaSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPesoSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPhone: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPhoneAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPhoneFlip: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPhoneSlash: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPhoneSquare: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPhoneSquareAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPhoneVolume: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPhotoFilm: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPhotoVideo: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPieChart: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPiggyBank: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPills: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPingPongPaddleBall: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPizzaSlice: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPlaceOfWorship: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPlane: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPlaneArrival: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPlaneCircleCheck: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPlaneCircleExclamation: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPlaneCircleXmark: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPlaneDeparture: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPlaneLock: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPlaneSlash: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPlaneUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPlantWilt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPlateWheat: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPlay: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPlayCircle: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPlug: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPlugCircleBolt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPlugCircleCheck: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPlugCircleExclamation: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPlugCircleMinus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPlugCirclePlus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPlugCircleXmark: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPlus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPlusCircle: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPlusMinus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPlusSquare: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPodcast: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPoll: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPollH: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPoo: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPooBolt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPoop: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPooStorm: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPortrait: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPoundSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPowerOff: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPray: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPrayingHands: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPrescription: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPrescriptionBottle: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPrescriptionBottleAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPrescriptionBottleMedical: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPrint: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faProcedures: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faProjectDiagram: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPumpMedical: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPumpSoap: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faPuzzlePiece: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faQ: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faQrcode: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faQuestion: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faQuestionCircle: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faQuidditch: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faQuidditchBroomBall: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faQuoteLeft: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faQuoteLeftAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faQuoteRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faQuoteRightAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faQuran: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faR: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRadiation: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRadiationAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRadio: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRainbow: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRandom: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRankingStar: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faReceipt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRecordVinyl: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRectangleAd: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRectangleList: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRectangleTimes: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRectangleXmark: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRecycle: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRedo: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRedoAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRefresh: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRegistered: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRemove: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRemoveFormat: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faReorder: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRepeat: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faReply: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faReplyAll: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRepublican: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRestroom: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRetweet: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRibbon: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRightFromBracket: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRightLeft: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRightLong: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRightToBracket: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRing: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRmb: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRoad: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRoadBarrier: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRoadBridge: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRoadCircleCheck: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRoadCircleExclamation: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRoadCircleXmark: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRoadLock: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRoadSpikes: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRobot: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRocket: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRodAsclepius: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRodSnake: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRotate: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRotateBack: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRotateBackward: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRotateForward: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRotateLeft: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRotateRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRouble: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRoute: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRss: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRssSquare: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRub: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRuble: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRubleSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRug: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRuler: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRulerCombined: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRulerHorizontal: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRulerVertical: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRunning: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRupee: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRupeeSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faRupiahSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faS: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSackDollar: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSackXmark: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSadCry: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSadTear: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSailboat: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSatellite: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSatelliteDish: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSave: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faScaleBalanced: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faScaleUnbalanced: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faScaleUnbalancedFlip: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSchool: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSchoolCircleCheck: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSchoolCircleExclamation: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSchoolCircleXmark: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSchoolFlag: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSchoolLock: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faScissors: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faScrewdriver: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faScrewdriverWrench: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faScroll: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faScrollTorah: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSdCard: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSearch: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSearchDollar: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSearchLocation: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSearchMinus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSearchPlus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSection: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSeedling: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faServer: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faShapes: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faShare: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faShareAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faShareAltSquare: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faShareFromSquare: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faShareNodes: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faShareSquare: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSheetPlastic: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faShekel: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faShekelSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSheqel: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSheqelSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faShield: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faShieldAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faShieldBlank: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faShieldCat: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faShieldDog: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faShieldHalved: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faShieldHeart: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faShieldVirus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faShip: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faShippingFast: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faShirt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faShoePrints: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faShop: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faShopLock: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faShoppingBag: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faShoppingBasket: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faShoppingCart: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faShopSlash: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faShower: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faShrimp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faShuffle: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faShuttleSpace: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faShuttleVan: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSignal: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSignal5: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSignalPerfect: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSignature: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSignHanging: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSignIn: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSignInAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSigning: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSignLanguage: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSignOut: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSignOutAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSignsPost: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSimCard: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSink: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSitemap: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSkating: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSkiing: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSkiingNordic: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSkull: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSkullCrossbones: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSlash: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSleigh: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSliders: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSlidersH: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSmile: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSmileBeam: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSmileWink: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSmog: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSmoking: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSmokingBan: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSms: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSnowboarding: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSnowflake: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSnowman: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSnowplow: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSoap: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSoccerBall: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSocks: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSolarPanel: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSort: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSortAlphaAsc: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSortAlphaDesc: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSortAlphaDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSortAlphaDownAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSortAlphaUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSortAlphaUpAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSortAmountAsc: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSortAmountDesc: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSortAmountDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSortAmountDownAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSortAmountUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSortAmountUpAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSortAsc: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSortDesc: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSortDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSortNumericAsc: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSortNumericDesc: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSortNumericDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSortNumericDownAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSortNumericUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSortNumericUpAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSortUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSpa: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSpaceShuttle: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSpaghettiMonsterFlying: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSpellCheck: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSpider: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSpinner: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSplotch: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSpoon: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSprayCan: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSprayCanSparkles: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSprout: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSquare: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSquareArrowUpRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSquareCaretDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSquareCaretLeft: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSquareCaretRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSquareCaretUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSquareCheck: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSquareEnvelope: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSquareFull: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSquareH: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSquareMinus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSquareNfi: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSquareParking: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSquarePen: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSquarePersonConfined: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSquarePhone: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSquarePhoneFlip: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSquarePlus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSquarePollHorizontal: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSquarePollVertical: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSquareRootAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSquareRootVariable: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSquareRss: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSquareShareNodes: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSquareUpRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSquareVirus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSquareXmark: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faStaffAesculapius: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faStaffSnake: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faStairs: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faStamp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faStapler: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faStar: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faStarAndCrescent: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faStarHalf: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faStarHalfAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faStarHalfStroke: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faStarOfDavid: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faStarOfLife: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faStepBackward: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faStepForward: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSterlingSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faStethoscope: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faStickyNote: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faStop: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faStopCircle: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faStopwatch: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faStopwatch20: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faStore: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faStoreAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faStoreAltSlash: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faStoreSlash: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faStream: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faStreetView: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faStrikethrough: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faStroopwafel: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSubscript: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSubtract: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSubway: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSuitcase: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSuitcaseMedical: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSuitcaseRolling: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSun: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSunPlantWilt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSuperscript: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSurprise: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSwatchbook: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSwimmer: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSwimmingPool: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSynagogue: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSync: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSyncAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faSyringe: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faT: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTable: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTableCells: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTableCellsColumnLock: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTableCellsLarge: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTableCellsRowLock: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTableCellsRowUnlock: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTableColumns: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTableList: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTablet: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTabletAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTabletAndroid: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTabletButton: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTableTennis: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTableTennisPaddleBall: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTablets: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTabletScreenButton: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTachographDigital: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTachometer: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTachometerAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTachometerAltAverage: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTachometerAltFast: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTachometerAverage: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTachometerFast: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTag: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTags: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTanakh: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTape: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTarp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTarpDroplet: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTasks: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTasksAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTaxi: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTeeth: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTeethOpen: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTeletype: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTelevision: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTemperature0: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTemperature1: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTemperature2: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTemperature3: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTemperature4: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTemperatureArrowDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTemperatureArrowUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTemperatureDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTemperatureEmpty: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTemperatureFull: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTemperatureHalf: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTemperatureHigh: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTemperatureLow: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTemperatureQuarter: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTemperatureThreeQuarters: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTemperatureUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTenge: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTengeSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTent: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTentArrowDownToLine: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTentArrowLeftRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTentArrowsDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTentArrowTurnLeft: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTents: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTerminal: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTextHeight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTextSlash: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTextWidth: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTh: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTheaterMasks: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faThermometer: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faThermometer0: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faThermometer1: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faThermometer2: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faThermometer3: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faThermometer4: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faThermometerEmpty: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faThermometerFull: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faThermometerHalf: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faThermometerQuarter: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faThermometerThreeQuarters: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faThLarge: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faThList: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faThumbsDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faThumbsUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faThumbtack: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faThumbtackSlash: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faThunderstorm: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTicket: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTicketAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTicketSimple: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTimeline: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTimes: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTimesCircle: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTimesRectangle: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTimesSquare: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTint: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTintSlash: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTired: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faToggleOff: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faToggleOn: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faToilet: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faToiletPaper: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faToiletPaperSlash: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faToiletPortable: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faToiletsPortable: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faToolbox: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTools: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTooth: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTorah: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faToriiGate: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTornado: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTowerBroadcast: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTowerCell: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTowerObservation: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTractor: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTrademark: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTrafficLight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTrailer: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTrain: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTrainSubway: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTrainTram: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTram: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTransgender: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTransgenderAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTrash: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTrashAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTrashArrowUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTrashCan: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTrashCanArrowUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTrashRestore: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTrashRestoreAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTree: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTreeCity: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTriangleCircleSquare: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTriangleExclamation: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTrophy: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTrowel: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTrowelBricks: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTruck: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTruckArrowRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTruckDroplet: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTruckFast: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTruckField: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTruckFieldUn: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTruckFront: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTruckLoading: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTruckMedical: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTruckMonster: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTruckMoving: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTruckPickup: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTruckPlane: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTruckRampBox: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTry: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTShirt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTty: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTurkishLira: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTurkishLiraSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTurnDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTurnUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTv: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faTvAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faU: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUmbrella: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUmbrellaBeach: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUnderline: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUndo: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUndoAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUniversalAccess: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUniversity: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUnlink: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUnlock: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUnlockAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUnlockKeyhole: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUnsorted: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUpDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUpDownLeftRight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUpload: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUpLong: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUpRightAndDownLeftFromCenter: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUpRightFromSquare: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUsd: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUser: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUserAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUserAltSlash: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUserAstronaut: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUserCheck: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUserCircle: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUserClock: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUserCog: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUserDoctor: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUserEdit: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUserFriends: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUserGear: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUserGraduate: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUserGroup: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUserInjured: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUserLarge: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUserLargeSlash: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUserLock: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUserMd: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUserMinus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUserNinja: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUserNurse: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUserPen: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUserPlus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUsers: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUsersBetweenLines: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUsersCog: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUserSecret: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUsersGear: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUserShield: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUserSlash: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUsersLine: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUsersRays: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUsersRectangle: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUsersSlash: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUsersViewfinder: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUserTag: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUserTie: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUserTimes: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUserXmark: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUtensils: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faUtensilSpoon: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faV: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVanShuttle: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVault: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVcard: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVectorSquare: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVenus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVenusDouble: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVenusMars: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVest: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVestPatches: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVial: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVialCircleCheck: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVials: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVialVirus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVideo: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVideoCamera: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVideoSlash: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVihara: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVirus: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVirusCovid: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVirusCovidSlash: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faViruses: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVirusSlash: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVoicemail: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVolcano: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVolleyball: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVolleyballBall: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVolumeControlPhone: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVolumeDown: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVolumeHigh: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVolumeLow: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVolumeMute: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVolumeOff: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVolumeTimes: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVolumeUp: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVolumeXmark: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVoteYea: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faVrCardboard: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faW: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWalkieTalkie: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWalking: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWallet: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWandMagic: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWandMagicSparkles: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWandSparkles: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWarehouse: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWarning: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWater: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWaterLadder: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWaveSquare: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWebAwesome: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWeight: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWeightHanging: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWeightScale: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWheatAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWheatAwn: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWheatAwnCircleExclamation: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWheelchair: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWheelchairAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWheelchairMove: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWhiskeyGlass: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWifi: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWifi3: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWifiStrong: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWind: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWindowClose: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWindowMaximize: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWindowMinimize: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWindowRestore: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWineBottle: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWineGlass: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWineGlassAlt: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWineGlassEmpty: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWon: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWonSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWorm: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faWrench: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faX: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faXmark: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faXmarkCircle: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faXmarksLines: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faXmarkSquare: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faXRay: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faY: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faYen: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faYenSign: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faYinYang: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faZ: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];import { IconDefinition, IconPrefix, IconName } from "@fortawesome/fontawesome-common-types";
export const definition: IconDefinition;
export const faZap: IconDefinition;
export const prefix: IconPrefix;
export const iconName: IconName;
export const width: number;
export const height: number;
export const ligatures: (string | number)[];
export const unicode: string;
export const svgPathData: string;
export const aliases: (string | number)[];export const fa0: IconDefinition;
export const fa1: IconDefinition;
export const fa2: IconDefinition;
export const fa3: IconDefinition;
export const fa4: IconDefinition;
export const fa5: IconDefinition;
export const fa6: IconDefinition;
export const fa7: IconDefinition;
export const fa8: IconDefinition;
export const fa9: IconDefinition;
export const faFillDrip: IconDefinition;
export const faArrowsToCircle: IconDefinition;
export const faCircleChevronRight: IconDefinition;
export const faChevronCircleRight: IconDefinition;
export const faAt: IconDefinition;
export const faTrashCan: IconDefinition;
export const faTrashAlt: IconDefinition;
export const faTextHeight: IconDefinition;
export const faUserXmark: IconDefinition;
export const faUserTimes: IconDefinition;
export const faStethoscope: IconDefinition;
export const faMessage: IconDefinition;
export const faCommentAlt: IconDefinition;
export const faInfo: IconDefinition;
export const faDownLeftAndUpRightToCenter: IconDefinition;
export const faCompressAlt: IconDefinition;
export const faExplosion: IconDefinition;
export const faFileLines: IconDefinition;
export const faFileAlt: IconDefinition;
export const faFileText: IconDefinition;
export const faWaveSquare: IconDefinition;
export const faRing: IconDefinition;
export const faBuildingUn: IconDefinition;
export const faDiceThree: IconDefinition;
export const faCalendarDays: IconDefinition;
export const faCalendarAlt: IconDefinition;
export const faAnchorCircleCheck: IconDefinition;
export const faBuildingCircleArrowRight: IconDefinition;
export const faVolleyball: IconDefinition;
export const faVolleyballBall: IconDefinition;
export const faArrowsUpToLine: IconDefinition;
export const faSortDown: IconDefinition;
export const faSortDesc: IconDefinition;
export const faCircleMinus: IconDefinition;
export const faMinusCircle: IconDefinition;
export const faDoorOpen: IconDefinition;
export const faRightFromBracket: IconDefinition;
export const faSignOutAlt: IconDefinition;
export const faAtom: IconDefinition;
export const faSoap: IconDefinition;
export const faIcons: IconDefinition;
export const faHeartMusicCameraBolt: IconDefinition;
export const faMicrophoneLinesSlash: IconDefinition;
export const faMicrophoneAltSlash: IconDefinition;
export const faBridgeCircleCheck: IconDefinition;
export const faPumpMedical: IconDefinition;
export const faFingerprint: IconDefinition;
export const faHandPointRight: IconDefinition;
export const faMagnifyingGlassLocation: IconDefinition;
export const faSearchLocation: IconDefinition;
export const faForwardStep: IconDefinition;
export const faStepForward: IconDefinition;
export const faFaceSmileBeam: IconDefinition;
export const faSmileBeam: IconDefinition;
export const faFlagCheckered: IconDefinition;
export const faFootball: IconDefinition;
export const faFootballBall: IconDefinition;
export const faSchoolCircleExclamation: IconDefinition;
export const faCrop: IconDefinition;
export const faAnglesDown: IconDefinition;
export const faAngleDoubleDown: IconDefinition;
export const faUsersRectangle: IconDefinition;
export const faPeopleRoof: IconDefinition;
export const faPeopleLine: IconDefinition;
export const faBeerMugEmpty: IconDefinition;
export const faBeer: IconDefinition;
export const faDiagramPredecessor: IconDefinition;
export const faArrowUpLong: IconDefinition;
export const faLongArrowUp: IconDefinition;
export const faFireFlameSimple: IconDefinition;
export const faBurn: IconDefinition;
export const faPerson: IconDefinition;
export const faMale: IconDefinition;
export const faLaptop: IconDefinition;
export const faFileCsv: IconDefinition;
export const faMenorah: IconDefinition;
export const faTruckPlane: IconDefinition;
export const faRecordVinyl: IconDefinition;
export const faFaceGrinStars: IconDefinition;
export const faGrinStars: IconDefinition;
export const faBong: IconDefinition;
export const faSpaghettiMonsterFlying: IconDefinition;
export const faPastafarianism: IconDefinition;
export const faArrowDownUpAcrossLine: IconDefinition;
export const faSpoon: IconDefinition;
export const faUtensilSpoon: IconDefinition;
export const faJarWheat: IconDefinition;
export const faEnvelopesBulk: IconDefinition;
export const faMailBulk: IconDefinition;
export const faFileCircleExclamation: IconDefinition;
export const faCircleH: IconDefinition;
export const faHospitalSymbol: IconDefinition;
export const faPager: IconDefinition;
export const faAddressBook: IconDefinition;
export const faContactBook: IconDefinition;
export const faStrikethrough: IconDefinition;
export const faK: IconDefinition;
export const faLandmarkFlag: IconDefinition;
export const faPencil: IconDefinition;
export const faPencilAlt: IconDefinition;
export const faBackward: IconDefinition;
export const faCaretRight: IconDefinition;
export const faComments: IconDefinition;
export const faPaste: IconDefinition;
export const faFileClipboard: IconDefinition;
export const faCodePullRequest: IconDefinition;
export const faClipboardList: IconDefinition;
export const faTruckRampBox: IconDefinition;
export const faTruckLoading: IconDefinition;
export const faUserCheck: IconDefinition;
export const faVialVirus: IconDefinition;
export const faSheetPlastic: IconDefinition;
export const faBlog: IconDefinition;
export const faUserNinja: IconDefinition;
export const faPersonArrowUpFromLine: IconDefinition;
export const faScrollTorah: IconDefinition;
export const faTorah: IconDefinition;
export const faBroomBall: IconDefinition;
export const faQuidditch: IconDefinition;
export const faQuidditchBroomBall: IconDefinition;
export const faToggleOff: IconDefinition;
export const faBoxArchive: IconDefinition;
export const faArchive: IconDefinition;
export const faPersonDrowning: IconDefinition;
export const faArrowDown91: IconDefinition;
export const faSortNumericDesc: IconDefinition;
export const faSortNumericDownAlt: IconDefinition;
export const faFaceGrinTongueSquint: IconDefinition;
export const faGrinTongueSquint: IconDefinition;
export const faSprayCan: IconDefinition;
export const faTruckMonster: IconDefinition;
export const faW: IconDefinition;
export const faEarthAfrica: IconDefinition;
export const faGlobeAfrica: IconDefinition;
export const faRainbow: IconDefinition;
export const faCircleNotch: IconDefinition;
export const faTabletScreenButton: IconDefinition;
export const faTabletAlt: IconDefinition;
export const faPaw: IconDefinition;
export const faCloud: IconDefinition;
export const faTrowelBricks: IconDefinition;
export const faFaceFlushed: IconDefinition;
export const faFlushed: IconDefinition;
export const faHospitalUser: IconDefinition;
export const faTentArrowLeftRight: IconDefinition;
export const faGavel: IconDefinition;
export const faLegal: IconDefinition;
export const faBinoculars: IconDefinition;
export const faMicrophoneSlash: IconDefinition;
export const faBoxTissue: IconDefinition;
export const faMotorcycle: IconDefinition;
export const faBellConcierge: IconDefinition;
export const faConciergeBell: IconDefinition;
export const faPenRuler: IconDefinition;
export const faPencilRuler: IconDefinition;
export const faPeopleArrows: IconDefinition;
export const faPeopleArrowsLeftRight: IconDefinition;
export const faMarsAndVenusBurst: IconDefinition;
export const faSquareCaretRight: IconDefinition;
export const faCaretSquareRight: IconDefinition;
export const faScissors: IconDefinition;
export const faCut: IconDefinition;
export const faSunPlantWilt: IconDefinition;
export const faToiletsPortable: IconDefinition;
export const faHockeyPuck: IconDefinition;
export const faTable: IconDefinition;
export const faMagnifyingGlassArrowRight: IconDefinition;
export const faTachographDigital: IconDefinition;
export const faDigitalTachograph: IconDefinition;
export const faUsersSlash: IconDefinition;
export const faClover: IconDefinition;
export const faReply: IconDefinition;
export const faMailReply: IconDefinition;
export const faStarAndCrescent: IconDefinition;
export const faHouseFire: IconDefinition;
export const faSquareMinus: IconDefinition;
export const faMinusSquare: IconDefinition;
export const faHelicopter: IconDefinition;
export const faCompass: IconDefinition;
export const faSquareCaretDown: IconDefinition;
export const faCaretSquareDown: IconDefinition;
export const faFileCircleQuestion: IconDefinition;
export const faLaptopCode: IconDefinition;
export const faSwatchbook: IconDefinition;
export const faPrescriptionBottle: IconDefinition;
export const faBars: IconDefinition;
export const faNavicon: IconDefinition;
export const faPeopleGroup: IconDefinition;
export const faHourglassEnd: IconDefinition;
export const faHourglass3: IconDefinition;
export const faHeartCrack: IconDefinition;
export const faHeartBroken: IconDefinition;
export const faSquareUpRight: IconDefinition;
export const faExternalLinkSquareAlt: IconDefinition;
export const faFaceKissBeam: IconDefinition;
export const faKissBeam: IconDefinition;
export const faFilm: IconDefinition;
export const faRulerHorizontal: IconDefinition;
export const faPeopleRobbery: IconDefinition;
export const faLightbulb: IconDefinition;
export const faCaretLeft: IconDefinition;
export const faCircleExclamation: IconDefinition;
export const faExclamationCircle: IconDefinition;
export const faSchoolCircleXmark: IconDefinition;
export const faArrowRightFromBracket: IconDefinition;
export const faSignOut: IconDefinition;
export const faCircleChevronDown: IconDefinition;
export const faChevronCircleDown: IconDefinition;
export const faUnlockKeyhole: IconDefinition;
export const faUnlockAlt: IconDefinition;
export const faCloudShowersHeavy: IconDefinition;
export const faHeadphonesSimple: IconDefinition;
export const faHeadphonesAlt: IconDefinition;
export const faSitemap: IconDefinition;
export const faCircleDollarToSlot: IconDefinition;
export const faDonate: IconDefinition;
export const faMemory: IconDefinition;
export const faRoadSpikes: IconDefinition;
export const faFireBurner: IconDefinition;
export const faFlag: IconDefinition;
export const faHanukiah: IconDefinition;
export const faFeather: IconDefinition;
export const faVolumeLow: IconDefinition;
export const faVolumeDown: IconDefinition;
export const faCommentSlash: IconDefinition;
export const faCloudSunRain: IconDefinition;
export const faCompress: IconDefinition;
export const faWheatAwn: IconDefinition;
export const faWheatAlt: IconDefinition;
export const faAnkh: IconDefinition;
export const faHandsHoldingChild: IconDefinition;
export const faAsterisk: IconDefinition;
export const faSquareCheck: IconDefinition;
export const faCheckSquare: IconDefinition;
export const faPesetaSign: IconDefinition;
export const faHeading: IconDefinition;
export const faHeader: IconDefinition;
export const faGhost: IconDefinition;
export const faList: IconDefinition;
export const faListSquares: IconDefinition;
export const faSquarePhoneFlip: IconDefinition;
export const faPhoneSquareAlt: IconDefinition;
export const faCartPlus: IconDefinition;
export const faGamepad: IconDefinition;
export const faCircleDot: IconDefinition;
export const faDotCircle: IconDefinition;
export const faFaceDizzy: IconDefinition;
export const faDizzy: IconDefinition;
export const faEgg: IconDefinition;
export const faHouseMedicalCircleXmark: IconDefinition;
export const faCampground: IconDefinition;
export const faFolderPlus: IconDefinition;
export const faFutbol: IconDefinition;
export const faFutbolBall: IconDefinition;
export const faSoccerBall: IconDefinition;
export const faPaintbrush: IconDefinition;
export const faPaintBrush: IconDefinition;
export const faLock: IconDefinition;
export const faGasPump: IconDefinition;
export const faHotTubPerson: IconDefinition;
export const faHotTub: IconDefinition;
export const faMapLocation: IconDefinition;
export const faMapMarked: IconDefinition;
export const faHouseFloodWater: IconDefinition;
export const faTree: IconDefinition;
export const faBridgeLock: IconDefinition;
export const faSackDollar: IconDefinition;
export const faPenToSquare: IconDefinition;
export const faEdit: IconDefinition;
export const faCarSide: IconDefinition;
export const faShareNodes: IconDefinition;
export const faShareAlt: IconDefinition;
export const faHeartCircleMinus: IconDefinition;
export const faHourglassHalf: IconDefinition;
export const faHourglass2: IconDefinition;
export const faMicroscope: IconDefinition;
export const faSink: IconDefinition;
export const faBagShopping: IconDefinition;
export const faShoppingBag: IconDefinition;
export const faArrowDownZA: IconDefinition;
export const faSortAlphaDesc: IconDefinition;
export const faSortAlphaDownAlt: IconDefinition;
export const faMitten: IconDefinition;
export const faPersonRays: IconDefinition;
export const faUsers: IconDefinition;
export const faEyeSlash: IconDefinition;
export const faFlaskVial: IconDefinition;
export const faHand: IconDefinition;
export const faHandPaper: IconDefinition;
export const faOm: IconDefinition;
export const faWorm: IconDefinition;
export const faHouseCircleXmark: IconDefinition;
export const faPlug: IconDefinition;
export const faChevronUp: IconDefinition;
export const faHandSpock: IconDefinition;
export const faStopwatch: IconDefinition;
export const faFaceKiss: IconDefinition;
export const faKiss: IconDefinition;
export const faBridgeCircleXmark: IconDefinition;
export const faFaceGrinTongue: IconDefinition;
export const faGrinTongue: IconDefinition;
export const faChessBishop: IconDefinition;
export const faFaceGrinWink: IconDefinition;
export const faGrinWink: IconDefinition;
export const faEarDeaf: IconDefinition;
export const faDeaf: IconDefinition;
export const faDeafness: IconDefinition;
export const faHardOfHearing: IconDefinition;
export const faRoadCircleCheck: IconDefinition;
export const faDiceFive: IconDefinition;
export const faSquareRss: IconDefinition;
export const faRssSquare: IconDefinition;
export const faLandMineOn: IconDefinition;
export const faICursor: IconDefinition;
export const faStamp: IconDefinition;
export const faStairs: IconDefinition;
export const faI: IconDefinition;
export const faHryvniaSign: IconDefinition;
export const faHryvnia: IconDefinition;
export const faPills: IconDefinition;
export const faFaceGrinWide: IconDefinition;
export const faGrinAlt: IconDefinition;
export const faTooth: IconDefinition;
export const faV: IconDefinition;
export const faBangladeshiTakaSign: IconDefinition;
export const faBicycle: IconDefinition;
export const faStaffSnake: IconDefinition;
export const faRodAsclepius: IconDefinition;
export const faRodSnake: IconDefinition;
export const faStaffAesculapius: IconDefinition;
export const faHeadSideCoughSlash: IconDefinition;
export const faTruckMedical: IconDefinition;
export const faAmbulance: IconDefinition;
export const faWheatAwnCircleExclamation: IconDefinition;
export const faSnowman: IconDefinition;
export const faMortarPestle: IconDefinition;
export const faRoadBarrier: IconDefinition;
export const faSchool: IconDefinition;
export const faIgloo: IconDefinition;
export const faJoint: IconDefinition;
export const faAngleRight: IconDefinition;
export const faHorse: IconDefinition;
export const faQ: IconDefinition;
export const faG: IconDefinition;
export const faNotesMedical: IconDefinition;
export const faTemperatureHalf: IconDefinition;
export const faTemperature2: IconDefinition;
export const faThermometer2: IconDefinition;
export const faThermometerHalf: IconDefinition;
export const faDongSign: IconDefinition;
export const faCapsules: IconDefinition;
export const faPooStorm: IconDefinition;
export const faPooBolt: IconDefinition;
export const faFaceFrownOpen: IconDefinition;
export const faFrownOpen: IconDefinition;
export const faHandPointUp: IconDefinition;
export const faMoneyBill: IconDefinition;
export const faBookmark: IconDefinition;
export const faAlignJustify: IconDefinition;
export const faUmbrellaBeach: IconDefinition;
export const faHelmetUn: IconDefinition;
export const faBullseye: IconDefinition;
export const faBacon: IconDefinition;
export const faHandPointDown: IconDefinition;
export const faArrowUpFromBracket: IconDefinition;
export const faFolder: IconDefinition;
export const faFolderBlank: IconDefinition;
export const faFileWaveform: IconDefinition;
export const faFileMedicalAlt: IconDefinition;
export const faRadiation: IconDefinition;
export const faChartSimple: IconDefinition;
export const faMarsStroke: IconDefinition;
export const faVial: IconDefinition;
export const faGauge: IconDefinition;
export const faDashboard: IconDefinition;
export const faGaugeMed: IconDefinition;
export const faTachometerAltAverage: IconDefinition;
export const faWandMagicSparkles: IconDefinition;
export const faMagicWandSparkles: IconDefinition;
export const faE: IconDefinition;
export const faPenClip: IconDefinition;
export const faPenAlt: IconDefinition;
export const faBridgeCircleExclamation: IconDefinition;
export const faUser: IconDefinition;
export const faSchoolCircleCheck: IconDefinition;
export const faDumpster: IconDefinition;
export const faVanShuttle: IconDefinition;
export const faShuttleVan: IconDefinition;
export const faBuildingUser: IconDefinition;
export const faSquareCaretLeft: IconDefinition;
export const faCaretSquareLeft: IconDefinition;
export const faHighlighter: IconDefinition;
export const faKey: IconDefinition;
export const faBullhorn: IconDefinition;
export const faGlobe: IconDefinition;
export const faSynagogue: IconDefinition;
export const faPersonHalfDress: IconDefinition;
export const faRoadBridge: IconDefinition;
export const faLocationArrow: IconDefinition;
export const faC: IconDefinition;
export const faTabletButton: IconDefinition;
export const faBuildingLock: IconDefinition;
export const faPizzaSlice: IconDefinition;
export const faMoneyBillWave: IconDefinition;
export const faChartArea: IconDefinition;
export const faAreaChart: IconDefinition;
export const faHouseFlag: IconDefinition;
export const faPersonCircleMinus: IconDefinition;
export const faBan: IconDefinition;
export const faCancel: IconDefinition;
export const faCameraRotate: IconDefinition;
export const faSprayCanSparkles: IconDefinition;
export const faAirFreshener: IconDefinition;
export const faStar: IconDefinition;
export const faRepeat: IconDefinition;
export const faCross: IconDefinition;
export const faBox: IconDefinition;
export const faVenusMars: IconDefinition;
export const faArrowPointer: IconDefinition;
export const faMousePointer: IconDefinition;
export const faMaximize: IconDefinition;
export const faExpandArrowsAlt: IconDefinition;
export const faChargingStation: IconDefinition;
export const faShapes: IconDefinition;
export const faTriangleCircleSquare: IconDefinition;
export const faShuffle: IconDefinition;
export const faRandom: IconDefinition;
export const faPersonRunning: IconDefinition;
export const faRunning: IconDefinition;
export const faMobileRetro: IconDefinition;
export const faGripLinesVertical: IconDefinition;
export const faSpider: IconDefinition;
export const faHandsBound: IconDefinition;
export const faFileInvoiceDollar: IconDefinition;
export const faPlaneCircleExclamation: IconDefinition;
export const faXRay: IconDefinition;
export const faSpellCheck: IconDefinition;
export const faSlash: IconDefinition;
export const faComputerMouse: IconDefinition;
export const faMouse: IconDefinition;
export const faArrowRightToBracket: IconDefinition;
export const faSignIn: IconDefinition;
export const faShopSlash: IconDefinition;
export const faStoreAltSlash: IconDefinition;
export const faServer: IconDefinition;
export const faVirusCovidSlash: IconDefinition;
export const faShopLock: IconDefinition;
export const faHourglassStart: IconDefinition;
export const faHourglass1: IconDefinition;
export const faBlenderPhone: IconDefinition;
export const faBuildingWheat: IconDefinition;
export const faPersonBreastfeeding: IconDefinition;
export const faRightToBracket: IconDefinition;
export const faSignInAlt: IconDefinition;
export const faVenus: IconDefinition;
export const faPassport: IconDefinition;
export const faThumbtackSlash: IconDefinition;
export const faThumbTackSlash: IconDefinition;
export const faHeartPulse: IconDefinition;
export const faHeartbeat: IconDefinition;
export const faPeopleCarryBox: IconDefinition;
export const faPeopleCarry: IconDefinition;
export const faTemperatureHigh: IconDefinition;
export const faMicrochip: IconDefinition;
export const faCrown: IconDefinition;
export const faWeightHanging: IconDefinition;
export const faXmarksLines: IconDefinition;
export const faFilePrescription: IconDefinition;
export const faWeightScale: IconDefinition;
export const faWeight: IconDefinition;
export const faUserGroup: IconDefinition;
export const faUserFriends: IconDefinition;
export const faArrowUpAZ: IconDefinition;
export const faSortAlphaUp: IconDefinition;
export const faChessKnight: IconDefinition;
export const faFaceLaughSquint: IconDefinition;
export const faLaughSquint: IconDefinition;
export const faWheelchair: IconDefinition;
export const faCircleArrowUp: IconDefinition;
export const faArrowCircleUp: IconDefinition;
export const faToggleOn: IconDefinition;
export const faPersonWalking: IconDefinition;
export const faWalking: IconDefinition;
export const faL: IconDefinition;
export const faFire: IconDefinition;
export const faBedPulse: IconDefinition;
export const faProcedures: IconDefinition;
export const faShuttleSpace: IconDefinition;
export const faSpaceShuttle: IconDefinition;
export const faFaceLaugh: IconDefinition;
export const faLaugh: IconDefinition;
export const faFolderOpen: IconDefinition;
export const faHeartCirclePlus: IconDefinition;
export const faCodeFork: IconDefinition;
export const faCity: IconDefinition;
export const faMicrophoneLines: IconDefinition;
export const faMicrophoneAlt: IconDefinition;
export const faPepperHot: IconDefinition;
export const faUnlock: IconDefinition;
export const faColonSign: IconDefinition;
export const faHeadset: IconDefinition;
export const faStoreSlash: IconDefinition;
export const faRoadCircleXmark: IconDefinition;
export const faUserMinus: IconDefinition;
export const faMarsStrokeUp: IconDefinition;
export const faMarsStrokeV: IconDefinition;
export const faChampagneGlasses: IconDefinition;
export const faGlassCheers: IconDefinition;
export const faClipboard: IconDefinition;
export const faHouseCircleExclamation: IconDefinition;
export const faFileArrowUp: IconDefinition;
export const faFileUpload: IconDefinition;
export const faWifi: IconDefinition;
export const faWifi3: IconDefinition;
export const faWifiStrong: IconDefinition;
export const faBath: IconDefinition;
export const faBathtub: IconDefinition;
export const faUnderline: IconDefinition;
export const faUserPen: IconDefinition;
export const faUserEdit: IconDefinition;
export const faSignature: IconDefinition;
export const faStroopwafel: IconDefinition;
export const faBold: IconDefinition;
export const faAnchorLock: IconDefinition;
export const faBuildingNgo: IconDefinition;
export const faManatSign: IconDefinition;
export const faNotEqual: IconDefinition;
export const faBorderTopLeft: IconDefinition;
export const faBorderStyle: IconDefinition;
export const faMapLocationDot: IconDefinition;
export const faMapMarkedAlt: IconDefinition;
export const faJedi: IconDefinition;
export const faSquarePollVertical: IconDefinition;
export const faPoll: IconDefinition;
export const faMugHot: IconDefinition;
export const faCarBattery: IconDefinition;
export const faBatteryCar: IconDefinition;
export const faGift: IconDefinition;
export const faDiceTwo: IconDefinition;
export const faChessQueen: IconDefinition;
export const faGlasses: IconDefinition;
export const faChessBoard: IconDefinition;
export const faBuildingCircleCheck: IconDefinition;
export const faPersonChalkboard: IconDefinition;
export const faMarsStrokeRight: IconDefinition;
export const faMarsStrokeH: IconDefinition;
export const faHandBackFist: IconDefinition;
export const faHandRock: IconDefinition;
export const faSquareCaretUp: IconDefinition;
export const faCaretSquareUp: IconDefinition;
export const faCloudShowersWater: IconDefinition;
export const faChartBar: IconDefinition;
export const faBarChart: IconDefinition;
export const faHandsBubbles: IconDefinition;
export const faHandsWash: IconDefinition;
export const faLessThanEqual: IconDefinition;
export const faTrain: IconDefinition;
export const faEyeLowVision: IconDefinition;
export const faLowVision: IconDefinition;
export const faCrow: IconDefinition;
export const faSailboat: IconDefinition;
export const faWindowRestore: IconDefinition;
export const faSquarePlus: IconDefinition;
export const faPlusSquare: IconDefinition;
export const faToriiGate: IconDefinition;
export const faFrog: IconDefinition;
export const faBucket: IconDefinition;
export const faImage: IconDefinition;
export const faMicrophone: IconDefinition;
export const faCow: IconDefinition;
export const faCaretUp: IconDefinition;
export const faScrewdriver: IconDefinition;
export const faFolderClosed: IconDefinition;
export const faHouseTsunami: IconDefinition;
export const faSquareNfi: IconDefinition;
export const faArrowUpFromGroundWater: IconDefinition;
export const faMartiniGlass: IconDefinition;
export const faGlassMartiniAlt: IconDefinition;
export const faRotateLeft: IconDefinition;
export const faRotateBack: IconDefinition;
export const faRotateBackward: IconDefinition;
export const faUndoAlt: IconDefinition;
export const faTableColumns: IconDefinition;
export const faColumns: IconDefinition;
export const faLemon: IconDefinition;
export const faHeadSideMask: IconDefinition;
export const faHandshake: IconDefinition;
export const faGem: IconDefinition;
export const faDolly: IconDefinition;
export const faDollyBox: IconDefinition;
export const faSmoking: IconDefinition;
export const faMinimize: IconDefinition;
export const faCompressArrowsAlt: IconDefinition;
export const faMonument: IconDefinition;
export const faSnowplow: IconDefinition;
export const faAnglesRight: IconDefinition;
export const faAngleDoubleRight: IconDefinition;
export const faCannabis: IconDefinition;
export const faCirclePlay: IconDefinition;
export const faPlayCircle: IconDefinition;
export const faTablets: IconDefinition;
export const faEthernet: IconDefinition;
export const faEuroSign: IconDefinition;
export const faEur: IconDefinition;
export const faEuro: IconDefinition;
export const faChair: IconDefinition;
export const faCircleCheck: IconDefinition;
export const faCheckCircle: IconDefinition;
export const faCircleStop: IconDefinition;
export const faStopCircle: IconDefinition;
export const faCompassDrafting: IconDefinition;
export const faDraftingCompass: IconDefinition;
export const faPlateWheat: IconDefinition;
export const faIcicles: IconDefinition;
export const faPersonShelter: IconDefinition;
export const faNeuter: IconDefinition;
export const faIdBadge: IconDefinition;
export const faMarker: IconDefinition;
export const faFaceLaughBeam: IconDefinition;
export const faLaughBeam: IconDefinition;
export const faHelicopterSymbol: IconDefinition;
export const faUniversalAccess: IconDefinition;
export const faCircleChevronUp: IconDefinition;
export const faChevronCircleUp: IconDefinition;
export const faLariSign: IconDefinition;
export const faVolcano: IconDefinition;
export const faPersonWalkingDashedLineArrowRight: IconDefinition;
export const faSterlingSign: IconDefinition;
export const faGbp: IconDefinition;
export const faPoundSign: IconDefinition;
export const faViruses: IconDefinition;
export const faSquarePersonConfined: IconDefinition;
export const faUserTie: IconDefinition;
export const faArrowDownLong: IconDefinition;
export const faLongArrowDown: IconDefinition;
export const faTentArrowDownToLine: IconDefinition;
export const faCertificate: IconDefinition;
export const faReplyAll: IconDefinition;
export const faMailReplyAll: IconDefinition;
export const faSuitcase: IconDefinition;
export const faPersonSkating: IconDefinition;
export const faSkating: IconDefinition;
export const faFilterCircleDollar: IconDefinition;
export const faFunnelDollar: IconDefinition;
export const faCameraRetro: IconDefinition;
export const faCircleArrowDown: IconDefinition;
export const faArrowCircleDown: IconDefinition;
export const faFileImport: IconDefinition;
export const faArrowRightToFile: IconDefinition;
export const faSquareArrowUpRight: IconDefinition;
export const faExternalLinkSquare: IconDefinition;
export const faBoxOpen: IconDefinition;
export const faScroll: IconDefinition;
export const faSpa: IconDefinition;
export const faLocationPinLock: IconDefinition;
export const faPause: IconDefinition;
export const faHillAvalanche: IconDefinition;
export const faTemperatureEmpty: IconDefinition;
export const faTemperature0: IconDefinition;
export const faThermometer0: IconDefinition;
export const faThermometerEmpty: IconDefinition;
export const faBomb: IconDefinition;
export const faRegistered: IconDefinition;
export const faAddressCard: IconDefinition;
export const faContactCard: IconDefinition;
export const faVcard: IconDefinition;
export const faScaleUnbalancedFlip: IconDefinition;
export const faBalanceScaleRight: IconDefinition;
export const faSubscript: IconDefinition;
export const faDiamondTurnRight: IconDefinition;
export const faDirections: IconDefinition;
export const faBurst: IconDefinition;
export const faHouseLaptop: IconDefinition;
export const faLaptopHouse: IconDefinition;
export const faFaceTired: IconDefinition;
export const faTired: IconDefinition;
export const faMoneyBills: IconDefinition;
export const faSmog: IconDefinition;
export const faCrutch: IconDefinition;
export const faFontAwesome: IconDefinition;
export const faFontAwesomeFlag: IconDefinition;
export const faFontAwesomeLogoFull: IconDefinition;
export const faCloudArrowUp: IconDefinition;
export const faCloudUpload: IconDefinition;
export const faCloudUploadAlt: IconDefinition;
export const faPalette: IconDefinition;
export const faArrowsTurnRight: IconDefinition;
export const faVest: IconDefinition;
export const faFerry: IconDefinition;
export const faArrowsDownToPeople: IconDefinition;
export const faSeedling: IconDefinition;
export const faSprout: IconDefinition;
export const faLeftRight: IconDefinition;
export const faArrowsAltH: IconDefinition;
export const faBoxesPacking: IconDefinition;
export const faCircleArrowLeft: IconDefinition;
export const faArrowCircleLeft: IconDefinition;
export const faGroupArrowsRotate: IconDefinition;
export const faBowlFood: IconDefinition;
export const faCandyCane: IconDefinition;
export const faArrowDownWideShort: IconDefinition;
export const faSortAmountAsc: IconDefinition;
export const faSortAmountDown: IconDefinition;
export const faCloudBolt: IconDefinition;
export const faThunderstorm: IconDefinition;
export const faTextSlash: IconDefinition;
export const faRemoveFormat: IconDefinition;
export const faFaceSmileWink: IconDefinition;
export const faSmileWink: IconDefinition;
export const faFileWord: IconDefinition;
export const faFilePowerpoint: IconDefinition;
export const faArrowsLeftRight: IconDefinition;
export const faArrowsH: IconDefinition;
export const faHouseLock: IconDefinition;
export const faCloudArrowDown: IconDefinition;
export const faCloudDownload: IconDefinition;
export const faCloudDownloadAlt: IconDefinition;
export const faChildren: IconDefinition;
export const faChalkboard: IconDefinition;
export const faBlackboard: IconDefinition;
export const faUserLargeSlash: IconDefinition;
export const faUserAltSlash: IconDefinition;
export const faEnvelopeOpen: IconDefinition;
export const faHandshakeSimpleSlash: IconDefinition;
export const faHandshakeAltSlash: IconDefinition;
export const faMattressPillow: IconDefinition;
export const faGuaraniSign: IconDefinition;
export const faArrowsRotate: IconDefinition;
export const faRefresh: IconDefinition;
export const faSync: IconDefinition;
export const faFireExtinguisher: IconDefinition;
export const faCruzeiroSign: IconDefinition;
export const faGreaterThanEqual: IconDefinition;
export const faShieldHalved: IconDefinition;
export const faShieldAlt: IconDefinition;
export const faBookAtlas: IconDefinition;
export const faAtlas: IconDefinition;
export const faVirus: IconDefinition;
export const faEnvelopeCircleCheck: IconDefinition;
export const faLayerGroup: IconDefinition;
export const faArrowsToDot: IconDefinition;
export const faArchway: IconDefinition;
export const faHeartCircleCheck: IconDefinition;
export const faHouseChimneyCrack: IconDefinition;
export const faHouseDamage: IconDefinition;
export const faFileZipper: IconDefinition;
export const faFileArchive: IconDefinition;
export const faSquare: IconDefinition;
export const faMartiniGlassEmpty: IconDefinition;
export const faGlassMartini: IconDefinition;
export const faCouch: IconDefinition;
export const faCediSign: IconDefinition;
export const faItalic: IconDefinition;
export const faTableCellsColumnLock: IconDefinition;
export const faChurch: IconDefinition;
export const faCommentsDollar: IconDefinition;
export const faDemocrat: IconDefinition;
export const faZ: IconDefinition;
export const faPersonSkiing: IconDefinition;
export const faSkiing: IconDefinition;
export const faRoadLock: IconDefinition;
export const faA: IconDefinition;
export const faTemperatureArrowDown: IconDefinition;
export const faTemperatureDown: IconDefinition;
export const faFeatherPointed: IconDefinition;
export const faFeatherAlt: IconDefinition;
export const faP: IconDefinition;
export const faSnowflake: IconDefinition;
export const faNewspaper: IconDefinition;
export const faRectangleAd: IconDefinition;
export const faAd: IconDefinition;
export const faCircleArrowRight: IconDefinition;
export const faArrowCircleRight: IconDefinition;
export const faFilterCircleXmark: IconDefinition;
export const faLocust: IconDefinition;
export const faSort: IconDefinition;
export const faUnsorted: IconDefinition;
export const faListOl: IconDefinition;
export const faList12: IconDefinition;
export const faListNumeric: IconDefinition;
export const faPersonDressBurst: IconDefinition;
export const faMoneyCheckDollar: IconDefinition;
export const faMoneyCheckAlt: IconDefinition;
export const faVectorSquare: IconDefinition;
export const faBreadSlice: IconDefinition;
export const faLanguage: IconDefinition;
export const faFaceKissWinkHeart: IconDefinition;
export const faKissWinkHeart: IconDefinition;
export const faFilter: IconDefinition;
export const faQuestion: IconDefinition;
export const faFileSignature: IconDefinition;
export const faUpDownLeftRight: IconDefinition;
export const faArrowsAlt: IconDefinition;
export const faHouseChimneyUser: IconDefinition;
export const faHandHoldingHeart: IconDefinition;
export const faPuzzlePiece: IconDefinition;
export const faMoneyCheck: IconDefinition;
export const faStarHalfStroke: IconDefinition;
export const faStarHalfAlt: IconDefinition;
export const faCode: IconDefinition;
export const faWhiskeyGlass: IconDefinition;
export const faGlassWhiskey: IconDefinition;
export const faBuildingCircleExclamation: IconDefinition;
export const faMagnifyingGlassChart: IconDefinition;
export const faArrowUpRightFromSquare: IconDefinition;
export const faExternalLink: IconDefinition;
export const faCubesStacked: IconDefinition;
export const faWonSign: IconDefinition;
export const faKrw: IconDefinition;
export const faWon: IconDefinition;
export const faVirusCovid: IconDefinition;
export const faAustralSign: IconDefinition;
export const faF: IconDefinition;
export const faLeaf: IconDefinition;
export const faRoad: IconDefinition;
export const faTaxi: IconDefinition;
export const faCab: IconDefinition;
export const faPersonCirclePlus: IconDefinition;
export const faChartPie: IconDefinition;
export const faPieChart: IconDefinition;
export const faBoltLightning: IconDefinition;
export const faSackXmark: IconDefinition;
export const faFileExcel: IconDefinition;
export const faFileContract: IconDefinition;
export const faFishFins: IconDefinition;
export const faBuildingFlag: IconDefinition;
export const faFaceGrinBeam: IconDefinition;
export const faGrinBeam: IconDefinition;
export const faObjectUngroup: IconDefinition;
export const faPoop: IconDefinition;
export const faLocationPin: IconDefinition;
export const faMapMarker: IconDefinition;
export const faKaaba: IconDefinition;
export const faToiletPaper: IconDefinition;
export const faHelmetSafety: IconDefinition;
export const faHardHat: IconDefinition;
export const faHatHard: IconDefinition;
export const faEject: IconDefinition;
export const faCircleRight: IconDefinition;
export const faArrowAltCircleRight: IconDefinition;
export const faPlaneCircleCheck: IconDefinition;
export const faFaceRollingEyes: IconDefinition;
export const faMehRollingEyes: IconDefinition;
export const faObjectGroup: IconDefinition;
export const faChartLine: IconDefinition;
export const faLineChart: IconDefinition;
export const faMaskVentilator: IconDefinition;
export const faArrowRight: IconDefinition;
export const faSignsPost: IconDefinition;
export const faMapSigns: IconDefinition;
export const faCashRegister: IconDefinition;
export const faPersonCircleQuestion: IconDefinition;
export const faH: IconDefinition;
export const faTarp: IconDefinition;
export const faScrewdriverWrench: IconDefinition;
export const faTools: IconDefinition;
export const faArrowsToEye: IconDefinition;
export const faPlugCircleBolt: IconDefinition;
export const faHeart: IconDefinition;
export const faMarsAndVenus: IconDefinition;
export const faHouseUser: IconDefinition;
export const faHomeUser: IconDefinition;
export const faDumpsterFire: IconDefinition;
export const faHouseCrack: IconDefinition;
export const faMartiniGlassCitrus: IconDefinition;
export const faCocktail: IconDefinition;
export const faFaceSurprise: IconDefinition;
export const faSurprise: IconDefinition;
export const faBottleWater: IconDefinition;
export const faCirclePause: IconDefinition;
export const faPauseCircle: IconDefinition;
export const faToiletPaperSlash: IconDefinition;
export const faAppleWhole: IconDefinition;
export const faAppleAlt: IconDefinition;
export const faKitchenSet: IconDefinition;
export const faR: IconDefinition;
export const faTemperatureQuarter: IconDefinition;
export const faTemperature1: IconDefinition;
export const faThermometer1: IconDefinition;
export const faThermometerQuarter: IconDefinition;
export const faCube: IconDefinition;
export const faBitcoinSign: IconDefinition;
export const faShieldDog: IconDefinition;
export const faSolarPanel: IconDefinition;
export const faLockOpen: IconDefinition;
export const faElevator: IconDefinition;
export const faMoneyBillTransfer: IconDefinition;
export const faMoneyBillTrendUp: IconDefinition;
export const faHouseFloodWaterCircleArrowRight: IconDefinition;
export const faSquarePollHorizontal: IconDefinition;
export const faPollH: IconDefinition;
export const faCircle: IconDefinition;
export const faBackwardFast: IconDefinition;
export const faFastBackward: IconDefinition;
export const faRecycle: IconDefinition;
export const faUserAstronaut: IconDefinition;
export const faPlaneSlash: IconDefinition;
export const faTrademark: IconDefinition;
export const faBasketball: IconDefinition;
export const faBasketballBall: IconDefinition;
export const faSatelliteDish: IconDefinition;
export const faCircleUp: IconDefinition;
export const faArrowAltCircleUp: IconDefinition;
export const faMobileScreenButton: IconDefinition;
export const faMobileAlt: IconDefinition;
export const faVolumeHigh: IconDefinition;
export const faVolumeUp: IconDefinition;
export const faUsersRays: IconDefinition;
export const faWallet: IconDefinition;
export const faClipboardCheck: IconDefinition;
export const faFileAudio: IconDefinition;
export const faBurger: IconDefinition;
export const faHamburger: IconDefinition;
export const faWrench: IconDefinition;
export const faBugs: IconDefinition;
export const faRupeeSign: IconDefinition;
export const faRupee: IconDefinition;
export const faFileImage: IconDefinition;
export const faCircleQuestion: IconDefinition;
export const faQuestionCircle: IconDefinition;
export const faPlaneDeparture: IconDefinition;
export const faHandshakeSlash: IconDefinition;
export const faBookBookmark: IconDefinition;
export const faCodeBranch: IconDefinition;
export const faHatCowboy: IconDefinition;
export const faBridge: IconDefinition;
export const faPhoneFlip: IconDefinition;
export const faPhoneAlt: IconDefinition;
export const faTruckFront: IconDefinition;
export const faCat: IconDefinition;
export const faAnchorCircleExclamation: IconDefinition;
export const faTruckField: IconDefinition;
export const faRoute: IconDefinition;
export const faClipboardQuestion: IconDefinition;
export const faPanorama: IconDefinition;
export const faCommentMedical: IconDefinition;
export const faTeethOpen: IconDefinition;
export const faFileCircleMinus: IconDefinition;
export const faTags: IconDefinition;
export const faWineGlass: IconDefinition;
export const faForwardFast: IconDefinition;
export const faFastForward: IconDefinition;
export const faFaceMehBlank: IconDefinition;
export const faMehBlank: IconDefinition;
export const faSquareParking: IconDefinition;
export const faParking: IconDefinition;
export const faHouseSignal: IconDefinition;
export const faBarsProgress: IconDefinition;
export const faTasksAlt: IconDefinition;
export const faFaucetDrip: IconDefinition;
export const faCartFlatbed: IconDefinition;
export const faDollyFlatbed: IconDefinition;
export const faBanSmoking: IconDefinition;
export const faSmokingBan: IconDefinition;
export const faTerminal: IconDefinition;
export const faMobileButton: IconDefinition;
export const faHouseMedicalFlag: IconDefinition;
export const faBasketShopping: IconDefinition;
export const faShoppingBasket: IconDefinition;
export const faTape: IconDefinition;
export const faBusSimple: IconDefinition;
export const faBusAlt: IconDefinition;
export const faEye: IconDefinition;
export const faFaceSadCry: IconDefinition;
export const faSadCry: IconDefinition;
export const faAudioDescription: IconDefinition;
export const faPersonMilitaryToPerson: IconDefinition;
export const faFileShield: IconDefinition;
export const faUserSlash: IconDefinition;
export const faPen: IconDefinition;
export const faTowerObservation: IconDefinition;
export const faFileCode: IconDefinition;
export const faSignal: IconDefinition;
export const faSignal5: IconDefinition;
export const faSignalPerfect: IconDefinition;
export const faBus: IconDefinition;
export const faHeartCircleXmark: IconDefinition;
export const faHouseChimney: IconDefinition;
export const faHomeLg: IconDefinition;
export const faWindowMaximize: IconDefinition;
export const faFaceFrown: IconDefinition;
export const faFrown: IconDefinition;
export const faPrescription: IconDefinition;
export const faShop: IconDefinition;
export const faStoreAlt: IconDefinition;
export const faFloppyDisk: IconDefinition;
export const faSave: IconDefinition;
export const faVihara: IconDefinition;
export const faScaleUnbalanced: IconDefinition;
export const faBalanceScaleLeft: IconDefinition;
export const faSortUp: IconDefinition;
export const faSortAsc: IconDefinition;
export const faCommentDots: IconDefinition;
export const faCommenting: IconDefinition;
export const faPlantWilt: IconDefinition;
export const faDiamond: IconDefinition;
export const faFaceGrinSquint: IconDefinition;
export const faGrinSquint: IconDefinition;
export const faHandHoldingDollar: IconDefinition;
export const faHandHoldingUsd: IconDefinition;
export const faBacterium: IconDefinition;
export const faHandPointer: IconDefinition;
export const faDrumSteelpan: IconDefinition;
export const faHandScissors: IconDefinition;
export const faHandsPraying: IconDefinition;
export const faPrayingHands: IconDefinition;
export const faArrowRotateRight: IconDefinition;
export const faArrowRightRotate: IconDefinition;
export const faArrowRotateForward: IconDefinition;
export const faRedo: IconDefinition;
export const faWebAwesome: IconDefinition;
export const faBiohazard: IconDefinition;
export const faLocationCrosshairs: IconDefinition;
export const faLocation: IconDefinition;
export const faMarsDouble: IconDefinition;
export const faChildDress: IconDefinition;
export const faUsersBetweenLines: IconDefinition;
export const faLungsVirus: IconDefinition;
export const faFaceGrinTears: IconDefinition;
export const faGrinTears: IconDefinition;
export const faPhone: IconDefinition;
export const faCalendarXmark: IconDefinition;
export const faCalendarTimes: IconDefinition;
export const faChildReaching: IconDefinition;
export const faHeadSideVirus: IconDefinition;
export const faUserGear: IconDefinition;
export const faUserCog: IconDefinition;
export const faArrowUp19: IconDefinition;
export const faSortNumericUp: IconDefinition;
export const faDoorClosed: IconDefinition;
export const faShieldVirus: IconDefinition;
export const faDiceSix: IconDefinition;
export const faMosquitoNet: IconDefinition;
export const faBridgeWater: IconDefinition;
export const faPersonBooth: IconDefinition;
export const faTextWidth: IconDefinition;
export const faHatWizard: IconDefinition;
export const faPenFancy: IconDefinition;
export const faPersonDigging: IconDefinition;
export const faDigging: IconDefinition;
export const faTrash: IconDefinition;
export const faGaugeSimple: IconDefinition;
export const faGaugeSimpleMed: IconDefinition;
export const faTachometerAverage: IconDefinition;
export const faBookMedical: IconDefinition;
export const faPoo: IconDefinition;
export const faQuoteRight: IconDefinition;
export const faQuoteRightAlt: IconDefinition;
export const faShirt: IconDefinition;
export const faTShirt: IconDefinition;
export const faTshirt: IconDefinition;
export const faCubes: IconDefinition;
export const faDivide: IconDefinition;
export const faTengeSign: IconDefinition;
export const faTenge: IconDefinition;
export const faHeadphones: IconDefinition;
export const faHandsHolding: IconDefinition;
export const faHandsClapping: IconDefinition;
export const faRepublican: IconDefinition;
export const faArrowLeft: IconDefinition;
export const faPersonCircleXmark: IconDefinition;
export const faRuler: IconDefinition;
export const faAlignLeft: IconDefinition;
export const faDiceD6: IconDefinition;
export const faRestroom: IconDefinition;
export const faJ: IconDefinition;
export const faUsersViewfinder: IconDefinition;
export const faFileVideo: IconDefinition;
export const faUpRightFromSquare: IconDefinition;
export const faExternalLinkAlt: IconDefinition;
export const faTableCells: IconDefinition;
export const faTh: IconDefinition;
export const faFilePdf: IconDefinition;
export const faBookBible: IconDefinition;
export const faBible: IconDefinition;
export const faO: IconDefinition;
export const faSuitcaseMedical: IconDefinition;
export const faMedkit: IconDefinition;
export const faUserSecret: IconDefinition;
export const faOtter: IconDefinition;
export const faPersonDress: IconDefinition;
export const faFemale: IconDefinition;
export const faCommentDollar: IconDefinition;
export const faBusinessTime: IconDefinition;
export const faBriefcaseClock: IconDefinition;
export const faTableCellsLarge: IconDefinition;
export const faThLarge: IconDefinition;
export const faBookTanakh: IconDefinition;
export const faTanakh: IconDefinition;
export const faPhoneVolume: IconDefinition;
export const faVolumeControlPhone: IconDefinition;
export const faHatCowboySide: IconDefinition;
export const faClipboardUser: IconDefinition;
export const faChild: IconDefinition;
export const faLiraSign: IconDefinition;
export const faSatellite: IconDefinition;
export const faPlaneLock: IconDefinition;
export const faTag: IconDefinition;
export const faComment: IconDefinition;
export const faCakeCandles: IconDefinition;
export const faBirthdayCake: IconDefinition;
export const faCake: IconDefinition;
export const faEnvelope: IconDefinition;
export const faAnglesUp: IconDefinition;
export const faAngleDoubleUp: IconDefinition;
export const faPaperclip: IconDefinition;
export const faArrowRightToCity: IconDefinition;
export const faRibbon: IconDefinition;
export const faLungs: IconDefinition;
export const faArrowUp91: IconDefinition;
export const faSortNumericUpAlt: IconDefinition;
export const faLitecoinSign: IconDefinition;
export const faBorderNone: IconDefinition;
export const faCircleNodes: IconDefinition;
export const faParachuteBox: IconDefinition;
export const faIndent: IconDefinition;
export const faTruckFieldUn: IconDefinition;
export const faHourglass: IconDefinition;
export const faHourglassEmpty: IconDefinition;
export const faMountain: IconDefinition;
export const faUserDoctor: IconDefinition;
export const faUserMd: IconDefinition;
export const faCircleInfo: IconDefinition;
export const faInfoCircle: IconDefinition;
export const faCloudMeatball: IconDefinition;
export const faCamera: IconDefinition;
export const faCameraAlt: IconDefinition;
export const faSquareVirus: IconDefinition;
export const faMeteor: IconDefinition;
export const faCarOn: IconDefinition;
export const faSleigh: IconDefinition;
export const faArrowDown19: IconDefinition;
export const faSortNumericAsc: IconDefinition;
export const faSortNumericDown: IconDefinition;
export const faHandHoldingDroplet: IconDefinition;
export const faHandHoldingWater: IconDefinition;
export const faWater: IconDefinition;
export const faCalendarCheck: IconDefinition;
export const faBraille: IconDefinition;
export const faPrescriptionBottleMedical: IconDefinition;
export const faPrescriptionBottleAlt: IconDefinition;
export const faLandmark: IconDefinition;
export const faTruck: IconDefinition;
export const faCrosshairs: IconDefinition;
export const faPersonCane: IconDefinition;
export const faTent: IconDefinition;
export const faVestPatches: IconDefinition;
export const faCheckDouble: IconDefinition;
export const faArrowDownAZ: IconDefinition;
export const faSortAlphaAsc: IconDefinition;
export const faSortAlphaDown: IconDefinition;
export const faMoneyBillWheat: IconDefinition;
export const faCookie: IconDefinition;
export const faArrowRotateLeft: IconDefinition;
export const faArrowLeftRotate: IconDefinition;
export const faArrowRotateBack: IconDefinition;
export const faArrowRotateBackward: IconDefinition;
export const faUndo: IconDefinition;
export const faHardDrive: IconDefinition;
export const faHdd: IconDefinition;
export const faFaceGrinSquintTears: IconDefinition;
export const faGrinSquintTears: IconDefinition;
export const faDumbbell: IconDefinition;
export const faRectangleList: IconDefinition;
export const faListAlt: IconDefinition;
export const faTarpDroplet: IconDefinition;
export const faHouseMedicalCircleCheck: IconDefinition;
export const faPersonSkiingNordic: IconDefinition;
export const faSkiingNordic: IconDefinition;
export const faCalendarPlus: IconDefinition;
export const faPlaneArrival: IconDefinition;
export const faCircleLeft: IconDefinition;
export const faArrowAltCircleLeft: IconDefinition;
export const faTrainSubway: IconDefinition;
export const faSubway: IconDefinition;
export const faChartGantt: IconDefinition;
export const faIndianRupeeSign: IconDefinition;
export const faIndianRupee: IconDefinition;
export const faInr: IconDefinition;
export const faCropSimple: IconDefinition;
export const faCropAlt: IconDefinition;
export const faMoneyBill1: IconDefinition;
export const faMoneyBillAlt: IconDefinition;
export const faLeftLong: IconDefinition;
export const faLongArrowAltLeft: IconDefinition;
export const faDna: IconDefinition;
export const faVirusSlash: IconDefinition;
export const faMinus: IconDefinition;
export const faSubtract: IconDefinition;
export const faChess: IconDefinition;
export const faArrowLeftLong: IconDefinition;
export const faLongArrowLeft: IconDefinition;
export const faPlugCircleCheck: IconDefinition;
export const faStreetView: IconDefinition;
export const faFrancSign: IconDefinition;
export const faVolumeOff: IconDefinition;
export const faHandsAslInterpreting: IconDefinition;
export const faAmericanSignLanguageInterpreting: IconDefinition;
export const faAslInterpreting: IconDefinition;
export const faHandsAmericanSignLanguageInterpreting: IconDefinition;
export const faGear: IconDefinition;
export const faCog: IconDefinition;
export const faDropletSlash: IconDefinition;
export const faTintSlash: IconDefinition;
export const faMosque: IconDefinition;
export const faMosquito: IconDefinition;
export const faStarOfDavid: IconDefinition;
export const faPersonMilitaryRifle: IconDefinition;
export const faCartShopping: IconDefinition;
export const faShoppingCart: IconDefinition;
export const faVials: IconDefinition;
export const faPlugCirclePlus: IconDefinition;
export const faPlaceOfWorship: IconDefinition;
export const faGripVertical: IconDefinition;
export const faArrowTurnUp: IconDefinition;
export const faLevelUp: IconDefinition;
export const faU: IconDefinition;
export const faSquareRootVariable: IconDefinition;
export const faSquareRootAlt: IconDefinition;
export const faClock: IconDefinition;
export const faClockFour: IconDefinition;
export const faBackwardStep: IconDefinition;
export const faStepBackward: IconDefinition;
export const faPallet: IconDefinition;
export const faFaucet: IconDefinition;
export const faBaseballBatBall: IconDefinition;
export const faS: IconDefinition;
export const faTimeline: IconDefinition;
export const faKeyboard: IconDefinition;
export const faCaretDown: IconDefinition;
export const faHouseChimneyMedical: IconDefinition;
export const faClinicMedical: IconDefinition;
export const faTemperatureThreeQuarters: IconDefinition;
export const faTemperature3: IconDefinition;
export const faThermometer3: IconDefinition;
export const faThermometerThreeQuarters: IconDefinition;
export const faMobileScreen: IconDefinition;
export const faMobileAndroidAlt: IconDefinition;
export const faPlaneUp: IconDefinition;
export const faPiggyBank: IconDefinition;
export const faBatteryHalf: IconDefinition;
export const faBattery3: IconDefinition;
export const faMountainCity: IconDefinition;
export const faCoins: IconDefinition;
export const faKhanda: IconDefinition;
export const faSliders: IconDefinition;
export const faSlidersH: IconDefinition;
export const faFolderTree: IconDefinition;
export const faNetworkWired: IconDefinition;
export const faMapPin: IconDefinition;
export const faHamsa: IconDefinition;
export const faCentSign: IconDefinition;
export const faFlask: IconDefinition;
export const faPersonPregnant: IconDefinition;
export const faWandSparkles: IconDefinition;
export const faEllipsisVertical: IconDefinition;
export const faEllipsisV: IconDefinition;
export const faTicket: IconDefinition;
export const faPowerOff: IconDefinition;
export const faRightLong: IconDefinition;
export const faLongArrowAltRight: IconDefinition;
export const faFlagUsa: IconDefinition;
export const faLaptopFile: IconDefinition;
export const faTty: IconDefinition;
export const faTeletype: IconDefinition;
export const faDiagramNext: IconDefinition;
export const faPersonRifle: IconDefinition;
export const faHouseMedicalCircleExclamation: IconDefinition;
export const faClosedCaptioning: IconDefinition;
export const faPersonHiking: IconDefinition;
export const faHiking: IconDefinition;
export const faVenusDouble: IconDefinition;
export const faImages: IconDefinition;
export const faCalculator: IconDefinition;
export const faPeoplePulling: IconDefinition;
export const faN: IconDefinition;
export const faCableCar: IconDefinition;
export const faTram: IconDefinition;
export const faCloudRain: IconDefinition;
export const faBuildingCircleXmark: IconDefinition;
export const faShip: IconDefinition;
export const faArrowsDownToLine: IconDefinition;
export const faDownload: IconDefinition;
export const faFaceGrin: IconDefinition;
export const faGrin: IconDefinition;
export const faDeleteLeft: IconDefinition;
export const faBackspace: IconDefinition;
export const faEyeDropper: IconDefinition;
export const faEyeDropperEmpty: IconDefinition;
export const faEyedropper: IconDefinition;
export const faFileCircleCheck: IconDefinition;
export const faForward: IconDefinition;
export const faMobile: IconDefinition;
export const faMobileAndroid: IconDefinition;
export const faMobilePhone: IconDefinition;
export const faFaceMeh: IconDefinition;
export const faMeh: IconDefinition;
export const faAlignCenter: IconDefinition;
export const faBookSkull: IconDefinition;
export const faBookDead: IconDefinition;
export const faIdCard: IconDefinition;
export const faDriversLicense: IconDefinition;
export const faOutdent: IconDefinition;
export const faDedent: IconDefinition;
export const faHeartCircleExclamation: IconDefinition;
export const faHouse: IconDefinition;
export const faHome: IconDefinition;
export const faHomeAlt: IconDefinition;
export const faHomeLgAlt: IconDefinition;
export const faCalendarWeek: IconDefinition;
export const faLaptopMedical: IconDefinition;
export const faB: IconDefinition;
export const faFileMedical: IconDefinition;
export const faDiceOne: IconDefinition;
export const faKiwiBird: IconDefinition;
export const faArrowRightArrowLeft: IconDefinition;
export const faExchange: IconDefinition;
export const faRotateRight: IconDefinition;
export const faRedoAlt: IconDefinition;
export const faRotateForward: IconDefinition;
export const faUtensils: IconDefinition;
export const faCutlery: IconDefinition;
export const faArrowUpWideShort: IconDefinition;
export const faSortAmountUp: IconDefinition;
export const faMillSign: IconDefinition;
export const faBowlRice: IconDefinition;
export const faSkull: IconDefinition;
export const faTowerBroadcast: IconDefinition;
export const faBroadcastTower: IconDefinition;
export const faTruckPickup: IconDefinition;
export const faUpLong: IconDefinition;
export const faLongArrowAltUp: IconDefinition;
export const faStop: IconDefinition;
export const faCodeMerge: IconDefinition;
export const faUpload: IconDefinition;
export const faHurricane: IconDefinition;
export const faMound: IconDefinition;
export const faToiletPortable: IconDefinition;
export const faCompactDisc: IconDefinition;
export const faFileArrowDown: IconDefinition;
export const faFileDownload: IconDefinition;
export const faCaravan: IconDefinition;
export const faShieldCat: IconDefinition;
export const faBolt: IconDefinition;
export const faZap: IconDefinition;
export const faGlassWater: IconDefinition;
export const faOilWell: IconDefinition;
export const faVault: IconDefinition;
export const faMars: IconDefinition;
export const faToilet: IconDefinition;
export const faPlaneCircleXmark: IconDefinition;
export const faYenSign: IconDefinition;
export const faCny: IconDefinition;
export const faJpy: IconDefinition;
export const faRmb: IconDefinition;
export const faYen: IconDefinition;
export const faRubleSign: IconDefinition;
export const faRouble: IconDefinition;
export const faRub: IconDefinition;
export const faRuble: IconDefinition;
export const faSun: IconDefinition;
export const faGuitar: IconDefinition;
export const faFaceLaughWink: IconDefinition;
export const faLaughWink: IconDefinition;
export const faHorseHead: IconDefinition;
export const faBoreHole: IconDefinition;
export const faIndustry: IconDefinition;
export const faCircleDown: IconDefinition;
export const faArrowAltCircleDown: IconDefinition;
export const faArrowsTurnToDots: IconDefinition;
export const faFlorinSign: IconDefinition;
export const faArrowDownShortWide: IconDefinition;
export const faSortAmountDesc: IconDefinition;
export const faSortAmountDownAlt: IconDefinition;
export const faLessThan: IconDefinition;
export const faAngleDown: IconDefinition;
export const faCarTunnel: IconDefinition;
export const faHeadSideCough: IconDefinition;
export const faGripLines: IconDefinition;
export const faThumbsDown: IconDefinition;
export const faUserLock: IconDefinition;
export const faArrowRightLong: IconDefinition;
export const faLongArrowRight: IconDefinition;
export const faAnchorCircleXmark: IconDefinition;
export const faEllipsis: IconDefinition;
export const faEllipsisH: IconDefinition;
export const faChessPawn: IconDefinition;
export const faKitMedical: IconDefinition;
export const faFirstAid: IconDefinition;
export const faPersonThroughWindow: IconDefinition;
export const faToolbox: IconDefinition;
export const faHandsHoldingCircle: IconDefinition;
export const faBug: IconDefinition;
export const faCreditCard: IconDefinition;
export const faCreditCardAlt: IconDefinition;
export const faCar: IconDefinition;
export const faAutomobile: IconDefinition;
export const faHandHoldingHand: IconDefinition;
export const faBookOpenReader: IconDefinition;
export const faBookReader: IconDefinition;
export const faMountainSun: IconDefinition;
export const faArrowsLeftRightToLine: IconDefinition;
export const faDiceD20: IconDefinition;
export const faTruckDroplet: IconDefinition;
export const faFileCircleXmark: IconDefinition;
export const faTemperatureArrowUp: IconDefinition;
export const faTemperatureUp: IconDefinition;
export const faMedal: IconDefinition;
export const faBed: IconDefinition;
export const faSquareH: IconDefinition;
export const faHSquare: IconDefinition;
export const faPodcast: IconDefinition;
export const faTemperatureFull: IconDefinition;
export const faTemperature4: IconDefinition;
export const faThermometer4: IconDefinition;
export const faThermometerFull: IconDefinition;
export const faBell: IconDefinition;
export const faSuperscript: IconDefinition;
export const faPlugCircleXmark: IconDefinition;
export const faStarOfLife: IconDefinition;
export const faPhoneSlash: IconDefinition;
export const faPaintRoller: IconDefinition;
export const faHandshakeAngle: IconDefinition;
export const faHandsHelping: IconDefinition;
export const faLocationDot: IconDefinition;
export const faMapMarkerAlt: IconDefinition;
export const faFile: IconDefinition;
export const faGreaterThan: IconDefinition;
export const faPersonSwimming: IconDefinition;
export const faSwimmer: IconDefinition;
export const faArrowDown: IconDefinition;
export const faDroplet: IconDefinition;
export const faTint: IconDefinition;
export const faEraser: IconDefinition;
export const faEarthAmericas: IconDefinition;
export const faEarth: IconDefinition;
export const faEarthAmerica: IconDefinition;
export const faGlobeAmericas: IconDefinition;
export const faPersonBurst: IconDefinition;
export const faDove: IconDefinition;
export const faBatteryEmpty: IconDefinition;
export const faBattery0: IconDefinition;
export const faSocks: IconDefinition;
export const faInbox: IconDefinition;
export const faSection: IconDefinition;
export const faGaugeHigh: IconDefinition;
export const faTachometerAlt: IconDefinition;
export const faTachometerAltFast: IconDefinition;
export const faEnvelopeOpenText: IconDefinition;
export const faHospital: IconDefinition;
export const faHospitalAlt: IconDefinition;
export const faHospitalWide: IconDefinition;
export const faWineBottle: IconDefinition;
export const faChessRook: IconDefinition;
export const faBarsStaggered: IconDefinition;
export const faReorder: IconDefinition;
export const faStream: IconDefinition;
export const faDharmachakra: IconDefinition;
export const faHotdog: IconDefinition;
export const faPersonWalkingWithCane: IconDefinition;
export const faBlind: IconDefinition;
export const faDrum: IconDefinition;
export const faIceCream: IconDefinition;
export const faHeartCircleBolt: IconDefinition;
export const faFax: IconDefinition;
export const faParagraph: IconDefinition;
export const faCheckToSlot: IconDefinition;
export const faVoteYea: IconDefinition;
export const faStarHalf: IconDefinition;
export const faBoxesStacked: IconDefinition;
export const faBoxes: IconDefinition;
export const faBoxesAlt: IconDefinition;
export const faLink: IconDefinition;
export const faChain: IconDefinition;
export const faEarListen: IconDefinition;
export const faAssistiveListeningSystems: IconDefinition;
export const faTreeCity: IconDefinition;
export const faPlay: IconDefinition;
export const faFont: IconDefinition;
export const faTableCellsRowLock: IconDefinition;
export const faRupiahSign: IconDefinition;
export const faMagnifyingGlass: IconDefinition;
export const faSearch: IconDefinition;
export const faTableTennisPaddleBall: IconDefinition;
export const faPingPongPaddleBall: IconDefinition;
export const faTableTennis: IconDefinition;
export const faPersonDotsFromLine: IconDefinition;
export const faDiagnoses: IconDefinition;
export const faTrashCanArrowUp: IconDefinition;
export const faTrashRestoreAlt: IconDefinition;
export const faNairaSign: IconDefinition;
export const faCartArrowDown: IconDefinition;
export const faWalkieTalkie: IconDefinition;
export const faFilePen: IconDefinition;
export const faFileEdit: IconDefinition;
export const faReceipt: IconDefinition;
export const faSquarePen: IconDefinition;
export const faPenSquare: IconDefinition;
export const faPencilSquare: IconDefinition;
export const faSuitcaseRolling: IconDefinition;
export const faPersonCircleExclamation: IconDefinition;
export const faChevronDown: IconDefinition;
export const faBatteryFull: IconDefinition;
export const faBattery: IconDefinition;
export const faBattery5: IconDefinition;
export const faSkullCrossbones: IconDefinition;
export const faCodeCompare: IconDefinition;
export const faListUl: IconDefinition;
export const faListDots: IconDefinition;
export const faSchoolLock: IconDefinition;
export const faTowerCell: IconDefinition;
export const faDownLong: IconDefinition;
export const faLongArrowAltDown: IconDefinition;
export const faRankingStar: IconDefinition;
export const faChessKing: IconDefinition;
export const faPersonHarassing: IconDefinition;
export const faBrazilianRealSign: IconDefinition;
export const faLandmarkDome: IconDefinition;
export const faLandmarkAlt: IconDefinition;
export const faArrowUp: IconDefinition;
export const faTv: IconDefinition;
export const faTelevision: IconDefinition;
export const faTvAlt: IconDefinition;
export const faShrimp: IconDefinition;
export const faListCheck: IconDefinition;
export const faTasks: IconDefinition;
export const faJugDetergent: IconDefinition;
export const faCircleUser: IconDefinition;
export const faUserCircle: IconDefinition;
export const faUserShield: IconDefinition;
export const faWind: IconDefinition;
export const faCarBurst: IconDefinition;
export const faCarCrash: IconDefinition;
export const faY: IconDefinition;
export const faPersonSnowboarding: IconDefinition;
export const faSnowboarding: IconDefinition;
export const faTruckFast: IconDefinition;
export const faShippingFast: IconDefinition;
export const faFish: IconDefinition;
export const faUserGraduate: IconDefinition;
export const faCircleHalfStroke: IconDefinition;
export const faAdjust: IconDefinition;
export const faClapperboard: IconDefinition;
export const faCircleRadiation: IconDefinition;
export const faRadiationAlt: IconDefinition;
export const faBaseball: IconDefinition;
export const faBaseballBall: IconDefinition;
export const faJetFighterUp: IconDefinition;
export const faDiagramProject: IconDefinition;
export const faProjectDiagram: IconDefinition;
export const faCopy: IconDefinition;
export const faVolumeXmark: IconDefinition;
export const faVolumeMute: IconDefinition;
export const faVolumeTimes: IconDefinition;
export const faHandSparkles: IconDefinition;
export const faGrip: IconDefinition;
export const faGripHorizontal: IconDefinition;
export const faShareFromSquare: IconDefinition;
export const faShareSquare: IconDefinition;
export const faChildCombatant: IconDefinition;
export const faChildRifle: IconDefinition;
export const faGun: IconDefinition;
export const faSquarePhone: IconDefinition;
export const faPhoneSquare: IconDefinition;
export const faPlus: IconDefinition;
export const faAdd: IconDefinition;
export const faExpand: IconDefinition;
export const faComputer: IconDefinition;
export const faXmark: IconDefinition;
export const faClose: IconDefinition;
export const faMultiply: IconDefinition;
export const faRemove: IconDefinition;
export const faTimes: IconDefinition;
export const faArrowsUpDownLeftRight: IconDefinition;
export const faArrows: IconDefinition;
export const faChalkboardUser: IconDefinition;
export const faChalkboardTeacher: IconDefinition;
export const faPesoSign: IconDefinition;
export const faBuildingShield: IconDefinition;
export const faBaby: IconDefinition;
export const faUsersLine: IconDefinition;
export const faQuoteLeft: IconDefinition;
export const faQuoteLeftAlt: IconDefinition;
export const faTractor: IconDefinition;
export const faTrashArrowUp: IconDefinition;
export const faTrashRestore: IconDefinition;
export const faArrowDownUpLock: IconDefinition;
export const faLinesLeaning: IconDefinition;
export const faRulerCombined: IconDefinition;
export const faCopyright: IconDefinition;
export const faEquals: IconDefinition;
export const faBlender: IconDefinition;
export const faTeeth: IconDefinition;
export const faShekelSign: IconDefinition;
export const faIls: IconDefinition;
export const faShekel: IconDefinition;
export const faSheqel: IconDefinition;
export const faSheqelSign: IconDefinition;
export const faMap: IconDefinition;
export const faRocket: IconDefinition;
export const faPhotoFilm: IconDefinition;
export const faPhotoVideo: IconDefinition;
export const faFolderMinus: IconDefinition;
export const faStore: IconDefinition;
export const faArrowTrendUp: IconDefinition;
export const faPlugCircleMinus: IconDefinition;
export const faSignHanging: IconDefinition;
export const faSign: IconDefinition;
export const faBezierCurve: IconDefinition;
export const faBellSlash: IconDefinition;
export const faTablet: IconDefinition;
export const faTabletAndroid: IconDefinition;
export const faSchoolFlag: IconDefinition;
export const faFill: IconDefinition;
export const faAngleUp: IconDefinition;
export const faDrumstickBite: IconDefinition;
export const faHollyBerry: IconDefinition;
export const faChevronLeft: IconDefinition;
export const faBacteria: IconDefinition;
export const faHandLizard: IconDefinition;
export const faNotdef: IconDefinition;
export const faDisease: IconDefinition;
export const faBriefcaseMedical: IconDefinition;
export const faGenderless: IconDefinition;
export const faChevronRight: IconDefinition;
export const faRetweet: IconDefinition;
export const faCarRear: IconDefinition;
export const faCarAlt: IconDefinition;
export const faPumpSoap: IconDefinition;
export const faVideoSlash: IconDefinition;
export const faBatteryQuarter: IconDefinition;
export const faBattery2: IconDefinition;
export const faRadio: IconDefinition;
export const faBabyCarriage: IconDefinition;
export const faCarriageBaby: IconDefinition;
export const faTrafficLight: IconDefinition;
export const faThermometer: IconDefinition;
export const faVrCardboard: IconDefinition;
export const faHandMiddleFinger: IconDefinition;
export const faPercent: IconDefinition;
export const faPercentage: IconDefinition;
export const faTruckMoving: IconDefinition;
export const faGlassWaterDroplet: IconDefinition;
export const faDisplay: IconDefinition;
export const faFaceSmile: IconDefinition;
export const faSmile: IconDefinition;
export const faThumbtack: IconDefinition;
export const faThumbTack: IconDefinition;
export const faTrophy: IconDefinition;
export const faPersonPraying: IconDefinition;
export const faPray: IconDefinition;
export const faHammer: IconDefinition;
export const faHandPeace: IconDefinition;
export const faRotate: IconDefinition;
export const faSyncAlt: IconDefinition;
export const faSpinner: IconDefinition;
export const faRobot: IconDefinition;
export const faPeace: IconDefinition;
export const faGears: IconDefinition;
export const faCogs: IconDefinition;
export const faWarehouse: IconDefinition;
export const faArrowUpRightDots: IconDefinition;
export const faSplotch: IconDefinition;
export const faFaceGrinHearts: IconDefinition;
export const faGrinHearts: IconDefinition;
export const faDiceFour: IconDefinition;
export const faSimCard: IconDefinition;
export const faTransgender: IconDefinition;
export const faTransgenderAlt: IconDefinition;
export const faMercury: IconDefinition;
export const faArrowTurnDown: IconDefinition;
export const faLevelDown: IconDefinition;
export const faPersonFallingBurst: IconDefinition;
export const faAward: IconDefinition;
export const faTicketSimple: IconDefinition;
export const faTicketAlt: IconDefinition;
export const faBuilding: IconDefinition;
export const faAnglesLeft: IconDefinition;
export const faAngleDoubleLeft: IconDefinition;
export const faQrcode: IconDefinition;
export const faClockRotateLeft: IconDefinition;
export const faHistory: IconDefinition;
export const faFaceGrinBeamSweat: IconDefinition;
export const faGrinBeamSweat: IconDefinition;
export const faFileExport: IconDefinition;
export const faArrowRightFromFile: IconDefinition;
export const faShield: IconDefinition;
export const faShieldBlank: IconDefinition;
export const faArrowUpShortWide: IconDefinition;
export const faSortAmountUpAlt: IconDefinition;
export const faHouseMedical: IconDefinition;
export const faGolfBallTee: IconDefinition;
export const faGolfBall: IconDefinition;
export const faCircleChevronLeft: IconDefinition;
export const faChevronCircleLeft: IconDefinition;
export const faHouseChimneyWindow: IconDefinition;
export const faPenNib: IconDefinition;
export const faTentArrowTurnLeft: IconDefinition;
export const faTents: IconDefinition;
export const faWandMagic: IconDefinition;
export const faMagic: IconDefinition;
export const faDog: IconDefinition;
export const faCarrot: IconDefinition;
export const faMoon: IconDefinition;
export const faWineGlassEmpty: IconDefinition;
export const faWineGlassAlt: IconDefinition;
export const faCheese: IconDefinition;
export const faYinYang: IconDefinition;
export const faMusic: IconDefinition;
export const faCodeCommit: IconDefinition;
export const faTemperatureLow: IconDefinition;
export const faPersonBiking: IconDefinition;
export const faBiking: IconDefinition;
export const faBroom: IconDefinition;
export const faShieldHeart: IconDefinition;
export const faGopuram: IconDefinition;
export const faEarthOceania: IconDefinition;
export const faGlobeOceania: IconDefinition;
export const faSquareXmark: IconDefinition;
export const faTimesSquare: IconDefinition;
export const faXmarkSquare: IconDefinition;
export const faHashtag: IconDefinition;
export const faUpRightAndDownLeftFromCenter: IconDefinition;
export const faExpandAlt: IconDefinition;
export const faOilCan: IconDefinition;
export const faT: IconDefinition;
export const faHippo: IconDefinition;
export const faChartColumn: IconDefinition;
export const faInfinity: IconDefinition;
export const faVialCircleCheck: IconDefinition;
export const faPersonArrowDownToLine: IconDefinition;
export const faVoicemail: IconDefinition;
export const faFan: IconDefinition;
export const faPersonWalkingLuggage: IconDefinition;
export const faUpDown: IconDefinition;
export const faArrowsAltV: IconDefinition;
export const faCloudMoonRain: IconDefinition;
export const faCalendar: IconDefinition;
export const faTrailer: IconDefinition;
export const faBahai: IconDefinition;
export const faHaykal: IconDefinition;
export const faSdCard: IconDefinition;
export const faDragon: IconDefinition;
export const faShoePrints: IconDefinition;
export const faCirclePlus: IconDefinition;
export const faPlusCircle: IconDefinition;
export const faFaceGrinTongueWink: IconDefinition;
export const faGrinTongueWink: IconDefinition;
export const faHandHolding: IconDefinition;
export const faPlugCircleExclamation: IconDefinition;
export const faLinkSlash: IconDefinition;
export const faChainBroken: IconDefinition;
export const faChainSlash: IconDefinition;
export const faUnlink: IconDefinition;
export const faClone: IconDefinition;
export const faPersonWalkingArrowLoopLeft: IconDefinition;
export const faArrowUpZA: IconDefinition;
export const faSortAlphaUpAlt: IconDefinition;
export const faFireFlameCurved: IconDefinition;
export const faFireAlt: IconDefinition;
export const faTornado: IconDefinition;
export const faFileCirclePlus: IconDefinition;
export const faBookQuran: IconDefinition;
export const faQuran: IconDefinition;
export const faAnchor: IconDefinition;
export const faBorderAll: IconDefinition;
export const faFaceAngry: IconDefinition;
export const faAngry: IconDefinition;
export const faCookieBite: IconDefinition;
export const faArrowTrendDown: IconDefinition;
export const faRss: IconDefinition;
export const faFeed: IconDefinition;
export const faDrawPolygon: IconDefinition;
export const faScaleBalanced: IconDefinition;
export const faBalanceScale: IconDefinition;
export const faGaugeSimpleHigh: IconDefinition;
export const faTachometer: IconDefinition;
export const faTachometerFast: IconDefinition;
export const faShower: IconDefinition;
export const faDesktop: IconDefinition;
export const faDesktopAlt: IconDefinition;
export const faM: IconDefinition;
export const faTableList: IconDefinition;
export const faThList: IconDefinition;
export const faCommentSms: IconDefinition;
export const faSms: IconDefinition;
export const faBook: IconDefinition;
export const faUserPlus: IconDefinition;
export const faCheck: IconDefinition;
export const faBatteryThreeQuarters: IconDefinition;
export const faBattery4: IconDefinition;
export const faHouseCircleCheck: IconDefinition;
export const faAngleLeft: IconDefinition;
export const faDiagramSuccessor: IconDefinition;
export const faTruckArrowRight: IconDefinition;
export const faArrowsSplitUpAndLeft: IconDefinition;
export const faHandFist: IconDefinition;
export const faFistRaised: IconDefinition;
export const faCloudMoon: IconDefinition;
export const faBriefcase: IconDefinition;
export const faPersonFalling: IconDefinition;
export const faImagePortrait: IconDefinition;
export const faPortrait: IconDefinition;
export const faUserTag: IconDefinition;
export const faRug: IconDefinition;
export const faEarthEurope: IconDefinition;
export const faGlobeEurope: IconDefinition;
export const faCartFlatbedSuitcase: IconDefinition;
export const faLuggageCart: IconDefinition;
export const faRectangleXmark: IconDefinition;
export const faRectangleTimes: IconDefinition;
export const faTimesRectangle: IconDefinition;
export const faWindowClose: IconDefinition;
export const faBahtSign: IconDefinition;
export const faBookOpen: IconDefinition;
export const faBookJournalWhills: IconDefinition;
export const faJournalWhills: IconDefinition;
export const faHandcuffs: IconDefinition;
export const faTriangleExclamation: IconDefinition;
export const faExclamationTriangle: IconDefinition;
export const faWarning: IconDefinition;
export const faDatabase: IconDefinition;
export const faShare: IconDefinition;
export const faMailForward: IconDefinition;
export const faBottleDroplet: IconDefinition;
export const faMaskFace: IconDefinition;
export const faHillRockslide: IconDefinition;
export const faRightLeft: IconDefinition;
export const faExchangeAlt: IconDefinition;
export const faPaperPlane: IconDefinition;
export const faRoadCircleExclamation: IconDefinition;
export const faDungeon: IconDefinition;
export const faAlignRight: IconDefinition;
export const faMoneyBill1Wave: IconDefinition;
export const faMoneyBillWaveAlt: IconDefinition;
export const faLifeRing: IconDefinition;
export const faHands: IconDefinition;
export const faSignLanguage: IconDefinition;
export const faSigning: IconDefinition;
export const faCalendarDay: IconDefinition;
export const faWaterLadder: IconDefinition;
export const faLadderWater: IconDefinition;
export const faSwimmingPool: IconDefinition;
export const faArrowsUpDown: IconDefinition;
export const faArrowsV: IconDefinition;
export const faFaceGrimace: IconDefinition;
export const faGrimace: IconDefinition;
export const faWheelchairMove: IconDefinition;
export const faWheelchairAlt: IconDefinition;
export const faTurnDown: IconDefinition;
export const faLevelDownAlt: IconDefinition;
export const faPersonWalkingArrowRight: IconDefinition;
export const faSquareEnvelope: IconDefinition;
export const faEnvelopeSquare: IconDefinition;
export const faDice: IconDefinition;
export const faBowlingBall: IconDefinition;
export const faBrain: IconDefinition;
export const faBandage: IconDefinition;
export const faBandAid: IconDefinition;
export const faCalendarMinus: IconDefinition;
export const faCircleXmark: IconDefinition;
export const faTimesCircle: IconDefinition;
export const faXmarkCircle: IconDefinition;
export const faGifts: IconDefinition;
export const faHotel: IconDefinition;
export const faEarthAsia: IconDefinition;
export const faGlobeAsia: IconDefinition;
export const faIdCardClip: IconDefinition;
export const faIdCardAlt: IconDefinition;
export const faMagnifyingGlassPlus: IconDefinition;
export const faSearchPlus: IconDefinition;
export const faThumbsUp: IconDefinition;
export const faUserClock: IconDefinition;
export const faHandDots: IconDefinition;
export const faAllergies: IconDefinition;
export const faFileInvoice: IconDefinition;
export const faWindowMinimize: IconDefinition;
export const faMugSaucer: IconDefinition;
export const faCoffee: IconDefinition;
export const faBrush: IconDefinition;
export const faMask: IconDefinition;
export const faMagnifyingGlassMinus: IconDefinition;
export const faSearchMinus: IconDefinition;
export const faRulerVertical: IconDefinition;
export const faUserLarge: IconDefinition;
export const faUserAlt: IconDefinition;
export const faTrainTram: IconDefinition;
export const faUserNurse: IconDefinition;
export const faSyringe: IconDefinition;
export const faCloudSun: IconDefinition;
export const faStopwatch20: IconDefinition;
export const faSquareFull: IconDefinition;
export const faMagnet: IconDefinition;
export const faJar: IconDefinition;
export const faNoteSticky: IconDefinition;
export const faStickyNote: IconDefinition;
export const faBugSlash: IconDefinition;
export const faArrowUpFromWaterPump: IconDefinition;
export const faBone: IconDefinition;
export const faTableCellsRowUnlock: IconDefinition;
export const faUserInjured: IconDefinition;
export const faFaceSadTear: IconDefinition;
export const faSadTear: IconDefinition;
export const faPlane: IconDefinition;
export const faTentArrowsDown: IconDefinition;
export const faExclamation: IconDefinition;
export const faArrowsSpin: IconDefinition;
export const faPrint: IconDefinition;
export const faTurkishLiraSign: IconDefinition;
export const faTry: IconDefinition;
export const faTurkishLira: IconDefinition;
export const faDollarSign: IconDefinition;
export const faDollar: IconDefinition;
export const faUsd: IconDefinition;
export const faX: IconDefinition;
export const faMagnifyingGlassDollar: IconDefinition;
export const faSearchDollar: IconDefinition;
export const faUsersGear: IconDefinition;
export const faUsersCog: IconDefinition;
export const faPersonMilitaryPointing: IconDefinition;
export const faBuildingColumns: IconDefinition;
export const faBank: IconDefinition;
export const faInstitution: IconDefinition;
export const faMuseum: IconDefinition;
export const faUniversity: IconDefinition;
export const faUmbrella: IconDefinition;
export const faTrowel: IconDefinition;
export const faD: IconDefinition;
export const faStapler: IconDefinition;
export const faMasksTheater: IconDefinition;
export const faTheaterMasks: IconDefinition;
export const faKipSign: IconDefinition;
export const faHandPointLeft: IconDefinition;
export const faHandshakeSimple: IconDefinition;
export const faHandshakeAlt: IconDefinition;
export const faJetFighter: IconDefinition;
export const faFighterJet: IconDefinition;
export const faSquareShareNodes: IconDefinition;
export const faShareAltSquare: IconDefinition;
export const faBarcode: IconDefinition;
export const faPlusMinus: IconDefinition;
export const faVideo: IconDefinition;
export const faVideoCamera: IconDefinition;
export const faGraduationCap: IconDefinition;
export const faMortarBoard: IconDefinition;
export const faHandHoldingMedical: IconDefinition;
export const faPersonCircleCheck: IconDefinition;
export const faTurnUp: IconDefinition;
export const faLevelUpAlt: IconDefinition;
import { IconDefinition, IconLookup, IconName, IconPrefix, IconPack } from '@fortawesome/fontawesome-common-types';
export { IconDefinition, IconLookup, IconName, IconPrefix, IconPack } from '@fortawesome/fontawesome-common-types';
export const prefix: IconPrefix;
export const fas: IconPack;/// <reference types="react" />
import { CSSProperties, SVGAttributes, RefAttributes } from 'react'
import {
  Transform,
  IconProp,
  FlipProp,
  SizeProp,
  PullProp,
  RotateProp,
  FaSymbol
} from '@fortawesome/fontawesome-svg-core'

export function FontAwesomeIcon(props: FontAwesomeIconProps): JSX.Element

/**
 * @deprecated use FontAwesomeIconProps
 */
export type Props = FontAwesomeIconProps

// This is identical to the version of Omit in Typescript 3.5. It is included for compatibility with older versions of Typescript.
type BackwardCompatibleOmit<T, K extends keyof any> = Pick<T, Exclude<keyof T, K>>;

export interface FontAwesomeIconProps extends BackwardCompatibleOmit<SVGAttributes<SVGSVGElement>, 'children' | 'mask' | 'transform'>, RefAttributes<SVGSVGElement> {
  icon: IconProp
  mask?: IconProp
  maskId?: string
  className?: string
  color?: string
  spin?: boolean
  spinPulse?: boolean
  spinReverse?: boolean
  pulse?: boolean
  beat?: boolean
  fade?: boolean
  beatFade?: boolean
  bounce?: boolean
  shake?: boolean
  border?: boolean
  fixedWidth?: boolean
  inverse?: boolean
  listItem?: boolean
  flip?: FlipProp
  size?: SizeProp
  pull?: PullProp
  rotation?: RotateProp
  transform?: string | Transform
  symbol?: FaSymbol
  style?: CSSProperties
  tabIndex?: number;
  title?: string;
  titleId?: string;
  swapOpacity?: boolean;
}
/**
 * @fileoverview Common error classes
 * @author Nicholas C. Zakas
 */
/**
 * Error thrown when a file or directory is not found.
 */
export class NotFoundError extends Error {
    /**
     * Creates a new instance.
     * @param {string} message The error message.
     */
    constructor(message: string);
    /**
     * Error code.
     * @type {string}
     */
    code: string;
}
/**
 * Error thrown when an operation is not permitted.
 */
export class PermissionError extends Error {
    /**
     * Creates a new instance.
     * @param {string} message The error message.
     */
    constructor(message: string);
    /**
     * Error code.
     * @type {string}
     */
    code: string;
}
/**
 * Error thrown when an operation is not allowed on a directory.
 */
export class DirectoryError extends Error {
    /**
     * Creates a new instance.
     * @param {string} message The error message.
     */
    constructor(message: string);
    /**
     * Error code.
     * @type {string}
     */
    code: string;
}
/**
 * Error thrown when a directory is not empty.
 */
export class NotEmptyError extends Error {
    /**
     * Creates a new instance.
     * @param {string} message The error message.
     */
    constructor(message: string);
    /**
     * Error code.
     * @type {string}
     */
    code: string;
}
/**
 * @fileoverview The main file for the hfs package.
 * @author Nicholas C. Zakas
 */
/** @typedef{import("@humanfs/types").HfsImpl} HfsImpl */
/** @typedef{import("@humanfs/types").HfsDirectoryEntry} HfsDirectoryEntry */
/**
 * Error to represent when a method is missing on an impl.
 */
export class NoSuchMethodError extends Error {
    /**
     * Creates a new instance.
     * @param {string} methodName The name of the method that was missing.
     */
    constructor(methodName: string);
}
/**
 * Error to represent when an impl is already set.
 */
export class ImplAlreadySetError extends Error {
    /**
     * Creates a new instance.
     */
    constructor();
}
/**
 * A class representing a log entry.
 */
export class LogEntry {
    /**
     * Creates a new instance.
     * @param {string} type The type of log entry.
     * @param {any} [data] The data associated with the log entry.
     */
    constructor(type: string, data?: any);
    /**
     * The time at which the log entry was created.
     * @type {number}
     */
    timestamp: number;
    methodName: string;
    data: any;
    #private;
}
/**
 * A class representing a file system utility library.
 * @implements {HfsImpl}
 */
export class Hfs implements HfsImpl {
    /**
     * Creates a new instance.
     * @param {object} options The options for the instance.
     * @param {HfsImpl} options.impl The implementation to use.
     */
    constructor({ impl }: {
        impl: HfsImpl;
    });
    /**
     * Starts a new log with the given name.
     * @param {string} name The name of the log to start;
     * @returns {void}
     * @throws {Error} When the log already exists.
     * @throws {TypeError} When the name is not a non-empty string.
     */
    logStart(name: string): void;
    /**
     * Ends a log with the given name and returns the entries.
     * @param {string} name The name of the log to end.
     * @returns {Array<LogEntry>} The entries in the log.
     * @throws {Error} When the log does not exist.
     */
    logEnd(name: string): Array<LogEntry>;
    /**
     * Determines if the current implementation is the base implementation.
     * @returns {boolean} True if the current implementation is the base implementation.
     */
    isBaseImpl(): boolean;
    /**
     * Sets the implementation for this instance.
     * @param {object} impl The implementation to use.
     * @returns {void}
     */
    setImpl(impl: object): void;
    /**
     * Resets the implementation for this instance back to its original.
     * @returns {void}
     */
    resetImpl(): void;
    /**
     * Reads the given file and returns the contents as text. Assumes UTF-8 encoding.
     * @param {string} filePath The file to read.
     * @returns {Promise<string|undefined>} The contents of the file.
     * @throws {NoSuchMethodError} When the method does not exist on the current implementation.
     * @throws {TypeError} When the file path is not a non-empty string.
     */
    text(filePath: string): Promise<string | undefined>;
    /**
     * Reads the given file and returns the contents as JSON. Assumes UTF-8 encoding.
     * @param {string} filePath The file to read.
     * @returns {Promise<any|undefined>} The contents of the file as JSON.
     * @throws {NoSuchMethodError} When the method does not exist on the current implementation.
     * @throws {SyntaxError} When the file contents are not valid JSON.
     * @throws {TypeError} When the file path is not a non-empty string.
     */
    json(filePath: string): Promise<any | undefined>;
    /**
     * Reads the given file and returns the contents as an ArrayBuffer.
     * @param {string} filePath The file to read.
     * @returns {Promise<ArrayBuffer|undefined>} The contents of the file as an ArrayBuffer.
     * @throws {NoSuchMethodError} When the method does not exist on the current implementation.
     * @throws {TypeError} When the file path is not a non-empty string.
     * @deprecated Use bytes() instead.
     */
    arrayBuffer(filePath: string): Promise<ArrayBuffer | undefined>;
    /**
     * Reads the given file and returns the contents as an Uint8Array.
     * @param {string} filePath The file to read.
     * @returns {Promise<Uint8Array|undefined>} The contents of the file as an Uint8Array.
     * @throws {NoSuchMethodError} When the method does not exist on the current implementation.
     * @throws {TypeError} When the file path is not a non-empty string.
     */
    bytes(filePath: string): Promise<Uint8Array | undefined>;
    /**
     * Writes the given data to the given file. Creates any necessary directories along the way.
     * If the data is a string, UTF-8 encoding is used.
     * @param {string} filePath The file to write.
     * @param {any} contents The data to write.
     * @returns {Promise<void>} A promise that resolves when the file is written.
     * @throws {NoSuchMethodError} When the method does not exist on the current implementation.
     * @throws {TypeError} When the file path is not a non-empty string.
     */
    write(filePath: string, contents: any): Promise<void>;
    /**
     * Determines if the given file exists.
     * @param {string} filePath The file to check.
     * @returns {Promise<boolean>} True if the file exists.
     * @throws {NoSuchMethodError} When the method does not exist on the current implementation.
     * @throws {TypeError} When the file path is not a non-empty string.
     */
    isFile(filePath: string): Promise<boolean>;
    /**
     * Determines if the given directory exists.
     * @param {string} dirPath The directory to check.
     * @returns {Promise<boolean>} True if the directory exists.
     * @throws {NoSuchMethodError} When the method does not exist on the current implementation.
     * @throws {TypeError} When the directory path is not a non-empty string.
     */
    isDirectory(dirPath: string): Promise<boolean>;
    /**
     * Creates the given directory.
     * @param {string} dirPath The directory to create.
     * @returns {Promise<void>} A promise that resolves when the directory is created.
     * @throws {NoSuchMethodError} When the method does not exist on the current implementation.
     * @throws {TypeError} When the directory path is not a non-empty string.
     */
    createDirectory(dirPath: string): Promise<void>;
    /**
     * Deletes the given file.
     * @param {string} filePath The file to delete.
     * @returns {Promise<void>} A promise that resolves when the file is deleted.
     * @throws {NoSuchMethodError} When the method does not exist on the current implementation.
     * @throws {TypeError} When the file path is not a non-empty string.
     */
    delete(filePath: string): Promise<void>;
    /**
     * Deletes the given directory.
     * @param {string} dirPath The directory to delete.
     * @returns {Promise<void>} A promise that resolves when the directory is deleted.
     * @throws {NoSuchMethodError} When the method does not exist on the current implementation.
     * @throws {TypeError} When the directory path is not a non-empty string.
     */
    deleteAll(dirPath: string): Promise<void>;
    /**
     * Returns a list of directory entries for the given path.
     * @param {string} dirPath The path to the directory to read.
     * @returns {AsyncIterable<HfsDirectoryEntry>} A promise that resolves with the
     *   directory entries.
     * @throws {TypeError} If the directory path is not a string.
     * @throws {Error} If the directory cannot be read.
     */
    list(dirPath: string): AsyncIterable<HfsDirectoryEntry>;
    /**
     * Returns the size of the given file.
     * @param {string} filePath The path to the file to read.
     * @returns {Promise<number>} A promise that resolves with the size of the file.
     * @throws {TypeError} If the file path is not a string.
     * @throws {Error} If the file cannot be read.
     */
    size(filePath: string): Promise<number>;
    #private;
}
export type HfsImpl = import("@humanfs/types").HfsImpl;
export type HfsDirectoryEntry = import("@humanfs/types").HfsDirectoryEntry;
/**
 * Error to represent when a method is missing on an impl.
 */
export class NoSuchMethodError extends Error {
    /**
     * Creates a new instance.
     * @param {string} methodName The name of the method that was missing.
     */
    constructor(methodName: string);
}
/**
 * Error to represent when a method is not supported on an impl. This happens
 * when a method on `Hfs` is called with one name and the corresponding method
 * on the impl has a different name. (Example: `text()` and `bytes()`.)
 */
export class MethodNotSupportedError extends Error {
    /**
     * Creates a new instance.
     * @param {string} methodName The name of the method that was missing.
     */
    constructor(methodName: string);
}
/**
 * Error to represent when an impl is already set.
 */
export class ImplAlreadySetError extends Error {
    /**
     * Creates a new instance.
     */
    constructor();
}
/**
 * A class representing a log entry.
 */
export class LogEntry {
    /**
     * Creates a new instance.
     * @param {string} type The type of log entry.
     * @param {any} [data] The data associated with the log entry.
     */
    constructor(type: string, data?: any);
    /**
     * The type of log entry.
     * @type {string}
     */
    type: string;
    /**
     * The data associated with the log entry.
     * @type {any}
     */
    data: any;
    /**
     * The time at which the log entry was created.
     * @type {number}
     */
    timestamp: number;
}
/**
 * A class representing a file system utility library.
 * @implements {HfsImpl}
 */
export class Hfs implements HfsImpl {
    /**
     * Creates a new instance.
     * @param {object} options The options for the instance.
     * @param {HfsImpl} options.impl The implementation to use.
     */
    constructor({ impl }: {
        impl: HfsImpl;
    });
    /**
     * Starts a new log with the given name.
     * @param {string} name The name of the log to start;
     * @returns {void}
     * @throws {Error} When the log already exists.
     * @throws {TypeError} When the name is not a non-empty string.
     */
    logStart(name: string): void;
    /**
     * Ends a log with the given name and returns the entries.
     * @param {string} name The name of the log to end.
     * @returns {Array<LogEntry>} The entries in the log.
     * @throws {Error} When the log does not exist.
     */
    logEnd(name: string): Array<LogEntry>;
    /**
     * Determines if the current implementation is the base implementation.
     * @returns {boolean} True if the current implementation is the base implementation.
     */
    isBaseImpl(): boolean;
    /**
     * Sets the implementation for this instance.
     * @param {object} impl The implementation to use.
     * @returns {void}
     */
    setImpl(impl: object): void;
    /**
     * Resets the implementation for this instance back to its original.
     * @returns {void}
     */
    resetImpl(): void;
    /**
     * Reads the given file and returns the contents as text. Assumes UTF-8 encoding.
     * @param {string|URL} filePath The file to read.
     * @returns {Promise<string|undefined>} The contents of the file.
     * @throws {NoSuchMethodError} When the method does not exist on the current implementation.
     * @throws {TypeError} When the file path is not a non-empty string.
     */
    text(filePath: string | URL): Promise<string | undefined>;
    /**
     * Reads the given file and returns the contents as JSON. Assumes UTF-8 encoding.
     * @param {string|URL} filePath The file to read.
     * @returns {Promise<any|undefined>} The contents of the file as JSON.
     * @throws {NoSuchMethodError} When the method does not exist on the current implementation.
     * @throws {SyntaxError} When the file contents are not valid JSON.
     * @throws {TypeError} When the file path is not a non-empty string.
     */
    json(filePath: string | URL): Promise<any | undefined>;
    /**
     * Reads the given file and returns the contents as an ArrayBuffer.
     * @param {string|URL} filePath The file to read.
     * @returns {Promise<ArrayBuffer|undefined>} The contents of the file as an ArrayBuffer.
     * @throws {NoSuchMethodError} When the method does not exist on the current implementation.
     * @throws {TypeError} When the file path is not a non-empty string.
     * @deprecated Use bytes() instead.
     */
    arrayBuffer(filePath: string | URL): Promise<ArrayBuffer | undefined>;
    /**
     * Reads the given file and returns the contents as an Uint8Array.
     * @param {string|URL} filePath The file to read.
     * @returns {Promise<Uint8Array|undefined>} The contents of the file as an Uint8Array.
     * @throws {NoSuchMethodError} When the method does not exist on the current implementation.
     * @throws {TypeError} When the file path is not a non-empty string.
     */
    bytes(filePath: string | URL): Promise<Uint8Array | undefined>;
    /**
     * Writes the given data to the given file. Creates any necessary directories along the way.
     * If the data is a string, UTF-8 encoding is used.
     * @param {string|URL} filePath The file to write.
     * @param {string|ArrayBuffer|ArrayBufferView} contents The data to write.
     * @returns {Promise<void>} A promise that resolves when the file is written.
     * @throws {NoSuchMethodError} When the method does not exist on the current implementation.
     * @throws {TypeError} When the file path is not a non-empty string.
     */
    write(filePath: string | URL, contents: string | ArrayBuffer | ArrayBufferView): Promise<void>;
    /**
     * Appends the given data to the given file. Creates any necessary directories along the way.
     * If the data is a string, UTF-8 encoding is used.
     * @param {string|URL} filePath The file to append to.
     * @param {string|ArrayBuffer|ArrayBufferView} contents The data to append.
     * @returns {Promise<void>} A promise that resolves when the file is appended to.
     * @throws {NoSuchMethodError} When the method does not exist on the current implementation.
     * @throws {TypeError} When the file path is not a non-empty string.
     * @throws {TypeError} When the file contents are not a string or ArrayBuffer.
     * @throws {Error} When the file cannot be appended to.
     */
    append(filePath: string | URL, contents: string | ArrayBuffer | ArrayBufferView): Promise<void>;
    /**
     * Determines if the given file exists.
     * @param {string|URL} filePath The file to check.
     * @returns {Promise<boolean>} True if the file exists.
     * @throws {NoSuchMethodError} When the method does not exist on the current implementation.
     * @throws {TypeError} When the file path is not a non-empty string.
     */
    isFile(filePath: string | URL): Promise<boolean>;
    /**
     * Determines if the given directory exists.
     * @param {string|URL} dirPath The directory to check.
     * @returns {Promise<boolean>} True if the directory exists.
     * @throws {NoSuchMethodError} When the method does not exist on the current implementation.
     * @throws {TypeError} When the directory path is not a non-empty string.
     */
    isDirectory(dirPath: string | URL): Promise<boolean>;
    /**
     * Creates the given directory.
     * @param {string|URL} dirPath The directory to create.
     * @returns {Promise<void>} A promise that resolves when the directory is created.
     * @throws {NoSuchMethodError} When the method does not exist on the current implementation.
     * @throws {TypeError} When the directory path is not a non-empty string.
     */
    createDirectory(dirPath: string | URL): Promise<void>;
    /**
     * Deletes the given file or empty directory.
     * @param {string|URL} filePath The file to delete.
     * @returns {Promise<boolean>} A promise that resolves when the file or
     *   directory is deleted, true if the file or directory is deleted, false
     *   if the file or directory does not exist.
     * @throws {NoSuchMethodError} When the method does not exist on the current implementation.
     * @throws {TypeError} When the file path is not a non-empty string.
     */
    delete(filePath: string | URL): Promise<boolean>;
    /**
     * Deletes the given file or directory recursively.
     * @param {string|URL} dirPath The directory to delete.
     * @returns {Promise<boolean>} A promise that resolves when the file or
     *   directory is deleted, true if the file or directory is deleted, false
     *   if the file or directory does not exist.
     * @throws {NoSuchMethodError} When the method does not exist on the current implementation.
     * @throws {TypeError} When the directory path is not a non-empty string.
     */
    deleteAll(dirPath: string | URL): Promise<boolean>;
    /**
     * Returns a list of directory entries for the given path.
     * @param {string|URL} dirPath The path to the directory to read.
     * @returns {AsyncIterable<HfsDirectoryEntry>} A promise that resolves with the
     *   directory entries.
     * @throws {TypeError} If the directory path is not a string or URL.
     * @throws {Error} If the directory cannot be read.
     */
    list(dirPath: string | URL): AsyncIterable<HfsDirectoryEntry>;
    /**
     * Walks a directory using a depth-first traversal and returns the entries
     * from the traversal.
     * @param {string|URL} dirPath The path to the directory to walk.
     * @param {Object} [options] The options for the walk.
     * @param {(entry:HfsWalkEntry) => Promise<boolean>|boolean} [options.directoryFilter] A filter function to determine
     * 	if a directory's entries should be included in the walk.
     * @param {(entry:HfsWalkEntry) => Promise<boolean>|boolean} [options.entryFilter] A filter function to determine if
     * 	an entry should be included in the walk.
     * @returns {AsyncIterable<HfsWalkEntry>} A promise that resolves with the
     * 	directory entries.
     * @throws {TypeError} If the directory path is not a string or URL.
     * @throws {Error} If the directory cannot be read.
     */
    walk(dirPath: string | URL, { directoryFilter, entryFilter }?: {
        directoryFilter?: (entry: HfsWalkEntry) => Promise<boolean> | boolean;
        entryFilter?: (entry: HfsWalkEntry) => Promise<boolean> | boolean;
    }): AsyncIterable<HfsWalkEntry>;
    /**
     * Returns the size of the given file.
     * @param {string|URL} filePath The path to the file to read.
     * @returns {Promise<number>} A promise that resolves with the size of the file.
     * @throws {TypeError} If the file path is not a string or URL.
     * @throws {Error} If the file cannot be read.
     */
    size(filePath: string | URL): Promise<number>;
    /**
     * Returns the last modified timestamp of the given file or directory.
     * @param {string|URL} fileOrDirPath The path to the file or directory.
     * @returns {Promise<Date|undefined>} A promise that resolves with the last modified date
     *  or undefined if the file or directory does not exist.
     * @throws {TypeError} If the path is not a string or URL.
     */
    lastModified(fileOrDirPath: string | URL): Promise<Date | undefined>;
    /**
     * Copys a file from one location to another.
     * @param {string|URL} source The path to the file to copy.
     * @param {string|URL} destination The path to the new file.
     * @returns {Promise<void>} A promise that resolves when the file is copied.
     * @throws {TypeError} If the file path is not a string or URL.
     * @throws {Error} If the file cannot be copied.
     */
    copy(source: string | URL, destination: string | URL): Promise<void>;
    /**
     * Copies a file or directory from one location to another.
     * @param {string|URL} source The path to the file or directory to copy.
     * @param {string|URL} destination The path to copy the file or directory to.
     * @returns {Promise<void>} A promise that resolves when the file or directory is
     * copied.
     * @throws {TypeError} If the directory path is not a string or URL.
     * @throws {Error} If the directory cannot be copied.
     */
    copyAll(source: string | URL, destination: string | URL): Promise<void>;
    /**
     * Moves a file from the source path to the destination path.
     * @param {string|URL} source The location of the file to move.
     * @param {string|URL} destination The destination of the file to move.
     * @returns {Promise<void>} A promise that resolves when the move is complete.
     * @throws {TypeError} If the file or directory paths are not strings.
     * @throws {Error} If the file or directory cannot be moved.
     */
    move(source: string | URL, destination: string | URL): Promise<void>;
    /**
     * Moves a file or directory from one location to another.
     * @param {string|URL} source The path to the file or directory to move.
     * @param {string|URL} destination The path to move the file or directory to.
     * @returns {Promise<void>} A promise that resolves when the file or directory is
     * moved.
     * @throws {TypeError} If the source is not a string or URL.
     * @throws {TypeError} If the destination is not a string or URL.
     * @throws {Error} If the file or directory cannot be moved.
     */
    moveAll(source: string | URL, destination: string | URL): Promise<void>;
    #private;
}
export type HfsImpl = import("@humanfs/types").HfsImpl;
export type HfsDirectoryEntry = import("@humanfs/types").HfsDirectoryEntry;
export type HfsWalkEntry = import("@humanfs/types").HfsWalkEntry;
export { Hfs } from "./hfs.js";
export { Path } from "./path.js";
export * from "./errors.js";
export class Path {
    /**
     * Creates a new path based on the argument type. If the argument is a string,
     * it is assumed to be a file or directory path and is converted to a Path
     * instance. If the argument is a URL, it is assumed to be a file URL and is
     * converted to a Path instance. If the argument is a Path instance, it is
     * copied into a new Path instance. If the argument is an array, it is assumed
     * to be the steps of a path and is used to create a new Path instance.
     * @param {string|URL|Path|Array<string>} pathish The value to convert to a Path instance.
     * @returns {Path} A new Path instance.
     * @throws {TypeError} When pathish is not a string, URL, Path, or Array.
     * @throws {TypeError} When pathish is a string and is empty.
     */
    static from(pathish: string | URL | Path | Array<string>): Path;
    /**
     * Creates a new Path instance from a string.
     * @param {string} fileOrDirPath The file or directory path to convert.
     * @returns {Path} A new Path instance.
     * @deprecated Use Path.from() instead.
     */
    static fromString(fileOrDirPath: string): Path;
    /**
     * Creates a new Path instance from a URL.
     * @param {URL} url The URL to convert.
     * @returns {Path} A new Path instance.
     * @throws {TypeError} When url is not a URL instance.
     * @throws {TypeError} When url.pathname is empty.
     * @throws {TypeError} When url.protocol is not "file:".
     * @deprecated Use Path.from() instead.
     */
    static fromURL(url: URL): Path;
    /**
     * Creates a new instance.
     * @param {Iterable<string>} [steps] The steps to use for the path.
     * @throws {TypeError} When steps is not iterable.
     */
    constructor(steps?: Iterable<string>);
    /**
     * Adds steps to the end of the path.
     * @param  {...string} steps The steps to add to the path.
     * @returns {void}
     */
    push(...steps: string[]): void;
    /**
     * Removes the last step from the path.
     * @returns {string} The last step in the path.
     */
    pop(): string;
    /**
     * Returns an iterator for steps in the path.
     * @returns {IterableIterator<string>} An iterator for the steps in the path.
     */
    steps(): IterableIterator<string>;
    /**
     * Sets the name (the last step) of the path.
     * @type {string}
     */
    set name(value: string);
    /**
     * Retrieves the name (the last step) of the path.
     * @type {string}
     */
    get name(): string;
    /**
     * Retrieves the size of the path.
     * @type {number}
     */
    get size(): number;
    /**
     * Returns the path as a string.
     * @returns {string} The path as a string.
     */
    toString(): string;
    /**
     * Returns an iterator for the steps in the path.
     * @returns {IterableIterator<string>} An iterator for the steps in the path.
     */
    [Symbol.iterator](): IterableIterator<string>;
    #private;
}
export type HfsImpl = import("@humanfs/types").HfsImpl;
export type HfsDirectoryEntry = import("@humanfs/types").HfsDirectoryEntry;
export * from "./node-hfs.js";
export { Hfs } from "@humanfs/core";
/// <reference types="node" resolution-mode="require"/>
/**
 * A class representing the Node.js implementation of Hfs.
 * @implements {HfsImpl}
 */
export class NodeHfsImpl implements HfsImpl {
    /**
     * Creates a new instance.
     * @param {object} [options] The options for the instance.
     * @param {Fsp} [options.fsp] The file system module to use.
     */
    constructor({ fsp }?: {
        fsp?: Fsp;
    });
    /**
     * Reads a file and returns the contents as a string. Assumes UTF-8 encoding.
     * @param {string} filePath The path to the file to read.
     * @returns {Promise<string|undefined>} A promise that resolves with the contents of
     *     the file or undefined if the file doesn't exist.
     * @throws {TypeError} If the file path is not a string.
     * @throws {RangeError} If the file path is empty.
     * @throws {RangeError} If the file path is not absolute.
     * @throws {RangeError} If the file path is not a file.
     * @throws {RangeError} If the file path is not readable.
     */
    text(filePath: string): Promise<string | undefined>;
    /**
     * Reads a file and returns the contents as a JSON object. Assumes UTF-8 encoding.
     * @param {string} filePath The path to the file to read.
     * @returns {Promise<object|undefined>} A promise that resolves with the contents of
     *    the file or undefined if the file doesn't exist.
     * @throws {SyntaxError} If the file contents are not valid JSON.
     * @throws {Error} If the file cannot be read.
     * @throws {TypeError} If the file path is not a string.
     */
    json(filePath: string): Promise<object | undefined>;
    /**
     * Reads a file and returns the contents as an ArrayBuffer.
     * @param {string} filePath The path to the file to read.
     * @returns {Promise<ArrayBuffer|undefined>} A promise that resolves with the contents
     *    of the file or undefined if the file doesn't exist.
     * @throws {Error} If the file cannot be read.
     * @throws {TypeError} If the file path is not a string.
     * @deprecated Use bytes() instead.
     */
    arrayBuffer(filePath: string): Promise<ArrayBuffer | undefined>;
    /**
     * Reads a file and returns the contents as an Uint8Array.
     * @param {string} filePath The path to the file to read.
     * @returns {Promise<Uint8Array|undefined>} A promise that resolves with the contents
     *    of the file or undefined if the file doesn't exist.
     * @throws {Error} If the file cannot be read.
     * @throws {TypeError} If the file path is not a string.
     */
    bytes(filePath: string): Promise<Uint8Array | undefined>;
    /**
     * Writes a value to a file. If the value is a string, UTF-8 encoding is used.
     * @param {string} filePath The path to the file to write.
     * @param {string|ArrayBuffer|ArrayBufferView} contents The contents to write to the
     *   file.
     * @returns {Promise<void>} A promise that resolves when the file is
     *  written.
     * @throws {TypeError} If the file path is not a string.
     * @throws {Error} If the file cannot be written.
     */
    write(filePath: string, contents: string | ArrayBuffer | ArrayBufferView): Promise<void>;
    /**
     * Checks if a file exists.
     * @param {string} filePath The path to the file to check.
     * @returns {Promise<boolean>} A promise that resolves with true if the
     *    file exists or false if it does not.
     * @throws {Error} If the operation fails with a code other than ENOENT.
     */
    isFile(filePath: string): Promise<boolean>;
    /**
     * Checks if a directory exists.
     * @param {string} dirPath The path to the directory to check.
     * @returns {Promise<boolean>} A promise that resolves with true if the
     *    directory exists or false if it does not.
     * @throws {Error} If the operation fails with a code other than ENOENT.
     */
    isDirectory(dirPath: string): Promise<boolean>;
    /**
     * Creates a directory recursively.
     * @param {string} dirPath The path to the directory to create.
     * @returns {Promise<void>} A promise that resolves when the directory is
     *   created.
     */
    createDirectory(dirPath: string): Promise<void>;
    /**
     * Deletes a file or empty directory.
     * @param {string} fileOrDirPath The path to the file or directory to
     *   delete.
     * @returns {Promise<void>} A promise that resolves when the file or
     *   directory is deleted.
     * @throws {TypeError} If the file or directory path is not a string.
     * @throws {Error} If the file or directory cannot be deleted.
     * @throws {Error} If the file or directory is not found.
     */
    delete(fileOrDirPath: string): Promise<void>;
    /**
     * Deletes a file or directory recursively.
     * @param {string} fileOrDirPath The path to the file or directory to
     *   delete.
     * @returns {Promise<void>} A promise that resolves when the file or
     *   directory is deleted.
     * @throws {TypeError} If the file or directory path is not a string.
     * @throws {Error} If the file or directory cannot be deleted.
     * @throws {Error} If the file or directory is not found.
     */
    deleteAll(fileOrDirPath: string): Promise<void>;
    /**
     * Returns a list of directory entries for the given path.
     * @param {string} dirPath The path to the directory to read.
     * @returns {AsyncIterable<HfsDirectoryEntry>} A promise that resolves with the
     *   directory entries.
     * @throws {TypeError} If the directory path is not a string.
     * @throws {Error} If the directory cannot be read.
     */
    list(dirPath: string): AsyncIterable<HfsDirectoryEntry>;
    /**
     * Returns the size of a file.
     * @param {string} filePath The path to the file to read.
     * @returns {Promise<number|undefined>} A promise that resolves with the size of the
     *  file in bytes or undefined if the file doesn't exist.
     */
    size(filePath: string): Promise<number | undefined>;
    #private;
}
/**
 * A class representing a file system utility library.
 * @implements {HfsImpl}
 */
export class NodeHfs extends Hfs implements HfsImpl {
    /**
     * Creates a new instance.
     * @param {object} [options] The options for the instance.
     * @param {Fsp} [options.fsp] The file system module to use.
     */
    constructor({ fsp }?: {
        fsp?: Fsp;
    });
}
export const hfs: NodeHfs;
export type HfsImpl = import("@humanfs/types").HfsImpl;
export type HfsDirectoryEntry = import("@humanfs/types").HfsDirectoryEntry;
export type Fsp = typeof nativeFsp;
export type Dirent = import("fs").Dirent;
import { Hfs } from "@humanfs/core";
import nativeFsp from "node:fs/promises";
/// <reference types="node" resolution-mode="require"/>
/**
 * A class representing the Node.js implementation of Hfs.
 * @implements {HfsImpl}
 */
export class NodeHfsImpl implements HfsImpl {
    /**
     * Creates a new instance.
     * @param {object} [options] The options for the instance.
     * @param {Fsp} [options.fsp] The file system module to use.
     */
    constructor({ fsp }?: {
        fsp?: Fsp;
    });
    /**
     * Reads a file and returns the contents as an Uint8Array.
     * @param {string|URL} filePath The path to the file to read.
     * @returns {Promise<Uint8Array|undefined>} A promise that resolves with the contents
     *    of the file or undefined if the file doesn't exist.
     * @throws {Error} If the file cannot be read.
     * @throws {TypeError} If the file path is not a string.
     */
    bytes(filePath: string | URL): Promise<Uint8Array | undefined>;
    /**
     * Writes a value to a file. If the value is a string, UTF-8 encoding is used.
     * @param {string|URL} filePath The path to the file to write.
     * @param {Uint8Array} contents The contents to write to the
     *   file.
     * @returns {Promise<void>} A promise that resolves when the file is
     *  written.
     * @throws {TypeError} If the file path is not a string.
     * @throws {Error} If the file cannot be written.
     */
    write(filePath: string | URL, contents: Uint8Array): Promise<void>;
    /**
     * Appends a value to a file. If the value is a string, UTF-8 encoding is used.
     * @param {string|URL} filePath The path to the file to append to.
     * @param {Uint8Array} contents The contents to append to the
     *  file.
     * @returns {Promise<void>} A promise that resolves when the file is
     * written.
     * @throws {TypeError} If the file path is not a string.
     * @throws {Error} If the file cannot be appended to.
     */
    append(filePath: string | URL, contents: Uint8Array): Promise<void>;
    /**
     * Checks if a file exists.
     * @param {string|URL} filePath The path to the file to check.
     * @returns {Promise<boolean>} A promise that resolves with true if the
     *    file exists or false if it does not.
     * @throws {Error} If the operation fails with a code other than ENOENT.
     */
    isFile(filePath: string | URL): Promise<boolean>;
    /**
     * Checks if a directory exists.
     * @param {string|URL} dirPath The path to the directory to check.
     * @returns {Promise<boolean>} A promise that resolves with true if the
     *    directory exists or false if it does not.
     * @throws {Error} If the operation fails with a code other than ENOENT.
     */
    isDirectory(dirPath: string | URL): Promise<boolean>;
    /**
     * Creates a directory recursively.
     * @param {string|URL} dirPath The path to the directory to create.
     * @returns {Promise<void>} A promise that resolves when the directory is
     *   created.
     */
    createDirectory(dirPath: string | URL): Promise<void>;
    /**
     * Deletes a file or empty directory.
     * @param {string|URL} fileOrDirPath The path to the file or directory to
     *   delete.
     * @returns {Promise<boolean>} A promise that resolves when the file or
     *   directory is deleted, true if the file or directory is deleted, false
     *   if the file or directory does not exist.
     * @throws {TypeError} If the file or directory path is not a string.
     * @throws {Error} If the file or directory cannot be deleted.
     */
    delete(fileOrDirPath: string | URL): Promise<boolean>;
    /**
     * Deletes a file or directory recursively.
     * @param {string|URL} fileOrDirPath The path to the file or directory to
     *   delete.
     * @returns {Promise<boolean>} A promise that resolves when the file or
     *   directory is deleted, true if the file or directory is deleted, false
     *   if the file or directory does not exist.
     * @throws {TypeError} If the file or directory path is not a string.
     * @throws {Error} If the file or directory cannot be deleted.
     */
    deleteAll(fileOrDirPath: string | URL): Promise<boolean>;
    /**
     * Returns a list of directory entries for the given path.
     * @param {string|URL} dirPath The path to the directory to read.
     * @returns {AsyncIterable<HfsDirectoryEntry>} A promise that resolves with the
     *   directory entries.
     * @throws {TypeError} If the directory path is not a string.
     * @throws {Error} If the directory cannot be read.
     */
    list(dirPath: string | URL): AsyncIterable<HfsDirectoryEntry>;
    /**
     * Returns the size of a file. This method handles ENOENT errors
     * and returns undefined in that case.
     * @param {string|URL} filePath The path to the file to read.
     * @returns {Promise<number|undefined>} A promise that resolves with the size of the
     *  file in bytes or undefined if the file doesn't exist.
     */
    size(filePath: string | URL): Promise<number | undefined>;
    /**
     * Returns the last modified date of a file or directory. This method handles ENOENT errors
     * and returns undefined in that case.
     * @param {string|URL} fileOrDirPath The path to the file to read.
     * @returns {Promise<Date|undefined>} A promise that resolves with the last modified
     * date of the file or directory, or undefined if the file doesn't exist.
     */
    lastModified(fileOrDirPath: string | URL): Promise<Date | undefined>;
    /**
     * Copies a file from one location to another.
     * @param {string|URL} source The path to the file to copy.
     * @param {string|URL} destination The path to copy the file to.
     * @returns {Promise<void>} A promise that resolves when the file is copied.
     * @throws {Error} If the source file does not exist.
     * @throws {Error} If the source file is a directory.
     * @throws {Error} If the destination file is a directory.
     */
    copy(source: string | URL, destination: string | URL): Promise<void>;
    /**
     * Copies a file or directory from one location to another.
     * @param {string|URL} source The path to the file or directory to copy.
     * @param {string|URL} destination The path to copy the file or directory to.
     * @returns {Promise<void>} A promise that resolves when the file or directory is
     * copied.
     * @throws {Error} If the source file or directory does not exist.
     * @throws {Error} If the destination file or directory is a directory.
     */
    copyAll(source: string | URL, destination: string | URL): Promise<void>;
    /**
     * Moves a file from the source path to the destination path.
     * @param {string|URL} source The location of the file to move.
     * @param {string|URL} destination The destination of the file to move.
     * @returns {Promise<void>} A promise that resolves when the move is complete.
     * @throws {TypeError} If the file paths are not strings.
     * @throws {Error} If the file cannot be moved.
     */
    move(source: string | URL, destination: string | URL): Promise<void>;
    /**
     * Moves a file or directory from the source path to the destination path.
     * @param {string|URL} source The location of the file or directory to move.
     * @param {string|URL} destination The destination of the file or directory to move.
     * @returns {Promise<void>} A promise that resolves when the move is complete.
     * @throws {TypeError} If the file paths are not strings.
     * @throws {Error} If the file or directory cannot be moved.
     */
    moveAll(source: string | URL, destination: string | URL): Promise<void>;
    #private;
}
/**
 * A class representing a file system utility library.
 * @implements {HfsImpl}
 */
export class NodeHfs extends Hfs implements HfsImpl {
    /**
     * Creates a new instance.
     * @param {object} [options] The options for the instance.
     * @param {Fsp} [options.fsp] The file system module to use.
     */
    constructor({ fsp }?: {
        fsp?: Fsp;
    });
}
export const hfs: NodeHfs;
export type HfsImpl = import("@humanfs/types").HfsImpl;
export type HfsDirectoryEntry = import("@humanfs/types").HfsDirectoryEntry;
export type Fsp = typeof nativeFsp;
export type Dirent = import("fs").Dirent;
import { Hfs } from "@humanfs/core";
import nativeFsp from "node:fs/promises";
export { ModuleImporter };
import { ModuleImporter } from "./module-importer.cjs";
/**
 * A class that manages a queue of retry jobs.
 */
export class Retrier {
    /**
     * Creates a new instance.
     * @param {Function} check The function to call.
     * @param {object} [options] The options for the instance.
     * @param {number} [options.timeout] The timeout for the queue.
     * @param {number} [options.maxDelay] The maximum delay for the queue.
     */
    constructor(check: Function, { timeout, maxDelay }?: {
        timeout?: number | undefined;
        maxDelay?: number | undefined;
    } | undefined);
    /**
     * Adds a new retry job to the queue.
     * @param {Function} fn The function to call.
     * @param {object} [options] The options for the job.
     * @param {AbortSignal} [options.signal] The AbortSignal to monitor for cancellation.
     * @returns {Promise<any>} A promise that resolves when the queue is
     *  processed.
     */
    retry(fn: Function, { signal }?: {
        signal?: AbortSignal | undefined;
    } | undefined): Promise<any>;
    #private;
}
import type { SourceMapInput } from '@jridgewell/trace-mapping';
import type { DecodedSourceMap, EncodedSourceMap, Pos, Mapping } from './types';
export type { DecodedSourceMap, EncodedSourceMap, Mapping };
export declare type Options = {
    file?: string | null;
    sourceRoot?: string | null;
};
/**
 * Provides the state to generate a sourcemap.
 */
export declare class GenMapping {
    private _names;
    private _sources;
    private _sourcesContent;
    private _mappings;
    private _ignoreList;
    file: string | null | undefined;
    sourceRoot: string | null | undefined;
    constructor({ file, sourceRoot }?: Options);
}
/**
 * A low-level API to associate a generated position with an original source position. Line and
 * column here are 0-based, unlike `addMapping`.
 */
export declare function addSegment(map: GenMapping, genLine: number, genColumn: number, source?: null, sourceLine?: null, sourceColumn?: null, name?: null, content?: null): void;
export declare function addSegment(map: GenMapping, genLine: number, genColumn: number, source: string, sourceLine: number, sourceColumn: number, name?: null, content?: string | null): void;
export declare function addSegment(map: GenMapping, genLine: number, genColumn: number, source: string, sourceLine: number, sourceColumn: number, name: string, content?: string | null): void;
/**
 * A high-level API to associate a generated position with an original source position. Line is
 * 1-based, but column is 0-based, due to legacy behavior in `source-map` library.
 */
export declare function addMapping(map: GenMapping, mapping: {
    generated: Pos;
    source?: null;
    original?: null;
    name?: null;
    content?: null;
}): void;
export declare function addMapping(map: GenMapping, mapping: {
    generated: Pos;
    source: string;
    original: Pos;
    name?: null;
    content?: string | null;
}): void;
export declare function addMapping(map: GenMapping, mapping: {
    generated: Pos;
    source: string;
    original: Pos;
    name: string;
    content?: string | null;
}): void;
/**
 * Same as `addSegment`, but will only add the segment if it generates useful information in the
 * resulting map. This only works correctly if segments are added **in order**, meaning you should
 * not add a segment with a lower generated line/column than one that came before.
 */
export declare const maybeAddSegment: typeof addSegment;
/**
 * Same as `addMapping`, but will only add the mapping if it generates useful information in the
 * resulting map. This only works correctly if mappings are added **in order**, meaning you should
 * not add a mapping with a lower generated line/column than one that came before.
 */
export declare const maybeAddMapping: typeof addMapping;
/**
 * Adds/removes the content of the source file to the source map.
 */
export declare function setSourceContent(map: GenMapping, source: string, content: string | null): void;
export declare function setIgnore(map: GenMapping, source: string, ignore?: boolean): void;
/**
 * Returns a sourcemap object (with decoded mappings) suitable for passing to a library that expects
 * a sourcemap, or to JSON.stringify.
 */
export declare function toDecodedMap(map: GenMapping): DecodedSourceMap;
/**
 * Returns a sourcemap object (with encoded mappings) suitable for passing to a library that expects
 * a sourcemap, or to JSON.stringify.
 */
export declare function toEncodedMap(map: GenMapping): EncodedSourceMap;
/**
 * Constructs a new GenMapping, using the already present mappings of the input.
 */
export declare function fromMap(input: SourceMapInput): GenMapping;
/**
 * Returns an array of high-level mapping objects for every recorded segment, which could then be
 * passed to the `source-map` library.
 */
export declare function allMappings(map: GenMapping): Mapping[];
declare type GeneratedColumn = number;
declare type SourcesIndex = number;
declare type SourceLine = number;
declare type SourceColumn = number;
declare type NamesIndex = number;
export declare type SourceMapSegment = [GeneratedColumn] | [GeneratedColumn, SourcesIndex, SourceLine, SourceColumn] | [GeneratedColumn, SourcesIndex, SourceLine, SourceColumn, NamesIndex];
export declare const COLUMN = 0;
export declare const SOURCES_INDEX = 1;
export declare const SOURCE_LINE = 2;
export declare const SOURCE_COLUMN = 3;
export declare const NAMES_INDEX = 4;
export {};
import type { SourceMapSegment } from './sourcemap-segment';
export interface SourceMapV3 {
    file?: string | null;
    names: readonly string[];
    sourceRoot?: string;
    sources: readonly (string | null)[];
    sourcesContent?: readonly (string | null)[];
    version: 3;
    ignoreList?: readonly number[];
}
export interface EncodedSourceMap extends SourceMapV3 {
    mappings: string;
}
export interface DecodedSourceMap extends SourceMapV3 {
    mappings: readonly SourceMapSegment[][];
}
export interface Pos {
    line: number;
    column: number;
}
export declare type Mapping = {
    generated: Pos;
    source: undefined;
    original: undefined;
    name: undefined;
} | {
    generated: Pos;
    source: string;
    original: Pos;
    name: string;
} | {
    generated: Pos;
    source: string;
    original: Pos;
    name: undefined;
};
/**
 * Attempts to resolve `input` URL/path relative to `base`.
 */
export default function resolve(input: string, base: string | undefined): string;
declare type Key = string | number | symbol;
/**
 * SetArray acts like a `Set` (allowing only one occurrence of a string `key`), but provides the
 * index of the `key` in the backing array.
 *
 * This is designed to allow synchronizing a second array with the contents of the backing array,
 * like how in a sourcemap `sourcesContent[i]` is the source content associated with `source[i]`,
 * and there are never duplicates.
 */
export declare class SetArray<T extends Key = Key> {
    private _indexes;
    array: readonly T[];
    constructor();
}
/**
 * Gets the index associated with `key` in the backing array, if it is already present.
 */
export declare function get<T extends Key>(setarr: SetArray<T>, key: T): number | undefined;
/**
 * Puts `key` into the backing array, if it is not already present. Returns
 * the index of the `key` in the backing array.
 */
export declare function put<T extends Key>(setarr: SetArray<T>, key: T): number;
/**
 * Pops the last added item out of the SetArray.
 */
export declare function pop<T extends Key>(setarr: SetArray<T>): void;
/**
 * Removes the key, if it exists in the set.
 */
export declare function remove<T extends Key>(setarr: SetArray<T>, key: T): void;
export {};
declare type Line = number;
declare type Column = number;
declare type Kind = number;
declare type Name = number;
declare type Var = number;
declare type SourcesIndex = number;
declare type ScopesIndex = number;
declare type Mix<A, B, O> = (A & O) | (B & O);
export declare type OriginalScope = Mix<[
    Line,
    Column,
    Line,
    Column,
    Kind
], [
    Line,
    Column,
    Line,
    Column,
    Kind,
    Name
], {
    vars: Var[];
}>;
export declare type GeneratedRange = Mix<[
    Line,
    Column,
    Line,
    Column
], [
    Line,
    Column,
    Line,
    Column,
    SourcesIndex,
    ScopesIndex
], {
    callsite: CallSite | null;
    bindings: Binding[];
    isScope: boolean;
}>;
export declare type CallSite = [SourcesIndex, Line, Column];
declare type Binding = BindingExpressionRange[];
export declare type BindingExpressionRange = [Name] | [Name, Line, Column];
export declare function decodeOriginalScopes(input: string): OriginalScope[];
export declare function encodeOriginalScopes(scopes: OriginalScope[]): string;
export declare function decodeGeneratedRanges(input: string): GeneratedRange[];
export declare function encodeGeneratedRanges(ranges: GeneratedRange[]): string;
export {};
export { decodeOriginalScopes, encodeOriginalScopes, decodeGeneratedRanges, encodeGeneratedRanges, } from './scopes';
export type { OriginalScope, GeneratedRange, CallSite, BindingExpressionRange } from './scopes';
export declare type SourceMapSegment = [number] | [number, number, number, number] | [number, number, number, number, number];
export declare type SourceMapLine = SourceMapSegment[];
export declare type SourceMapMappings = SourceMapLine[];
export declare function decode(mappings: string): SourceMapMappings;
export declare function encode(decoded: SourceMapMappings): string;
export declare function encode(decoded: Readonly<SourceMapMappings>): string;
export declare class StringWriter {
    pos: number;
    private out;
    private buffer;
    write(v: number): void;
    flush(): string;
}
export declare class StringReader {
    pos: number;
    private buffer;
    constructor(buffer: string);
    next(): number;
    peek(): number;
    indexOf(char: string): number;
}
import type { StringReader, StringWriter } from './strings';
export declare const comma: number;
export declare const semicolon: number;
export declare function decodeInteger(reader: StringReader, relative: number): number;
export declare function encodeInteger(builder: StringWriter, num: number, relative: number): number;
export declare function hasMoreVlq(reader: StringReader, max: number): boolean;
import { TraceMap } from './trace-mapping';
import type { SectionedSourceMapInput } from './types';
type AnyMap = {
    new (map: SectionedSourceMapInput, mapUrl?: string | null): TraceMap;
    (map: SectionedSourceMapInput, mapUrl?: string | null): TraceMap;
};
export declare const AnyMap: AnyMap;
export {};
import type { SourceMapSegment, ReverseSegment } from './sourcemap-segment';
export type MemoState = {
    lastKey: number;
    lastNeedle: number;
    lastIndex: number;
};
export declare let found: boolean;
/**
 * A binary search implementation that returns the index if a match is found.
 * If no match is found, then the left-index (the index associated with the item that comes just
 * before the desired index) is returned. To maintain proper sort order, a splice would happen at
 * the next index:
 *
 * ```js
 * const array = [1, 3];
 * const needle = 2;
 * const index = binarySearch(array, needle, (item, needle) => item - needle);
 *
 * assert.equal(index, 0);
 * array.splice(index + 1, 0, needle);
 * assert.deepEqual(array, [1, 2, 3]);
 * ```
 */
export declare function binarySearch(haystack: SourceMapSegment[] | ReverseSegment[], needle: number, low: number, high: number): number;
export declare function upperBound(haystack: SourceMapSegment[] | ReverseSegment[], needle: number, index: number): number;
export declare function lowerBound(haystack: SourceMapSegment[] | ReverseSegment[], needle: number, index: number): number;
export declare function memoizedState(): MemoState;
/**
 * This overly complicated beast is just to record the last tested line/column and the resulting
 * index, allowing us to skip a few tests if mappings are monotonically increasing.
 */
export declare function memoizedBinarySearch(haystack: SourceMapSegment[] | ReverseSegment[], needle: number, state: MemoState, key: number): number;
import type { ReverseSegment, SourceMapSegment } from './sourcemap-segment';
import type { MemoState } from './binary-search';
export type Source = {
    __proto__: null;
    [line: number]: Exclude<ReverseSegment, [number]>[];
};
export default function buildBySources(decoded: readonly SourceMapSegment[][], memos: MemoState[]): Source[];
export default function resolve(input: string, base: string | undefined): string;
import type { SourceMapSegment } from './sourcemap-segment';
export default function maybeSort(mappings: SourceMapSegment[][], owned: boolean): SourceMapSegment[][];
type GeneratedColumn = number;
type SourcesIndex = number;
type SourceLine = number;
type SourceColumn = number;
type NamesIndex = number;
type GeneratedLine = number;
export type SourceMapSegment = [GeneratedColumn] | [GeneratedColumn, SourcesIndex, SourceLine, SourceColumn] | [GeneratedColumn, SourcesIndex, SourceLine, SourceColumn, NamesIndex];
export type ReverseSegment = [SourceColumn, GeneratedLine, GeneratedColumn];
export declare const COLUMN = 0;
export declare const SOURCES_INDEX = 1;
export declare const SOURCE_LINE = 2;
export declare const SOURCE_COLUMN = 3;
export declare const NAMES_INDEX = 4;
export declare const REV_GENERATED_LINE = 1;
export declare const REV_GENERATED_COLUMN = 2;
export {};
/**
 * Removes everything after the last "/", but leaves the slash.
 */
export default function stripFilename(path: string | undefined | null): string;
import type { SourceMapSegment } from './sourcemap-segment';
import type { SourceMapV3, DecodedSourceMap, EncodedSourceMap, InvalidOriginalMapping, OriginalMapping, InvalidGeneratedMapping, GeneratedMapping, SourceMapInput, Needle, SourceNeedle, SourceMap, EachMapping } from './types';
export type { SourceMapSegment } from './sourcemap-segment';
export type { SourceMap, DecodedSourceMap, EncodedSourceMap, Section, SectionedSourceMap, SourceMapV3, Bias, EachMapping, GeneratedMapping, InvalidGeneratedMapping, InvalidOriginalMapping, Needle, OriginalMapping, OriginalMapping as Mapping, SectionedSourceMapInput, SourceMapInput, SourceNeedle, XInput, EncodedSourceMapXInput, DecodedSourceMapXInput, SectionedSourceMapXInput, SectionXInput, } from './types';
export declare const LEAST_UPPER_BOUND = -1;
export declare const GREATEST_LOWER_BOUND = 1;
export { AnyMap } from './any-map';
export declare class TraceMap implements SourceMap {
    version: SourceMapV3['version'];
    file: SourceMapV3['file'];
    names: SourceMapV3['names'];
    sourceRoot: SourceMapV3['sourceRoot'];
    sources: SourceMapV3['sources'];
    sourcesContent: SourceMapV3['sourcesContent'];
    ignoreList: SourceMapV3['ignoreList'];
    resolvedSources: string[];
    private _encoded;
    private _decoded;
    private _decodedMemo;
    private _bySources;
    private _bySourceMemos;
    constructor(map: SourceMapInput, mapUrl?: string | null);
}
/**
 * Returns the encoded (VLQ string) form of the SourceMap's mappings field.
 */
export declare function encodedMappings(map: TraceMap): EncodedSourceMap['mappings'];
/**
 * Returns the decoded (array of lines of segments) form of the SourceMap's mappings field.
 */
export declare function decodedMappings(map: TraceMap): Readonly<DecodedSourceMap['mappings']>;
/**
 * A low-level API to find the segment associated with a generated line/column (think, from a
 * stack trace). Line and column here are 0-based, unlike `originalPositionFor`.
 */
export declare function traceSegment(map: TraceMap, line: number, column: number): Readonly<SourceMapSegment> | null;
/**
 * A higher-level API to find the source/line/column associated with a generated line/column
 * (think, from a stack trace). Line is 1-based, but column is 0-based, due to legacy behavior in
 * `source-map` library.
 */
export declare function originalPositionFor(map: TraceMap, needle: Needle): OriginalMapping | InvalidOriginalMapping;
/**
 * Finds the generated line/column position of the provided source/line/column source position.
 */
export declare function generatedPositionFor(map: TraceMap, needle: SourceNeedle): GeneratedMapping | InvalidGeneratedMapping;
/**
 * Finds all generated line/column positions of the provided source/line/column source position.
 */
export declare function allGeneratedPositionsFor(map: TraceMap, needle: SourceNeedle): GeneratedMapping[];
/**
 * Iterates each mapping in generated position order.
 */
export declare function eachMapping(map: TraceMap, cb: (mapping: EachMapping) => void): void;
/**
 * Retrieves the source content for a particular source, if its found. Returns null if not.
 */
export declare function sourceContentFor(map: TraceMap, source: string): string | null;
/**
 * Determines if the source is marked to ignore by the source map.
 */
export declare function isIgnored(map: TraceMap, source: string): boolean;
/**
 * A helper that skips sorting of the input map's mappings array, which can be expensive for larger
 * maps.
 */
export declare function presortedDecodedMap(map: DecodedSourceMap, mapUrl?: string): TraceMap;
/**
 * Returns a sourcemap object (with decoded mappings) suitable for passing to a library that expects
 * a sourcemap, or to JSON.stringify.
 */
export declare function decodedMap(map: TraceMap): Omit<DecodedSourceMap, 'mappings'> & {
    mappings: readonly SourceMapSegment[][];
};
/**
 * Returns a sourcemap object (with encoded mappings) suitable for passing to a library that expects
 * a sourcemap, or to JSON.stringify.
 */
export declare function encodedMap(map: TraceMap): EncodedSourceMap;
import type { SourceMapSegment } from './sourcemap-segment';
import type { GREATEST_LOWER_BOUND, LEAST_UPPER_BOUND, TraceMap } from './trace-mapping';
export interface SourceMapV3 {
    file?: string | null;
    names: string[];
    sourceRoot?: string;
    sources: (string | null)[];
    sourcesContent?: (string | null)[];
    version: 3;
    ignoreList?: number[];
}
export interface EncodedSourceMap extends SourceMapV3 {
    mappings: string;
}
export interface DecodedSourceMap extends SourceMapV3 {
    mappings: SourceMapSegment[][];
}
export interface Section {
    offset: {
        line: number;
        column: number;
    };
    map: EncodedSourceMap | DecodedSourceMap | SectionedSourceMap;
}
export interface SectionedSourceMap {
    file?: string | null;
    sections: Section[];
    version: 3;
}
export type OriginalMapping = {
    source: string | null;
    line: number;
    column: number;
    name: string | null;
};
export type InvalidOriginalMapping = {
    source: null;
    line: null;
    column: null;
    name: null;
};
export type GeneratedMapping = {
    line: number;
    column: number;
};
export type InvalidGeneratedMapping = {
    line: null;
    column: null;
};
export type Bias = typeof GREATEST_LOWER_BOUND | typeof LEAST_UPPER_BOUND;
export type XInput = {
    x_google_ignoreList?: SourceMapV3['ignoreList'];
};
export type EncodedSourceMapXInput = EncodedSourceMap & XInput;
export type DecodedSourceMapXInput = DecodedSourceMap & XInput;
export type SectionedSourceMapXInput = Omit<SectionedSourceMap, 'sections'> & {
    sections: SectionXInput[];
};
export type SectionXInput = Omit<Section, 'map'> & {
    map: SectionedSourceMapInput;
};
export type SourceMapInput = string | EncodedSourceMapXInput | DecodedSourceMapXInput | TraceMap;
export type SectionedSourceMapInput = SourceMapInput | SectionedSourceMapXInput;
export type Needle = {
    line: number;
    column: number;
    bias?: Bias;
};
export type SourceNeedle = {
    source: string;
    line: number;
    column: number;
    bias?: Bias;
};
export type EachMapping = {
    generatedLine: number;
    generatedColumn: number;
    source: null;
    originalLine: null;
    originalColumn: null;
    name: null;
} | {
    generatedLine: number;
    generatedColumn: number;
    source: string | null;
    originalLine: number;
    originalColumn: number;
    name: string | null;
};
export declare abstract class SourceMap {
    version: SourceMapV3['version'];
    file: SourceMapV3['file'];
    names: SourceMapV3['names'];
    sourceRoot: SourceMapV3['sourceRoot'];
    sources: SourceMapV3['sources'];
    sourcesContent: SourceMapV3['sourcesContent'];
    resolvedSources: SourceMapV3['sources'];
    ignoreList: SourceMapV3['ignoreList'];
}
export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';export { default } from '@mui/material/SvgIcon';